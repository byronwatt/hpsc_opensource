diff --git a/Makefile.def b/Makefile.def
index acdcd625ed6..81646e680d8 100644
--- a/Makefile.def
+++ b/Makefile.def
@@ -130,7 +130,8 @@ host_modules= { module= zlib; no_install=true; no_check=true;
 host_modules= { module= gnulib; };
 host_modules= { module= gdbsupport; };
 host_modules= { module= gdbserver; };
-host_modules= { module= gdb; };
+host_modules= { module= gdb;
+		extra_configure_flags='@extra_mpfr_configure_flags@ @extra_mpc_mpfr_configure_flags@'; };
 host_modules= { module= expect; };
 host_modules= { module= guile; };
 host_modules= { module= tk; };
@@ -419,6 +420,8 @@ dependencies = { module=all-intl; on=all-libiconv; };
 
 // Host modules specific to gdb.
 dependencies = { module=configure-gdb; on=all-intl; };
+dependencies = { module=configure-gdb; on=all-gmp; };
+dependencies = { module=configure-gdb; on=all-mpfr; };
 dependencies = { module=configure-gdb; on=configure-sim; };
 dependencies = { module=configure-gdb; on=all-bfd; };
 dependencies = { module=configure-gdb; on=all-gnulib; };
diff --git a/Makefile.in b/Makefile.in
index 3aacd2daac9..1b77c5662c2 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -37186,7 +37186,7 @@ configure-gdb:
 	  $$s/$$module_srcdir/configure \
 	  --srcdir=$${topdir}/$$module_srcdir \
 	  $(HOST_CONFIGARGS) --build=${build_alias} --host=${host_alias} \
-	  --target=${target_alias}  \
+	  --target=${target_alias} @extra_mpfr_configure_flags@ @extra_mpc_mpfr_configure_flags@ \
 	  || exit 1
 @endif gdb
 
@@ -63746,6 +63746,8 @@ all-libcc1: maybe-all-gcc
 all-c++tools: maybe-all-gcc
 all-utils: maybe-all-libiberty
 configure-gdb: maybe-all-intl
+configure-gdb: maybe-all-gmp
+configure-gdb: maybe-all-mpfr
 configure-gdb: maybe-all-bfd
 configure-gdb: maybe-all-libiconv
 all-gdb: maybe-all-libiberty
diff --git a/bfd/bfd-in2.h b/bfd/bfd-in2.h
index c0b563aec02..ea5e5f96010 100644
--- a/bfd/bfd-in2.h
+++ b/bfd/bfd-in2.h
@@ -4418,6 +4418,8 @@ number for the SBIC, SBIS, SBI and CBI instructions  */
   BFD_RELOC_RISCV_SET16,
   BFD_RELOC_RISCV_SET32,
   BFD_RELOC_RISCV_32_PCREL,
+  BFD_RELOC_RISCV_SET_ULEB128,
+  BFD_RELOC_RISCV_SUB_ULEB128,
 
 /* Renesas RL78 Relocations.  */
   BFD_RELOC_RL78_NEG8,
diff --git a/bfd/elfnn-riscv.c b/bfd/elfnn-riscv.c
index 8f9f0d8a86a..d5cb6c878d2 100644
--- a/bfd/elfnn-riscv.c
+++ b/bfd/elfnn-riscv.c
@@ -1616,6 +1616,26 @@ riscv_global_pointer_value (struct bfd_link_info *info)
   return h->u.def.value + sec_addr (h->u.def.section);
 }
 
+/* Write VAL in uleb128 format to P, returning a pointer to the
+   following byte.
+   This code is copied from elf-attr.c.  */
+
+static bfd_byte *
+write_uleb128 (bfd_byte *p, unsigned int val)
+{
+  bfd_byte c;
+  do
+    {
+      c = val & 0x7f;
+      val >>= 7;
+      if (val)
+	c |= 0x80;
+      *(p++) = c;
+    }
+  while (val);
+  return p;
+}
+
 /* Emplace a static relocation.  */
 
 static bfd_reloc_status_type
@@ -1709,6 +1729,25 @@ perform_relocation (const reloc_howto_type *howto,
 	value = ENCODE_CITYPE_LUI_IMM (RISCV_CONST_HIGH_PART (value));
       break;
 
+    case R_RISCV_SET_ULEB128:
+    case R_RISCV_SUB_ULEB128:
+      {
+	unsigned int len = 0;
+	bfd_byte *endp, *p;
+
+	_bfd_read_unsigned_leb128 (input_bfd, contents + rel->r_offset, &len);
+
+	/* Clean the contents value to zero.  Do not reduce the length.  */
+	p = contents + rel->r_offset;
+	endp = p + len -1;
+	memset (p, 0x80, len - 1);
+	*(endp) = 0;
+	p = write_uleb128 (p, value) - 1;
+	if (p < endp)
+	  *p |= 0x80;
+	return bfd_reloc_ok;
+      }
+
     case R_RISCV_32:
     case R_RISCV_64:
     case R_RISCV_ADD8:
@@ -2004,6 +2043,8 @@ riscv_elf_relocate_section (bfd *output_bfd,
   struct elf_link_hash_entry **sym_hashes = elf_sym_hashes (input_bfd);
   bfd_vma *local_got_offsets = elf_local_got_offsets (input_bfd);
   bool absolute;
+  bfd_vma uleb128_vma = 0;
+  Elf_Internal_Rela *uleb128_rel = NULL;
 
   if (!riscv_init_pcrel_relocs (&pcrel_relocs))
     return false;
@@ -2015,7 +2056,7 @@ riscv_elf_relocate_section (bfd *output_bfd,
       struct elf_link_hash_entry *h;
       Elf_Internal_Sym *sym;
       asection *sec;
-      bfd_vma relocation;
+      bfd_vma relocation = 0;
       bfd_reloc_status_type r = bfd_reloc_ok;
       const char *name = NULL;
       bfd_vma off, ie_off;
@@ -2345,6 +2386,50 @@ riscv_elf_relocate_section (bfd *output_bfd,
 	  /* These require no special handling beyond perform_relocation.  */
 	  break;
 
+	case R_RISCV_SET_ULEB128:
+	  if (!uleb128_rel)
+	    {
+	      /* Save the minuend to use later.  */
+	      uleb128_vma = relocation;
+	      uleb128_rel = rel;
+	      continue;
+	    }
+	  else
+	    {
+	      if (uleb128_rel->r_offset != rel->r_offset)
+		{
+		  msg = ("R_RISCV_SET_ULEB128 and R_RISCV_SUB_ULEB128 "
+			 "are mismatched. ");
+		  r = bfd_reloc_dangerous;
+		  break;
+		}
+	      relocation = relocation - uleb128_vma;
+	      uleb128_rel = NULL;
+	    }
+	  break;
+
+	case R_RISCV_SUB_ULEB128:
+	  if (!uleb128_rel)
+	    {
+	      /* Save the subtrahend to use later.  */
+	      uleb128_vma = relocation;
+	      uleb128_rel = rel;
+	      continue;
+	    }
+	  else
+	    {
+	      if (uleb128_rel->r_offset != rel->r_offset)
+		{
+		  msg = ("R_RISCV_SET_ULEB128 and R_RISCV_SUB_ULEB128 "
+			 "are mismatched. ");
+		  r = bfd_reloc_dangerous;
+		  break;
+		}
+	      relocation = uleb128_vma - relocation;
+	      uleb128_rel = NULL;
+	    }
+	  break;
+
 	case R_RISCV_GOT_HI20:
 	  if (h != NULL)
 	    {
diff --git a/bfd/elfxx-riscv.c b/bfd/elfxx-riscv.c
index cb2cc146c04..bccdba9a3fa 100644
--- a/bfd/elfxx-riscv.c
+++ b/bfd/elfxx-riscv.c
@@ -38,6 +38,8 @@
    relocations for the debug info.  */
 static bfd_reloc_status_type riscv_elf_add_sub_reloc
   (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);
+static bfd_reloc_status_type riscv_elf_ignore_reloc
+  (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);
 
 /* The relocation table used for SHT_RELA sections.  */
 
@@ -870,6 +872,37 @@ static reloc_howto_type howto_table[] =
 	 0,				/* src_mask */
 	 0xffffffff,			/* dst_mask */
 	 false),			/* pcrel_offset */
+
+  /* The length of unsigned-leb128 is variable, just assume the
+     size is one byte here.  */
+  HOWTO (R_RISCV_SET_ULEB128,		/* type */
+	 0,				/* rightshift */
+	 0,				/* size */
+	 0,				/* bitsize */
+	 false,				/* pc_relative */
+	 0,				/* bitpos */
+	 complain_overflow_dont,	/* complain_on_overflow */
+	 riscv_elf_ignore_reloc,	/* special_function */
+	 "R_RISCV_SET_ULEB128",		/* name */
+	 false,				/* partial_inplace */
+	 0,				/* src_mask */
+	 0,				/* dst_mask */
+	 false),			/* pcrel_offset */
+  /* The length of unsigned-leb128 is variable, just assume the
+     size is one byte here.  */
+  HOWTO (R_RISCV_SUB_ULEB128,		/* type */
+	 0,				/* rightshift */
+	 0,				/* size */
+	 0,				/* bitsize */
+	 false,				/* pc_relative */
+	 0,				/* bitpos */
+	 complain_overflow_dont,	/* complain_on_overflow */
+	 riscv_elf_ignore_reloc,	/* special_function */
+	 "R_RISCV_SUB_ULEB128",		/* name */
+	 false,				/* partial_inplace */
+	 0,				/* src_mask */
+	 0,				/* dst_mask */
+	 false),			/* pcrel_offset */
 };
 
 /* A mapping from BFD reloc types to RISC-V ELF reloc types.  */
@@ -931,6 +964,8 @@ static const struct elf_reloc_map riscv_reloc_map[] =
   { BFD_RELOC_RISCV_SET16, R_RISCV_SET16 },
   { BFD_RELOC_RISCV_SET32, R_RISCV_SET32 },
   { BFD_RELOC_RISCV_32_PCREL, R_RISCV_32_PCREL },
+  { BFD_RELOC_RISCV_SET_ULEB128, R_RISCV_SET_ULEB128 },
+  { BFD_RELOC_RISCV_SUB_ULEB128, R_RISCV_SUB_ULEB128 },
 };
 
 /* Given a BFD reloc type, return a howto structure.  */
@@ -1032,6 +1067,21 @@ riscv_elf_add_sub_reloc (bfd *abfd,
   return bfd_reloc_ok;
 }
 
+/* Special handler for relocations which don't have to be relocated.
+   This function just simply return bfd_reloc_ok.  */
+
+static bfd_reloc_status_type
+riscv_elf_ignore_reloc (bfd *abfd ATTRIBUTE_UNUSED, arelent *reloc_entry,
+			asymbol *symbol ATTRIBUTE_UNUSED,
+			void *data ATTRIBUTE_UNUSED, asection *input_section,
+			bfd *output_bfd, char **error_message ATTRIBUTE_UNUSED)
+{
+  if (output_bfd != NULL)
+    reloc_entry->address += input_section->output_offset;
+
+  return bfd_reloc_ok;
+}
+
 /* Always add the IMPLICIT for the SUBSET.  */
 
 static bool
@@ -1052,6 +1102,19 @@ check_implicit_for_i (const char *implicit ATTRIBUTE_UNUSED,
 	      && subset->minor_version < 1));
 }
 
+/* Add the zve and zvl when the version of v is greater 1.0.  Add the
+   zvlsseg when the version of v is less than 1.0.  */
+
+static bool
+check_implicit_for_v (const char *implicit,
+		      riscv_subset_t *subset)
+{
+  if (strcmp (implicit, "zvlsseg") == 0)
+    return (subset->major_version == 0);
+  else
+    return (subset->major_version > 0);
+}
+
 /* Record all implicit information for the subsets.  */
 struct riscv_implicit_subset
 {
@@ -1074,8 +1137,18 @@ static struct riscv_implicit_subset riscv_implicit_subsets[] =
   {"g", "zifencei",	check_implicit_always},
   {"q", "d",		check_implicit_always},
   {"v", "d",		check_implicit_always},
-  {"v", "zve64d",	check_implicit_always},
-  {"v", "zvl128b",	check_implicit_always},
+  {"v", "zvlsseg",	check_implicit_for_v},
+  {"v", "zve64d",	check_implicit_for_v},
+  {"v", "zvl128b",	check_implicit_for_v},
+  {"zvamo", "a",	check_implicit_always},
+  {"xsfvqmaccqoq", "zve32x", check_implicit_always},
+  {"xsfvqmaccqoq", "zvl256b", check_implicit_always},
+  {"xsfvqmaccdod", "zve32x", check_implicit_always},
+  {"xsfvqmaccdod", "zvl128b", check_implicit_always},
+  {"xsfvfhbfmin", "zve32f", check_implicit_always},
+  {"xsfvfwmaccqqq", "zve32f", check_implicit_always},
+  {"xsfvfwmaccqqq", "zvl256b", check_implicit_always},
+  {"xsfvfnrclipxfqf", "zve32f", check_implicit_always},
   {"zve64d", "d",	check_implicit_always},
   {"zve64d", "zve64f",	check_implicit_always},
   {"zve64f", "zve32f",	check_implicit_always},
@@ -1100,6 +1173,9 @@ static struct riscv_implicit_subset riscv_implicit_subsets[] =
   {"zvl64b", "zvl32b",		check_implicit_always},
   {"d", "f",		check_implicit_always},
   {"f", "zicsr",	check_implicit_always},
+  {"zfh", "f",		check_implicit_always},
+  {"zfh", "zicsr",	check_implicit_always},
+  {"zfh", "zfhmin",	check_implicit_always},
   {"zqinx", "zdinx",	check_implicit_always},
   {"zdinx", "zfinx",	check_implicit_always},
   {"zk", "zkn",		check_implicit_always},
@@ -1180,6 +1256,8 @@ static struct riscv_supported_ext riscv_supported_std_z_ext[] =
   {"zifencei",		ISA_SPEC_CLASS_20191213,	2, 0,  0 },
   {"zifencei",		ISA_SPEC_CLASS_20190608,	2, 0,  0 },
   {"zihintpause",	ISA_SPEC_CLASS_DRAFT,		1, 0,  0 },
+  {"zfh",		ISA_SPEC_CLASS_DRAFT,		0, 1,  0 },
+  {"zfhmin",		ISA_SPEC_CLASS_DRAFT,		0, 1,  0 },
   {"zfinx",		ISA_SPEC_CLASS_DRAFT,		1, 0,  0 },
   {"zdinx",		ISA_SPEC_CLASS_DRAFT,		1, 0,  0 },
   {"zqinx",		ISA_SPEC_CLASS_DRAFT,		1, 0,  0 },
@@ -1218,17 +1296,22 @@ static struct riscv_supported_ext riscv_supported_std_z_ext[] =
   {"zvl16384b",		ISA_SPEC_CLASS_DRAFT,		1, 0,  0 },
   {"zvl32768b",		ISA_SPEC_CLASS_DRAFT,		1, 0,  0 },
   {"zvl65536b",		ISA_SPEC_CLASS_DRAFT,		1, 0,  0 },
+  {"zvfh",		ISA_SPEC_CLASS_DRAFT,		0, 1,  0 },
+  {"zvamo",		ISA_SPEC_CLASS_DRAFT,		0, 10, 0 },
+  {"zvlsseg",		ISA_SPEC_CLASS_DRAFT,		0, 10, 0 },
   {NULL, 0, 0, 0, 0}
 };
 
 static struct riscv_supported_ext riscv_supported_std_s_ext[] =
 {
   {"svinval",		ISA_SPEC_CLASS_DRAFT,		1, 0, 0 },
+  {"sscofpmf",		ISA_SPEC_CLASS_DRAFT,		0, 1, 0 },
   {NULL, 0, 0, 0, 0}
 };
 
 static struct riscv_supported_ext riscv_supported_std_h_ext[] =
 {
+  {"h",			ISA_SPEC_CLASS_DRAFT,		1, 0, 0 },
   {NULL, 0, 0, 0, 0}
 };
 
@@ -1237,6 +1320,17 @@ static struct riscv_supported_ext riscv_supported_std_zxm_ext[] =
   {NULL, 0, 0, 0, 0}
 };
 
+static struct riscv_supported_ext riscv_supported_nonstd_ext[] =
+{
+  {"xsfvqmaccqoq", ISA_SPEC_CLASS_DRAFT, 0, 1, 0},
+  {"xsfvqmaccdod", ISA_SPEC_CLASS_DRAFT, 0, 1, 0},
+  {"xsfvfhbfmin",  ISA_SPEC_CLASS_DRAFT, 0, 1, 0},
+  {"xsfvfwmaccqqq",ISA_SPEC_CLASS_DRAFT, 0, 1, 0},
+  {"xsfvfnrclipxfqf", ISA_SPEC_CLASS_DRAFT, 0, 1, 0},
+  {"xsfvcp", ISA_SPEC_CLASS_DRAFT, 0, 1, 0},
+  {NULL, 0, 0, 0, 0}
+};
+
 const struct riscv_supported_ext *riscv_all_supported_ext[] =
 {
   riscv_supported_std_ext,
@@ -1244,6 +1338,7 @@ const struct riscv_supported_ext *riscv_all_supported_ext[] =
   riscv_supported_std_s_ext,
   riscv_supported_std_h_ext,
   riscv_supported_std_zxm_ext,
+  riscv_supported_nonstd_ext,
   NULL
 };
 
@@ -1504,8 +1599,7 @@ riscv_get_default_ext_version (enum riscv_spec_class *default_isa_spec,
     case RV_ISA_CLASS_Z: table = riscv_supported_std_z_ext; break;
     case RV_ISA_CLASS_S: table = riscv_supported_std_s_ext; break;
     case RV_ISA_CLASS_H: table = riscv_supported_std_h_ext; break;
-    case RV_ISA_CLASS_X:
-      break;
+    case RV_ISA_CLASS_X: table = riscv_supported_nonstd_ext; break;
     default:
       table = riscv_supported_std_ext;
     }
@@ -1732,7 +1826,6 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,
 {
   int major_version;
   int minor_version;
-  const char *last_name;
   enum riscv_prefix_ext_class class;
 
   while (*p)
@@ -1809,28 +1902,6 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,
 	  return NULL;
 	}
 
-      /* Check that the extension isn't duplicate.  */
-      last_name = rps->subset_list->tail->name;
-      if (!strcasecmp (last_name, subset))
-	{
-	  rps->error_handler
-	    (_("%s: duplicate prefixed ISA extension `%s'"),
-	     arch, subset);
-	  free (subset);
-	  return NULL;
-	}
-
-      /* Check that the extension is in expected order.  */
-      if (riscv_compare_subsets (last_name, subset) > 0)
-	{
-	  rps->error_handler
-	    (_("%s: prefixed ISA extension `%s' is not in expected "
-	       "order.  It must come before `%s'"),
-	     arch, subset, last_name);
-	  free (subset);
-	  return NULL;
-	}
-
       riscv_parse_add_subset (rps, subset,
 			      major_version,
 			      minor_version, false);
@@ -1913,7 +1984,8 @@ riscv_parse_check_conflicts (riscv_parse_subset_t *rps)
 	  && strncmp (s->name, "zve", 3) == 0)
 	support_zve = true;
       if (!support_zvl
-	  && strncmp (s->name, "zvl", 3) == 0)
+	  && strncmp (s->name, "zvl", 3) == 0
+	  && strcmp (s->name, "zvlsseg") != 0)
 	support_zvl = true;
       if (support_zve && support_zvl)
 	break;
@@ -2358,6 +2430,16 @@ riscv_multi_subset_supports (riscv_parse_subset_t *rps,
     case INSN_CLASS_Q_OR_ZQINX:
       return (riscv_subset_supports (rps, "q")
 	      || riscv_subset_supports (rps, "zqinx"));
+    case INSN_CLASS_ZFH:
+      return riscv_subset_supports (rps, "zfh");
+    case INSN_CLASS_ZFHMIN:
+      return riscv_subset_supports (rps, "zfhmin");
+    case INSN_CLASS_D_AND_ZFHMIN:
+      return (riscv_subset_supports (rps, "d")
+	      && riscv_subset_supports (rps, "zfhmin") );
+    case INSN_CLASS_Q_AND_ZFHMIN:
+      return (riscv_subset_supports (rps, "q")
+	      && riscv_subset_supports (rps, "zfhmin"));
     case INSN_CLASS_ZBA:
       return riscv_subset_supports (rps, "zba");
     case INSN_CLASS_ZBB:
@@ -2400,8 +2482,29 @@ riscv_multi_subset_supports (riscv_parse_subset_t *rps,
 	      || riscv_subset_supports (rps, "zve64d")
 	      || riscv_subset_supports (rps, "zve64f")
 	      || riscv_subset_supports (rps, "zve32f"));
+    case INSN_CLASS_ZVLSSEG:
+      return (riscv_subset_supports (rps, "v")
+	      || riscv_subset_supports (rps, "zvlsseg")
+	      || riscv_subset_supports (rps, "zve64x")
+	      || riscv_subset_supports (rps, "zve32x"));
+    case INSN_CLASS_ZVAMO:
+      return riscv_subset_supports (rps, "zvamo");
     case INSN_CLASS_SVINVAL:
       return riscv_subset_supports (rps, "svinval");
+    case INSN_CLASS_H:
+      return riscv_subset_supports (rps, "h");
+    case INSN_CLASS_XSFVQMACCQOQ:
+      return riscv_subset_supports (rps, "xsfvqmaccqoq");
+    case INSN_CLASS_XSFVQMACCDOD:
+      return riscv_subset_supports (rps, "xsfvqmaccdod");
+    case INSN_CLASS_XSFVFHBFMIN:
+      return riscv_subset_supports (rps, "xsfvfhbfmin");
+    case INSN_CLASS_XSFVFWNACCQQQ:
+      return riscv_subset_supports (rps, "xsfvfwmaccqqq");
+    case INSN_CLASS_XSFVFNRCLIPXFQF:
+      return riscv_subset_supports (rps, "xsfvfnrclipxfqf");
+    case INSN_CLASS_XSFVCP:
+      return riscv_subset_supports (rps, "xsfvcp");
     default:
       rps->error_handler
         (_("internal: unreachable INSN_CLASS_*"));
diff --git a/bfd/libbfd.h b/bfd/libbfd.h
index 6e62e556962..35cc48883f4 100644
--- a/bfd/libbfd.h
+++ b/bfd/libbfd.h
@@ -2400,6 +2400,8 @@ static const char *const bfd_reloc_code_real_names[] = { "@@uninitialized@@",
   "BFD_RELOC_RISCV_SET16",
   "BFD_RELOC_RISCV_SET32",
   "BFD_RELOC_RISCV_32_PCREL",
+  "BFD_RELOC_RISCV_SET_ULEB128",
+  "BFD_RELOC_RISCV_SUB_ULEB128",
   "BFD_RELOC_RL78_NEG8",
   "BFD_RELOC_RL78_NEG16",
   "BFD_RELOC_RL78_NEG24",
diff --git a/bfd/reloc.c b/bfd/reloc.c
index 164060361a9..2db6830c7ed 100644
--- a/bfd/reloc.c
+++ b/bfd/reloc.c
@@ -5245,6 +5245,10 @@ ENUMX
   BFD_RELOC_RISCV_SET32
 ENUMX
   BFD_RELOC_RISCV_32_PCREL
+ENUMX
+  BFD_RELOC_RISCV_SET_ULEB128
+ENUMX
+  BFD_RELOC_RISCV_SUB_ULEB128
 ENUMDOC
   RISC-V relocations.
 
diff --git a/binutils/dwarf.c b/binutils/dwarf.c
index 15b3c81a138..b5c2548b756 100644
--- a/binutils/dwarf.c
+++ b/binutils/dwarf.c
@@ -243,7 +243,7 @@ static const char *
 dwarf_vmatoa_1 (const char *fmtch, dwarf_vma value, unsigned num_bytes)
 {
   /* As dwarf_vmatoa is used more then once in a printf call
-     for output, we are cycling through an fixed array of pointers
+     for output, we are cycling through a fixed array of pointers
      for return address.  */
   static int buf_pos = 0;
   static struct dwarf_vmatoa_buf
@@ -799,24 +799,70 @@ fetch_indexed_string (dwarf_vma idx, struct cu_tu_set *this_set,
   return ret;
 }
 
-static const char *
-fetch_indexed_value (dwarf_vma offset, dwarf_vma bytes)
+static dwarf_vma
+fetch_indexed_addr (dwarf_vma offset, uint32_t num_bytes)
 {
   struct dwarf_section *section = &debug_displays [debug_addr].section;
 
   if (section->start == NULL)
-    return (_("<no .debug_addr section>"));
+    {
+      warn (_("<no .debug_addr section>"));
+      return 0;
+    }
 
-  if (offset + bytes > section->size)
+  if (offset + num_bytes > section->size)
     {
       warn (_("Offset into section %s too big: 0x%s\n"),
 	    section->name, dwarf_vmatoa ("x", offset));
-      return "<offset too big>";
+      return 0;
     }
 
-  return dwarf_vmatoa ("x", byte_get (section->start + offset, bytes));
+  return byte_get (section->start + offset, num_bytes);
 }
 
+/* Fetch a value from a debug section that has been indexed by
+   something in another section (eg DW_FORM_loclistx).
+   Returns 0 if the value could not be found.  */
+
+static dwarf_vma
+fetch_indexed_value (dwarf_vma                        index,
+		     enum dwarf_section_display_enum  sec_enum)
+{
+  struct dwarf_section *section = &debug_displays [sec_enum].section;
+
+  if (section->start == NULL)
+    {
+      warn (_("Unable to locate %s section\n"), section->uncompressed_name);
+      return 0;
+    }
+
+  uint32_t pointer_size, bias;
+
+  if (byte_get (section->start, 4) == 0xffffffff)
+    {
+      pointer_size = 8;
+      bias = 20;
+    }
+  else
+    {
+      pointer_size = 4;
+      bias = 12;
+    }
+
+  dwarf_vma offset = index * pointer_size;
+
+  /* Offsets are biased by the size of the section header.  */
+  offset += bias;
+
+  if (offset + pointer_size > section->size)
+    {
+      warn (_("Offset into section %s too big: 0x%s\n"),
+	    section->name, dwarf_vmatoa ("x", offset));
+      return 0;
+    }
+
+  return byte_get (section->start + offset, pointer_size);
+}
 
 /* FIXME:  There are better and more efficient ways to handle
    these structures.  For now though, I just want something that
@@ -2002,6 +2048,8 @@ skip_attr_bytes (unsigned long form,
     case DW_FORM_strx:
     case DW_FORM_GNU_addr_index:
     case DW_FORM_addrx:
+    case DW_FORM_loclistx:
+    case DW_FORM_rnglistx:
       READ_ULEB (uvalue, data, end);
       break;
 
@@ -2413,9 +2461,6 @@ read_and_display_attr_value (unsigned long           attribute,
 
   switch (form)
     {
-    default:
-      break;
-
     case DW_FORM_ref_addr:
       if (dwarf_version == 2)
 	SAFE_BYTE_GET_AND_INC (uvalue, data, pointer_size, end);
@@ -2499,6 +2544,8 @@ read_and_display_attr_value (unsigned long           attribute,
     case DW_FORM_udata:
     case DW_FORM_GNU_addr_index:
     case DW_FORM_addrx:
+    case DW_FORM_loclistx:
+    case DW_FORM_rnglistx:
       READ_ULEB (uvalue, data, end);
       break;
 
@@ -2518,6 +2565,9 @@ read_and_display_attr_value (unsigned long           attribute,
     case DW_FORM_implicit_const:
       uvalue = implicit_const;
       break;
+
+    default:
+      break;
     }
 
   switch (form)
@@ -2713,6 +2763,8 @@ read_and_display_attr_value (unsigned long           attribute,
     case DW_FORM_addrx2:
     case DW_FORM_addrx3:
     case DW_FORM_addrx4:
+    case DW_FORM_loclistx:
+    case DW_FORM_rnglistx:
       if (!do_loc)
 	{
 	  dwarf_vma base;
@@ -2731,11 +2783,11 @@ read_and_display_attr_value (unsigned long           attribute,
 	    /* We have already displayed the form name.  */
 	    printf (_("%c(index: 0x%s): %s"), delimiter,
 		    dwarf_vmatoa ("x", uvalue),
-		    fetch_indexed_value (offset, pointer_size));
+		    dwarf_vmatoa ("x", fetch_indexed_addr (offset, pointer_size)));
 	  else
 	    printf (_("%c(addr_index: 0x%s): %s"), delimiter,
 		    dwarf_vmatoa ("x", uvalue),
-		    fetch_indexed_value (offset, pointer_size));
+		    dwarf_vmatoa ("x", fetch_indexed_addr (offset, pointer_size)));
 	}
       break;
 
@@ -2757,6 +2809,13 @@ read_and_display_attr_value (unsigned long           attribute,
     {
       switch (attribute)
 	{
+	case DW_AT_loclists_base:
+	  if (debug_info_p->loclists_base)
+	    warn (_("CU @ 0x%s has multiple loclists_base values"),
+		  dwarf_vmatoa ("x", debug_info_p->cu_offset));
+	  debug_info_p->loclists_base = uvalue;
+	  break;
+
 	case DW_AT_frame_base:
 	  have_frame_base = 1;
 	  /* Fall through.  */
@@ -2779,7 +2838,8 @@ read_and_display_attr_value (unsigned long           attribute,
 	case DW_AT_GNU_call_site_target_clobbered:
 	  if ((dwarf_version < 4
 	       && (form == DW_FORM_data4 || form == DW_FORM_data8))
-	      || form == DW_FORM_sec_offset)
+	      || form == DW_FORM_sec_offset
+	      || form == DW_FORM_loclistx)
 	    {
 	      /* Process location list.  */
 	      unsigned int lmax = debug_info_p->max_loc_offsets;
@@ -2799,11 +2859,17 @@ read_and_display_attr_value (unsigned long           attribute,
 			       lmax, sizeof (*debug_info_p->have_frame_base));
 		  debug_info_p->max_loc_offsets = lmax;
 		}
-	      if (this_set != NULL)
+
+	      if (form == DW_FORM_loclistx)
+		uvalue = fetch_indexed_value (uvalue, loclists);
+	      else if (this_set != NULL)
 		uvalue += this_set->section_offsets [DW_SECT_LOC];
+
 	      debug_info_p->have_frame_base [num] = have_frame_base;
 	      if (attribute != DW_AT_GNU_locviews)
 		{
+		  uvalue += debug_info_p->loclists_base;
+
 		  /* Corrupt DWARF info can produce more offsets than views.
 		     See PR 23062 for an example.  */
 		  if (debug_info_p->num_loc_offsets
@@ -2847,7 +2913,8 @@ read_and_display_attr_value (unsigned long           attribute,
 	case DW_AT_ranges:
 	  if ((dwarf_version < 4
 	       && (form == DW_FORM_data4 || form == DW_FORM_data8))
-	      || form == DW_FORM_sec_offset)
+	      || form == DW_FORM_sec_offset
+	      || form == DW_FORM_rnglistx)
 	    {
 	      /* Process range list.  */
 	      unsigned int lmax = debug_info_p->max_range_lists;
@@ -2861,6 +2928,10 @@ read_and_display_attr_value (unsigned long           attribute,
 			       lmax, sizeof (*debug_info_p->range_lists));
 		  debug_info_p->max_range_lists = lmax;
 		}
+
+	      if (form == DW_FORM_rnglistx)
+		uvalue = fetch_indexed_value (uvalue, rnglists);
+
 	      debug_info_p->range_lists [num] = uvalue;
 	      debug_info_p->num_range_lists++;
 	    }
@@ -3234,6 +3305,7 @@ read_and_display_attr_value (unsigned long           attribute,
       have_frame_base = 1;
       /* Fall through.  */
     case DW_AT_location:
+    case DW_AT_loclists_base:
     case DW_AT_string_length:
     case DW_AT_return_addr:
     case DW_AT_data_member_location:
@@ -3251,7 +3323,8 @@ read_and_display_attr_value (unsigned long           attribute,
     case DW_AT_GNU_call_site_target_clobbered:
       if ((dwarf_version < 4
 	   && (form == DW_FORM_data4 || form == DW_FORM_data8))
-	  || form == DW_FORM_sec_offset)
+	  || form == DW_FORM_sec_offset
+	  || form == DW_FORM_loclistx)
 	printf (_(" (location list)"));
       /* Fall through.  */
     case DW_AT_allocated:
@@ -3520,6 +3593,9 @@ process_debug_info (struct dwarf_section * section,
     }
 
   load_debug_section_with_follow (abbrev_sec, file);
+  load_debug_section_with_follow (loclists, file);
+  load_debug_section_with_follow (rnglists, file);
+
   if (debug_displays [abbrev_sec].section.start == NULL)
     {
       warn (_("Unable to locate %s section!\n"),
@@ -3732,6 +3808,7 @@ process_debug_info (struct dwarf_section * section,
 	  debug_information [unit].have_frame_base = NULL;
 	  debug_information [unit].max_loc_offsets = 0;
 	  debug_information [unit].num_loc_offsets = 0;
+	  debug_information [unit].loclists_base = 0;
 	  debug_information [unit].range_lists = NULL;
 	  debug_information [unit].max_range_lists= 0;
 	  debug_information [unit].num_range_lists = 0;
@@ -6468,20 +6545,21 @@ display_loc_list (struct dwarf_section *section,
 /* Display a location list from a normal (ie, non-dwo) .debug_loclists section.  */
 
 static void
-display_loclists_list (struct dwarf_section *section,
-		       unsigned char **start_ptr,
-		       unsigned int debug_info_entry,
-		       dwarf_vma offset,
-		       dwarf_vma base_address,
-		       unsigned char **vstart_ptr,
-		       int has_frame_base)
-{
-  unsigned char *start = *start_ptr, *vstart = *vstart_ptr;
-  unsigned char *section_end = section->start + section->size;
-  dwarf_vma    cu_offset;
-  unsigned int pointer_size;
-  unsigned int offset_size;
-  int dwarf_version;
+display_loclists_list (struct dwarf_section *  section,
+		       unsigned char **        start_ptr,
+		       unsigned int            debug_info_entry,
+		       dwarf_vma               offset,
+		       dwarf_vma               base_address,
+		       unsigned char **        vstart_ptr,
+		       int                     has_frame_base)
+{
+  unsigned char *  start = *start_ptr;
+  unsigned char *  vstart = *vstart_ptr;
+  unsigned char *  section_end = section->start + section->size;
+  dwarf_vma        cu_offset;
+  unsigned int     pointer_size;
+  unsigned int     offset_size;
+  unsigned int     dwarf_version;
 
   /* Initialize it due to a false compiler warning.  */
   dwarf_vma begin = -1, vbegin = -1;
@@ -6547,27 +6625,59 @@ display_loclists_list (struct dwarf_section *section,
 	case DW_LLE_end_of_list:
 	  printf (_("<End of list>\n"));
 	  break;
+
+	case DW_LLE_base_addressx:
+	  READ_ULEB (base_address, start, section_end);
+	  print_dwarf_vma (base_address, pointer_size);
+	  printf (_("(index into .debug_addr) "));
+	  base_address = fetch_indexed_addr (base_address, pointer_size);
+	  print_dwarf_vma (base_address, pointer_size);
+	  printf (_("(base address)\n"));
+	  break;
+
+	case DW_LLE_startx_endx:
+	  READ_ULEB (begin, start, section_end);
+	  begin = fetch_indexed_addr (begin, pointer_size);
+	  READ_ULEB (end, start, section_end);
+	  end = fetch_indexed_addr (end, pointer_size);
+	  break;
+
+	case DW_LLE_startx_length:
+	  READ_ULEB (begin, start, section_end);
+	  begin = fetch_indexed_addr (begin, pointer_size);
+	  READ_ULEB (end, start, section_end);
+	  end += begin;
+	  break;
+
+	case DW_LLE_default_location:
+	  begin = end = 0;
+	  break;
+
 	case DW_LLE_offset_pair:
 	  READ_ULEB (begin, start, section_end);
 	  begin += base_address;
 	  READ_ULEB (end, start, section_end);
 	  end += base_address;
 	  break;
+
+	case DW_LLE_base_address:
+	  SAFE_BYTE_GET_AND_INC (base_address, start, pointer_size,
+				 section_end);
+	  print_dwarf_vma (base_address, pointer_size);
+	  printf (_("(base address)\n"));
+	  break;
+
 	case DW_LLE_start_end:
 	  SAFE_BYTE_GET_AND_INC (begin, start, pointer_size, section_end);
 	  SAFE_BYTE_GET_AND_INC (end, start, pointer_size, section_end);
 	  break;
+
 	case DW_LLE_start_length:
 	  SAFE_BYTE_GET_AND_INC (begin, start, pointer_size, section_end);
 	  READ_ULEB (end, start, section_end);
 	  end += begin;
 	  break;
-	case DW_LLE_base_address:
-	  SAFE_BYTE_GET_AND_INC (base_address, start, pointer_size,
-				 section_end);
-	  print_dwarf_vma (base_address, pointer_size);
-	  printf (_("(base address)\n"));
-	  break;
+
 #ifdef DW_LLE_view_pair
 	case DW_LLE_view_pair:
 	  if (vstart)
@@ -6581,15 +6691,17 @@ display_loclists_list (struct dwarf_section *section,
 	  printf (_("views for:\n"));
 	  continue;
 #endif
+
 	default:
 	  error (_("Invalid location list entry type %d\n"), llet);
 	  return;
 	}
+
       if (llet == DW_LLE_end_of_list)
 	break;
-      if (llet != DW_LLE_offset_pair
-	  && llet != DW_LLE_start_end
-	  && llet != DW_LLE_start_length)
+
+      if (llet == DW_LLE_base_address
+	  || llet == DW_LLE_base_addressx)
 	continue;
 
       if (start == section_end)
@@ -6830,6 +6942,218 @@ loc_offsets_compar (const void *ap, const void *bp)
   return ret;
 }
 
+static int
+display_offset_entry_loclists (struct dwarf_section *section)
+{
+  unsigned char *  start = section->start;
+  unsigned char * const end = start + section->size;
+
+  introduce (section, false);
+
+  do
+    {
+      dwarf_vma        length;
+      unsigned short   version;
+      unsigned char    address_size;
+      unsigned char    segment_selector_size;
+      uint32_t         offset_entry_count;
+      uint32_t         i;
+      bool             is_64bit;
+
+      printf (_("Table at Offset 0x%lx\n"), (long)(start - section->start));
+
+      SAFE_BYTE_GET_AND_INC (length, start, 4, end);
+      if (length == 0xffffffff)
+	{
+	  is_64bit = true;
+	  SAFE_BYTE_GET_AND_INC (length, start, 8, end);
+	}
+      else
+	is_64bit = false;
+
+      SAFE_BYTE_GET_AND_INC (version, start, 2, end);
+      SAFE_BYTE_GET_AND_INC (address_size, start, 1, end);
+      SAFE_BYTE_GET_AND_INC (segment_selector_size, start, 1, end);
+      SAFE_BYTE_GET_AND_INC (offset_entry_count, start, 4, end);
+
+      printf (_("  Length:          0x%s\n"), dwarf_vmatoa ("x", length));
+      printf (_("  DWARF version:   %u\n"), version);
+      printf (_("  Address size:    %u\n"), address_size);
+      printf (_("  Segment size:    %u\n"), segment_selector_size);
+      printf (_("  Offset entries:  %u\n"), offset_entry_count);
+
+      if (version < 5)
+	{
+	  warn (_("The %s section contains a corrupt or "
+		  "unsupported version number: %d.\n"),
+		section->name, version);
+	  return 0;
+	}
+
+      if (segment_selector_size != 0)
+	{
+	  warn (_("The %s section contains an "
+		  "unsupported segment selector size: %d.\n"),
+		section->name, segment_selector_size);
+	  return 0;
+	}
+
+      if (offset_entry_count == 0)
+	{
+	  warn (_("The %s section contains a table without offset\n"),
+		section->name);
+	  return 0;
+	}
+
+      printf (_("\n   Offset Entries starting at 0x%lx:\n"),
+	      (long)(start - section->start));
+
+      if (is_64bit)
+	{
+	  for (i = 0; i < offset_entry_count; i++)
+	    {
+	      dwarf_vma entry;
+
+	      SAFE_BYTE_GET_AND_INC (entry, start, 8, end);
+	      printf (_("    [%6u] 0x%s\n"), i, dwarf_vmatoa ("x", entry));
+	    }
+	}
+      else
+	{
+	  for (i = 0; i < offset_entry_count; i++)
+	    {
+	      uint32_t entry;
+
+	      SAFE_BYTE_GET_AND_INC (entry, start, 4, end);
+	      printf (_("    [%6u] 0x%x\n"), i, entry);
+	    }
+	}
+
+      putchar ('\n');
+
+      uint32_t j;
+
+      for (j = 1, i = 0; i < offset_entry_count;)
+	{
+	  unsigned char  lle;
+	  dwarf_vma      base_address = 0;
+	  dwarf_vma      begin;
+	  dwarf_vma      finish;
+	  dwarf_vma      off = start - section->start;
+
+	  if (j != i)
+	    {
+	      printf (_("   Offset Entry %u\n"), i);
+	      j = i;
+	    }
+
+	  printf ("    ");
+	  print_dwarf_vma (off, 4);
+
+	  SAFE_BYTE_GET_AND_INC (lle, start, 1, end);
+
+	  switch (lle)
+	    {
+	    case DW_LLE_end_of_list:
+	      printf (_("<End of list>\n\n"));
+	      i ++;
+	      continue;
+
+	    case DW_LLE_base_addressx:
+	      READ_ULEB (base_address, start, end);
+	      print_dwarf_vma (base_address, address_size);
+	      printf (_("(index into .debug_addr) "));
+	      base_address = fetch_indexed_addr (base_address, address_size);
+	      print_dwarf_vma (base_address, address_size);
+	      printf (_("(base address)\n"));
+	      continue;
+
+	    case DW_LLE_startx_endx:
+	      READ_ULEB (begin, start, end);
+	      begin = fetch_indexed_addr (begin, address_size);
+	      READ_ULEB (finish, start, end);
+	      finish = fetch_indexed_addr (finish, address_size);
+	      break;
+
+	    case DW_LLE_startx_length:
+	      READ_ULEB (begin, start, end);
+	      begin = fetch_indexed_addr (begin, address_size);
+	      READ_ULEB (finish, start, end);
+	      finish += begin;
+	      break;
+
+	    case DW_LLE_offset_pair:
+	      READ_ULEB (begin, start, end);
+	      begin += base_address;
+	      READ_ULEB (finish, start, end);
+	      finish += base_address;
+	      break;
+
+	    case DW_LLE_default_location:
+	      begin = finish = 0;
+	      break;
+
+	    case DW_LLE_base_address:
+	      SAFE_BYTE_GET_AND_INC (base_address, start, address_size, end);
+	      print_dwarf_vma (base_address, address_size);
+	      printf (_("(base address)\n"));
+	      continue;
+
+	    case DW_LLE_start_end:
+	      SAFE_BYTE_GET_AND_INC (begin,  start, address_size, end);
+	      SAFE_BYTE_GET_AND_INC (finish, start, address_size, end);
+	      break;
+
+	    case DW_LLE_start_length:
+	      SAFE_BYTE_GET_AND_INC (begin, start, address_size, end);
+	      READ_ULEB (finish, start, end);
+	      finish += begin;
+	      break;
+
+	    default:
+	      error (_("Invalid location list entry type %d\n"), lle);
+	      return 0;
+	    }
+
+	  if (start == end)
+	    {
+	      warn (_("Location list starting at offset 0x%lx is not terminated.\n"),
+		    (unsigned long) off);
+	      break;
+	    }
+
+	  print_dwarf_vma (begin, address_size);
+	  print_dwarf_vma (finish, address_size);
+
+	  if (begin == finish)
+	    fputs (_(" (start == end)"), stdout);
+	  else if (begin > finish)
+	    fputs (_(" (start > end)"), stdout);
+
+	  /* Read the counted location descriptions.  */
+	  READ_ULEB (length, start, end);
+
+	  if (length > (size_t) (end - start))
+	    {
+	      warn (_("Location list starting at offset 0x%lx is not terminated.\n"),
+		    (unsigned long) off);
+	      break;
+	    }
+
+	  putchar (' ');
+	  (void) decode_location_expression (start, address_size, address_size,
+					     version, length, 0, section);
+	  start += length;
+	  putchar ('\n');
+	}
+
+      putchar ('\n');
+    }
+  while (start < end);
+
+  return 1;
+}
+
 static int
 display_debug_loc (struct dwarf_section *section, void *file)
 {
@@ -6896,13 +7220,9 @@ display_debug_loc (struct dwarf_section *section, void *file)
 	}
 
       SAFE_BYTE_GET_AND_INC (offset_entry_count, hdrptr, 4, end);
+
       if (offset_entry_count != 0)
-	{
-	  warn (_("The %s section contains "
-		  "unsupported offset entry count: %d.\n"),
-		section->name, offset_entry_count);
-	  return 0;
-	}
+	return display_offset_entry_loclists (section);
 
       expected_start = hdrptr - section_begin;
     }
@@ -6962,9 +7282,10 @@ display_debug_loc (struct dwarf_section *section, void *file)
   if (debug_information [first].num_loc_offsets > 0
       && debug_information [first].loc_offsets [0] != expected_start
       && debug_information [first].loc_views [0] != expected_start)
-    warn (_("Location lists in %s section start at 0x%s\n"),
+    warn (_("Location lists in %s section start at 0x%s rather than 0x%s\n"),
 	  section->name,
-	  dwarf_vmatoa ("x", debug_information [first].loc_offsets [0]));
+	  dwarf_vmatoa ("x", debug_information [first].loc_offsets [0]),
+	  dwarf_vmatoa ("x", expected_start));
 
   if (!locs_sorted)
     array = (unsigned int *) xcmalloc (num_loc_list, sizeof (unsigned int));
@@ -7642,24 +7963,44 @@ display_debug_rnglists_list (unsigned char * start,
 	case DW_RLE_end_of_list:
 	  printf (_("<End of list>\n"));
 	  break;
-	case DW_RLE_base_address:
-	  SAFE_BYTE_GET_AND_INC (base_address, start, pointer_size, finish);
+	case DW_RLE_base_addressx:
+	  READ_ULEB (base_address, start, finish);
+	  print_dwarf_vma (base_address, pointer_size);
+	  printf (_("(base address index) "));
+	  base_address = fetch_indexed_addr (base_address, pointer_size);
 	  print_dwarf_vma (base_address, pointer_size);
 	  printf (_("(base address)\n"));
 	  break;
-	case DW_RLE_start_length:
-	  SAFE_BYTE_GET_AND_INC (begin, start, pointer_size, finish);
+	case DW_RLE_startx_endx:
+	  READ_ULEB (begin, start, finish);
+	  READ_ULEB (end, start, finish);
+	  begin = fetch_indexed_addr (begin, pointer_size);
+	  end   = fetch_indexed_addr (begin, pointer_size);
+	  break;
+	case DW_RLE_startx_length:
+	  READ_ULEB (begin, start, finish);
 	  READ_ULEB (length, start, finish);
+	  begin = fetch_indexed_addr (begin, pointer_size);
 	  end = begin + length;
 	  break;
 	case DW_RLE_offset_pair:
 	  READ_ULEB (begin, start, finish);
 	  READ_ULEB (end, start, finish);
 	  break;
+	case DW_RLE_base_address:
+	  SAFE_BYTE_GET_AND_INC (base_address, start, pointer_size, finish);
+	  print_dwarf_vma (base_address, pointer_size);
+	  printf (_("(base address)\n"));
+	  break;
 	case DW_RLE_start_end:
 	  SAFE_BYTE_GET_AND_INC (begin, start, pointer_size, finish);
 	  SAFE_BYTE_GET_AND_INC (end, start, pointer_size, finish);
 	  break;
+	case DW_RLE_start_length:
+	  SAFE_BYTE_GET_AND_INC (begin, start, pointer_size, finish);
+	  READ_ULEB (length, start, finish);
+	  end = begin + length;
+	  break;
 	default:
 	  error (_("Invalid range list entry type %d\n"), rlet);
 	  rlet = DW_RLE_end_of_list;
@@ -7667,7 +8008,7 @@ display_debug_rnglists_list (unsigned char * start,
 	}
       if (rlet == DW_RLE_end_of_list)
 	break;
-      if (rlet == DW_RLE_base_address)
+      if (rlet == DW_RLE_base_address || rlet == DW_RLE_base_addressx)
 	continue;
 
       /* Only a DW_RLE_offset_pair needs the base address added.  */
@@ -7712,6 +8053,8 @@ display_debug_ranges (struct dwarf_section *section,
       return 0;
     }
 
+  introduce (section, false);
+
   if (is_rnglists)
     {
       dwarf_vma initial_length;
@@ -7748,19 +8091,19 @@ display_debug_ranges (struct dwarf_section *section,
 	    }
 	}
 
-      /* Get and check the version number.  */
+      /* Get the other fields in the header.  */
       SAFE_BYTE_GET_AND_INC (version, start, 2, finish);
-
-      if (version != 5)
-	{
-	  warn (_("Only DWARF version 5 debug_rnglists info "
-		  "is currently supported.\n"));
-	  return 0;
-	}
-
       SAFE_BYTE_GET_AND_INC (address_size, start, 1, finish);
-
       SAFE_BYTE_GET_AND_INC (segment_selector_size, start, 1, finish);
+      SAFE_BYTE_GET_AND_INC (offset_entry_count, start, 4, finish);
+
+      printf (_("  Length:          0x%s\n"), dwarf_vmatoa ("x", initial_length));
+      printf (_("  DWARF version:   %u\n"), version);
+      printf (_("  Address size:    %u\n"), address_size);
+      printf (_("  Segment size:    %u\n"), segment_selector_size);
+      printf (_("  Offset entries:  %u\n"), offset_entry_count);
+
+      /* Check the fields.  */
       if (segment_selector_size != 0)
 	{
 	  warn (_("The %s section contains "
@@ -7769,14 +8112,37 @@ display_debug_ranges (struct dwarf_section *section,
 	  return 0;
 	}
 
-      SAFE_BYTE_GET_AND_INC (offset_entry_count, start, 4, finish);
-      if (offset_entry_count != 0)
+      if (version < 5)
 	{
-	  warn (_("The %s section contains "
-		  "unsupported offset entry count: %u.\n"),
-		section->name, offset_entry_count);
+	  warn (_("Only DWARF version 5+ debug_rnglists info "
+		  "is currently supported.\n"));
 	  return 0;
 	}
+
+      if (offset_entry_count != 0)
+	{
+	  printf (_("\n   Offsets starting at 0x%lx:\n"), (long)(start - section->start));
+	  if (offset_size == 8)
+	    {
+	      for (i = 0; i < offset_entry_count; i++)
+		{
+		  dwarf_vma entry;
+
+		  SAFE_BYTE_GET_AND_INC (entry, start, 8, finish);
+		  printf (_("    [%6u] 0x%s\n"), i, dwarf_vmatoa ("x", entry));
+		}
+	    }
+	  else
+	    {
+	      for (i = 0; i < offset_entry_count; i++)
+		{
+		  uint32_t entry;
+
+		  SAFE_BYTE_GET_AND_INC (entry, start, 4, finish);
+		  printf (_("    [%6u] 0x%x\n"), i, entry);
+		}
+	    }
+	}
     }
 
   if (load_debug_info (file) == 0)
@@ -7837,8 +8203,7 @@ display_debug_ranges (struct dwarf_section *section,
     warn (_("Range lists in %s section start at 0x%lx\n"),
 	  section->name, (unsigned long) range_entries[0].ranges_offset);
 
-  introduce (section, false);
-
+  putchar ('\n');
   printf (_("    Offset   Begin    End\n"));
 
   for (i = 0; i < num_range_list; i++)
@@ -7898,8 +8263,12 @@ display_debug_ranges (struct dwarf_section *section,
       start = next;
       last_start = next;
 
-      (is_rnglists ? display_debug_rnglists_list : display_debug_ranges_list)
-	(start, finish, pointer_size, offset, base_address);
+      if (is_rnglists)
+	display_debug_rnglists_list
+	  (start, finish, pointer_size, offset, base_address);
+      else
+	display_debug_ranges_list
+	  (start, finish, pointer_size, offset, base_address);
     }
   putchar ('\n');
 
diff --git a/binutils/dwarf.h b/binutils/dwarf.h
index 4fc62abfa4c..ccce2461c81 100644
--- a/binutils/dwarf.h
+++ b/binutils/dwarf.h
@@ -181,9 +181,13 @@ typedef struct
   /* This is an array of offsets to the location view table.  */
   dwarf_vma *    loc_views;
   int *          have_frame_base;
+
+  /* Information for associating location lists with CUs.  */
   unsigned int   num_loc_offsets;
   unsigned int   max_loc_offsets;
   unsigned int   num_loc_views;
+  dwarf_vma      loclists_base;
+
   /* List of .debug_ranges offsets seen in this .debug_info.  */
   dwarf_vma *    range_lists;
   unsigned int   num_range_lists;
diff --git a/binutils/testsuite/binutils-all/dw5.W b/binutils/testsuite/binutils-all/dw5.W
index ebab8b7d3b0..bfcdac175ba 100644
--- a/binutils/testsuite/binutils-all/dw5.W
+++ b/binutils/testsuite/binutils-all/dw5.W
@@ -281,7 +281,7 @@ Contents of the .debug_loclists section:
     00000039 <End of list>
 
 Contents of the .debug_rnglists section:
-
+#...
     Offset   Begin    End
     0000000c 0000000000001234 0000000000001236 
     00000016 0000000000001234 0000000000001239 
diff --git a/binutils/testsuite/binutils-all/nm.exp b/binutils/testsuite/binutils-all/nm.exp
index 4560df16099..2f54337d3ab 100644
--- a/binutils/testsuite/binutils-all/nm.exp
+++ b/binutils/testsuite/binutils-all/nm.exp
@@ -256,8 +256,6 @@ if [is_elf_format] {
     # Test nm --line-numbers on DWARF-4 debug info.    
     set testname "nm --line-numbers on DWARF-4 debug info"
 
-    # The RISCV target does not (currently) support .uleb128.
-    setup_xfail "riscv*-*-*"
     # The SH targets complain that the pseudo-ops used to construct
     # the DWARF data are misaligned.
     setup_xfail "sh*-*-*"
diff --git a/binutils/testsuite/binutils-all/x86-64/pr26808.dump b/binutils/testsuite/binutils-all/x86-64/pr26808.dump
index f64f9d008f9..7ef73b24dc9 100644
--- a/binutils/testsuite/binutils-all/x86-64/pr26808.dump
+++ b/binutils/testsuite/binutils-all/x86-64/pr26808.dump
@@ -30,13 +30,13 @@ Contents of the .debug_info.dwo section:
     <a5>   DW_AT_decl_file   : 1
     <a6>   DW_AT_decl_line   : 30
     <a7>   DW_AT_type        : <0x90>
-    <ab>   DW_AT_low_pc      : (addr_index: 0x0): <no .debug_addr section>
+    <ab>   DW_AT_low_pc      : (addr_index: 0x0): 0
     <ac>   DW_AT_high_pc     : 0x304
     <b4>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <b6>   DW_AT_GNU_all_tail_call_sites: 1
     <b6>   DW_AT_sibling     : <0x11b>
  <2><ba>: Abbrev Number: 14 (DW_TAG_lexical_block)
-    <bb>   DW_AT_low_pc      : (addr_index: 0x1): <no .debug_addr section>
+    <bb>   DW_AT_low_pc      : (addr_index: 0x1): 0
     <bc>   DW_AT_high_pc     : 0x2fa
  <3><c4>: Abbrev Number: 15 (DW_TAG_variable)
     <c5>   DW_AT_name        : c1
@@ -56,7 +56,7 @@ Contents of the .debug_info.dwo section:
     <ff>   DW_AT_artificial  : 1
     <ff>   DW_AT_location    : 2 byte block: fb 2 	(DW_OP_GNU_addr_index <0x2>)
  <3><102>: Abbrev Number: 14 (DW_TAG_lexical_block)
-    <103>   DW_AT_low_pc      : (addr_index: 0x3): <no .debug_addr section>
+    <103>   DW_AT_low_pc      : (addr_index: 0x3): 0
     <104>   DW_AT_high_pc     : 0x2f
  <4><10c>: Abbrev Number: 17 (DW_TAG_variable)
     <10d>   DW_AT_name        : i
@@ -274,7 +274,7 @@ Contents of the .debug_info.dwo section:
     <2dd>   DW_AT_decl_file   : 1
     <2de>   DW_AT_decl_line   : 70
     <2df>   DW_AT_linkage_name: _Z4f13iv
-    <2e8>   DW_AT_low_pc      : (addr_index: 0x0): <no .debug_addr section>
+    <2e8>   DW_AT_low_pc      : (addr_index: 0x0): 0
     <2e9>   DW_AT_high_pc     : 0x6
     <2f1>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <2f3>   DW_AT_GNU_all_call_sites: 1
@@ -282,7 +282,7 @@ Contents of the .debug_info.dwo section:
     <2f4>   DW_AT_specification: <0x219>
     <2f8>   DW_AT_decl_file   : 2
     <2f9>   DW_AT_decl_line   : 30
-    <2fa>   DW_AT_low_pc      : (addr_index: 0x1): <no .debug_addr section>
+    <2fa>   DW_AT_low_pc      : (addr_index: 0x1): 0
     <2fb>   DW_AT_high_pc     : 0x20
     <303>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <305>   DW_AT_object_pointer: <0x30d>
@@ -300,7 +300,7 @@ Contents of the .debug_info.dwo section:
     <31d>   DW_AT_specification: <0x223>
     <321>   DW_AT_decl_file   : 2
     <322>   DW_AT_decl_line   : 38
-    <323>   DW_AT_low_pc      : (addr_index: 0x2): <no .debug_addr section>
+    <323>   DW_AT_low_pc      : (addr_index: 0x2): 0
     <324>   DW_AT_high_pc     : 0x18
     <32c>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <32e>   DW_AT_object_pointer: <0x336>
@@ -316,7 +316,7 @@ Contents of the .debug_info.dwo section:
     <341>   DW_AT_specification: <0x22d>
     <345>   DW_AT_decl_file   : 2
     <346>   DW_AT_decl_line   : 46
-    <347>   DW_AT_low_pc      : (addr_index: 0x3): <no .debug_addr section>
+    <347>   DW_AT_low_pc      : (addr_index: 0x3): 0
     <348>   DW_AT_high_pc     : 0x18
     <350>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <352>   DW_AT_object_pointer: <0x35a>
@@ -332,7 +332,7 @@ Contents of the .debug_info.dwo section:
     <365>   DW_AT_specification: <0x237>
     <369>   DW_AT_decl_file   : 2
     <36a>   DW_AT_decl_line   : 54
-    <36b>   DW_AT_low_pc      : (addr_index: 0x4): <no .debug_addr section>
+    <36b>   DW_AT_low_pc      : (addr_index: 0x4): 0
     <36c>   DW_AT_high_pc     : 0x16
     <374>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <376>   DW_AT_object_pointer: <0x37e>
@@ -348,7 +348,7 @@ Contents of the .debug_info.dwo section:
     <389>   DW_AT_specification: <0x26b>
     <38d>   DW_AT_decl_file   : 2
     <38e>   DW_AT_decl_line   : 62
-    <38f>   DW_AT_low_pc      : (addr_index: 0x5): <no .debug_addr section>
+    <38f>   DW_AT_low_pc      : (addr_index: 0x5): 0
     <390>   DW_AT_high_pc     : 0x16
     <398>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <39a>   DW_AT_object_pointer: <0x3a2>
@@ -366,7 +366,7 @@ Contents of the .debug_info.dwo section:
     <3b2>   DW_AT_specification: <0x275>
     <3b6>   DW_AT_decl_file   : 2
     <3b7>   DW_AT_decl_line   : 72
-    <3b8>   DW_AT_low_pc      : (addr_index: 0x6): <no .debug_addr section>
+    <3b8>   DW_AT_low_pc      : (addr_index: 0x6): 0
     <3b9>   DW_AT_high_pc     : 0x1b
     <3c1>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <3c3>   DW_AT_object_pointer: <0x3cb>
@@ -382,7 +382,7 @@ Contents of the .debug_info.dwo section:
     <3d6>   DW_AT_specification: <0x27f>
     <3da>   DW_AT_decl_file   : 2
     <3db>   DW_AT_decl_line   : 82
-    <3dc>   DW_AT_low_pc      : (addr_index: 0x7): <no .debug_addr section>
+    <3dc>   DW_AT_low_pc      : (addr_index: 0x7): 0
     <3dd>   DW_AT_high_pc     : 0x1b
     <3e5>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <3e7>   DW_AT_object_pointer: <0x3ef>
@@ -398,7 +398,7 @@ Contents of the .debug_info.dwo section:
     <3fa>   DW_AT_specification: <0x289>
     <3fe>   DW_AT_decl_file   : 2
     <3ff>   DW_AT_decl_line   : 92
-    <400>   DW_AT_low_pc      : (addr_index: 0x8): <no .debug_addr section>
+    <400>   DW_AT_low_pc      : (addr_index: 0x8): 0
     <401>   DW_AT_high_pc     : 0x19
     <409>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <40b>   DW_AT_object_pointer: <0x413>
@@ -414,7 +414,7 @@ Contents of the .debug_info.dwo section:
     <41e>   DW_AT_specification: <0x2ae>
     <422>   DW_AT_decl_file   : 2
     <423>   DW_AT_decl_line   : 102
-    <424>   DW_AT_low_pc      : (addr_index: 0x9): <no .debug_addr section>
+    <424>   DW_AT_low_pc      : (addr_index: 0x9): 0
     <425>   DW_AT_high_pc     : 0x19
     <42d>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <42f>   DW_AT_object_pointer: <0x437>
@@ -432,7 +432,7 @@ Contents of the .debug_info.dwo section:
     <447>   DW_AT_specification: <0x2b8>
     <44b>   DW_AT_decl_file   : 2
     <44c>   DW_AT_decl_line   : 112
-    <44d>   DW_AT_low_pc      : (addr_index: 0xa): <no .debug_addr section>
+    <44d>   DW_AT_low_pc      : (addr_index: 0xa): 0
     <44e>   DW_AT_high_pc     : 0x1f
     <456>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <458>   DW_AT_object_pointer: <0x460>
@@ -451,7 +451,7 @@ Contents of the .debug_info.dwo section:
     <471>   DW_AT_decl_line   : 120
     <472>   DW_AT_linkage_name: _Z4f11av
     <47b>   DW_AT_type        : <0x242>
-    <47f>   DW_AT_low_pc      : (addr_index: 0xb): <no .debug_addr section>
+    <47f>   DW_AT_low_pc      : (addr_index: 0xb): 0
     <480>   DW_AT_high_pc     : 0xb
     <488>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <48a>   DW_AT_GNU_all_call_sites: 1
@@ -459,7 +459,7 @@ Contents of the .debug_info.dwo section:
     <48b>   DW_AT_specification: <0x2c2>
     <48f>   DW_AT_decl_file   : 2
     <490>   DW_AT_decl_line   : 126
-    <491>   DW_AT_low_pc      : (addr_index: 0xc): <no .debug_addr section>
+    <491>   DW_AT_low_pc      : (addr_index: 0xc): 0
     <492>   DW_AT_high_pc     : 0x20
     <49a>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <49c>   DW_AT_object_pointer: <0x4a4>
@@ -478,7 +478,7 @@ Contents of the .debug_info.dwo section:
     <4b4>   DW_AT_decl_line   : 134
     <4b5>   DW_AT_linkage_name: _Z3t12v
     <4bd>   DW_AT_type        : <0x249>
-    <4c1>   DW_AT_low_pc      : (addr_index: 0xd): <no .debug_addr section>
+    <4c1>   DW_AT_low_pc      : (addr_index: 0xd): 0
     <4c2>   DW_AT_high_pc     : 0x19
     <4ca>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <4cc>   DW_AT_GNU_all_tail_call_sites: 1
@@ -489,7 +489,7 @@ Contents of the .debug_info.dwo section:
     <4d2>   DW_AT_decl_line   : 142
     <4d3>   DW_AT_linkage_name: _Z3t13v
     <4db>   DW_AT_type        : <0x249>
-    <4df>   DW_AT_low_pc      : (addr_index: 0xe): <no .debug_addr section>
+    <4df>   DW_AT_low_pc      : (addr_index: 0xe): 0
     <4e0>   DW_AT_high_pc     : 0x14
     <4e8>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <4ea>   DW_AT_GNU_all_tail_call_sites: 1
@@ -500,13 +500,13 @@ Contents of the .debug_info.dwo section:
     <4f0>   DW_AT_decl_line   : 150
     <4f1>   DW_AT_linkage_name: _Z3t14v
     <4f9>   DW_AT_type        : <0x249>
-    <4fd>   DW_AT_low_pc      : (addr_index: 0xf): <no .debug_addr section>
+    <4fd>   DW_AT_low_pc      : (addr_index: 0xf): 0
     <4fe>   DW_AT_high_pc     : 0x61
     <506>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <508>   DW_AT_GNU_all_tail_call_sites: 1
     <508>   DW_AT_sibling     : <0x532>
  <2><50c>: Abbrev Number: 24 (DW_TAG_lexical_block)
-    <50d>   DW_AT_low_pc      : (addr_index: 0x10): <no .debug_addr section>
+    <50d>   DW_AT_low_pc      : (addr_index: 0x10): 0
     <50e>   DW_AT_high_pc     : 0x57
  <3><516>: Abbrev Number: 25 (DW_TAG_variable)
     <517>   DW_AT_name        : s1
@@ -538,13 +538,13 @@ Contents of the .debug_info.dwo section:
     <54b>   DW_AT_decl_line   : 163
     <54c>   DW_AT_linkage_name: _Z3t15v
     <554>   DW_AT_type        : <0x249>
-    <558>   DW_AT_low_pc      : (addr_index: 0x11): <no .debug_addr section>
+    <558>   DW_AT_low_pc      : (addr_index: 0x11): 0
     <559>   DW_AT_high_pc     : 0x5d
     <561>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <563>   DW_AT_GNU_all_tail_call_sites: 1
     <563>   DW_AT_sibling     : <0x58d>
  <2><567>: Abbrev Number: 24 (DW_TAG_lexical_block)
-    <568>   DW_AT_low_pc      : (addr_index: 0x12): <no .debug_addr section>
+    <568>   DW_AT_low_pc      : (addr_index: 0x12): 0
     <569>   DW_AT_high_pc     : 0x53
  <3><571>: Abbrev Number: 25 (DW_TAG_variable)
     <572>   DW_AT_name        : s1
@@ -576,7 +576,7 @@ Contents of the .debug_info.dwo section:
     <5a9>   DW_AT_decl_line   : 176
     <5aa>   DW_AT_linkage_name: _Z3t16v
     <5b2>   DW_AT_type        : <0x249>
-    <5b6>   DW_AT_low_pc      : (addr_index: 0x13): <no .debug_addr section>
+    <5b6>   DW_AT_low_pc      : (addr_index: 0x13): 0
     <5b7>   DW_AT_high_pc     : 0x13
     <5bf>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <5c1>   DW_AT_GNU_all_tail_call_sites: 1
@@ -587,13 +587,13 @@ Contents of the .debug_info.dwo section:
     <5c7>   DW_AT_decl_line   : 184
     <5c8>   DW_AT_linkage_name: _Z3t17v
     <5d0>   DW_AT_type        : <0x249>
-    <5d4>   DW_AT_low_pc      : (addr_index: 0x14): <no .debug_addr section>
+    <5d4>   DW_AT_low_pc      : (addr_index: 0x14): 0
     <5d5>   DW_AT_high_pc     : 0x5f
     <5dd>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <5df>   DW_AT_GNU_all_call_sites: 1
     <5df>   DW_AT_sibling     : <0x612>
  <2><5e3>: Abbrev Number: 24 (DW_TAG_lexical_block)
-    <5e4>   DW_AT_low_pc      : (addr_index: 0x15): <no .debug_addr section>
+    <5e4>   DW_AT_low_pc      : (addr_index: 0x15): 0
     <5e5>   DW_AT_high_pc     : 0x59
  <3><5ed>: Abbrev Number: 25 (DW_TAG_variable)
     <5ee>   DW_AT_name        : c
@@ -602,7 +602,7 @@ Contents of the .debug_info.dwo section:
     <5f2>   DW_AT_type        : <0x53d>
     <5f6>   DW_AT_location    : 2 byte block: 91 6f 	(DW_OP_fbreg: -17)
  <3><5f9>: Abbrev Number: 24 (DW_TAG_lexical_block)
-    <5fa>   DW_AT_low_pc      : (addr_index: 0x16): <no .debug_addr section>
+    <5fa>   DW_AT_low_pc      : (addr_index: 0x16): 0
     <5fb>   DW_AT_high_pc     : 0x50
  <4><603>: Abbrev Number: 25 (DW_TAG_variable)
     <604>   DW_AT_name        : i
@@ -620,13 +620,13 @@ Contents of the .debug_info.dwo section:
     <618>   DW_AT_decl_line   : 199
     <619>   DW_AT_linkage_name: _Z3t18v
     <621>   DW_AT_type        : <0x249>
-    <625>   DW_AT_low_pc      : (addr_index: 0x17): <no .debug_addr section>
+    <625>   DW_AT_low_pc      : (addr_index: 0x17): 0
     <626>   DW_AT_high_pc     : 0x5f
     <62e>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <630>   DW_AT_GNU_all_tail_call_sites: 1
     <630>   DW_AT_sibling     : <0x67a>
  <2><634>: Abbrev Number: 24 (DW_TAG_lexical_block)
-    <635>   DW_AT_low_pc      : (addr_index: 0x18): <no .debug_addr section>
+    <635>   DW_AT_low_pc      : (addr_index: 0x18): 0
     <636>   DW_AT_high_pc     : 0x55
  <3><63e>: Abbrev Number: 25 (DW_TAG_variable)
     <63f>   DW_AT_name        : c
@@ -635,7 +635,7 @@ Contents of the .debug_info.dwo section:
     <643>   DW_AT_type        : <0x53d>
     <647>   DW_AT_location    : 2 byte block: 91 6f 	(DW_OP_fbreg: -17)
  <3><64a>: Abbrev Number: 24 (DW_TAG_lexical_block)
-    <64b>   DW_AT_low_pc      : (addr_index: 0x19): <no .debug_addr section>
+    <64b>   DW_AT_low_pc      : (addr_index: 0x19): 0
     <64c>   DW_AT_high_pc     : 0x4c
  <4><654>: Abbrev Number: 25 (DW_TAG_variable)
     <655>   DW_AT_name        : i
@@ -644,7 +644,7 @@ Contents of the .debug_info.dwo section:
     <659>   DW_AT_type        : <0x242>
     <65d>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
  <4><660>: Abbrev Number: 24 (DW_TAG_lexical_block)
-    <661>   DW_AT_low_pc      : (addr_index: 0x1a): <no .debug_addr section>
+    <661>   DW_AT_low_pc      : (addr_index: 0x1a): 0
     <662>   DW_AT_high_pc     : 0x34
  <5><66a>: Abbrev Number: 25 (DW_TAG_variable)
     <66b>   DW_AT_name        : s
@@ -786,7 +786,7 @@ Contents of the .debug_info.dwo section:
     <7d3>   DW_AT_decl_line   : 32
     <7d4>   DW_AT_linkage_name: _Z4t16av
     <7dd>   DW_AT_type        : <0x7c4>
-    <7e1>   DW_AT_low_pc      : (addr_index: 0x0): <no .debug_addr section>
+    <7e1>   DW_AT_low_pc      : (addr_index: 0x0): 0
     <7e2>   DW_AT_high_pc     : 0x13
     <7ea>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <7ec>   DW_AT_GNU_all_tail_call_sites: 1
@@ -878,14 +878,14 @@ Contents of the .debug_info.dwo section:
     <908>   DW_AT_decl_file   : 1
     <909>   DW_AT_decl_line   : 70
     <90a>   DW_AT_linkage_name: _Z4f13iv
-    <913>   DW_AT_low_pc      : (addr_index: 0x0): <no .debug_addr section>
+    <913>   DW_AT_low_pc      : (addr_index: 0x0): 0
     <914>   DW_AT_high_pc     : 0x6
     <91c>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <91e>   DW_AT_GNU_all_call_sites: 1
  <1><91e>: Abbrev Number: 17 (DW_TAG_subprogram)
     <91f>   DW_AT_specification: <0x8a8>
     <923>   DW_AT_decl_file   : 2
-    <924>   DW_AT_low_pc      : (addr_index: 0x1): <no .debug_addr section>
+    <924>   DW_AT_low_pc      : (addr_index: 0x1): 0
     <925>   DW_AT_high_pc     : 0xf
     <92d>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <92f>   DW_AT_object_pointer: <0x937>
@@ -903,7 +903,7 @@ Contents of the .debug_info.dwo section:
     <94b>   DW_AT_specification: <0x89b>
     <94f>   DW_AT_decl_file   : 2
     <950>   DW_AT_decl_line   : 36
-    <951>   DW_AT_low_pc      : (addr_index: 0x2): <no .debug_addr section>
+    <951>   DW_AT_low_pc      : (addr_index: 0x2): 0
     <952>   DW_AT_high_pc     : 0x20
     <95a>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <95c>   DW_AT_object_pointer: <0x964>
@@ -922,7 +922,7 @@ Contents of the .debug_info.dwo section:
     <978>   DW_AT_decl_line   : 72
     <979>   DW_AT_linkage_name: _Z3f10v
     <981>   DW_AT_type        : <0x8b7>
-    <985>   DW_AT_low_pc      : (addr_index: 0x3): <no .debug_addr section>
+    <985>   DW_AT_low_pc      : (addr_index: 0x3): 0
     <986>   DW_AT_high_pc     : 0xb
     <98e>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <990>   DW_AT_GNU_all_call_sites: 1
@@ -933,7 +933,7 @@ Contents of the .debug_info.dwo section:
     <997>   DW_AT_decl_line   : 80
     <998>   DW_AT_linkage_name: _Z4f11bPFivE
     <9a5>   DW_AT_type        : <0x8b7>
-    <9a9>   DW_AT_low_pc      : (addr_index: 0x4): <no .debug_addr section>
+    <9a9>   DW_AT_low_pc      : (addr_index: 0x4): 0
     <9aa>   DW_AT_high_pc     : 0x14
     <9b2>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <9b4>   DW_AT_GNU_all_tail_call_sites: 1
@@ -954,7 +954,7 @@ Contents of the .debug_info.dwo section:
     <9d3>   DW_AT_specification: <0x8e0>
     <9d7>   DW_AT_decl_file   : 2
     <9d8>   DW_AT_decl_line   : 88
-    <9d9>   DW_AT_low_pc      : (addr_index: 0x5): <no .debug_addr section>
+    <9d9>   DW_AT_low_pc      : (addr_index: 0x5): 0
     <9da>   DW_AT_high_pc     : 0xf
     <9e2>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <9e4>   DW_AT_object_pointer: <0x9ec>
@@ -976,7 +976,7 @@ Contents of the .debug_info.dwo section:
     <a06>   DW_AT_decl_line   : 96
     <a07>   DW_AT_linkage_name: _Z3f13v
     <a0f>   DW_AT_type        : <0xa1e>
-    <a13>   DW_AT_low_pc      : (addr_index: 0x6): <no .debug_addr section>
+    <a13>   DW_AT_low_pc      : (addr_index: 0x6): 0
     <a14>   DW_AT_high_pc     : 0xb
     <a1c>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <a1e>   DW_AT_GNU_all_call_sites: 1
@@ -990,7 +990,7 @@ Contents of the .debug_info.dwo section:
     <a2a>   DW_AT_decl_line   : 104
     <a2b>   DW_AT_linkage_name: _Z3f14v
     <a33>   DW_AT_type        : <0xa42>
-    <a37>   DW_AT_low_pc      : (addr_index: 0x7): <no .debug_addr section>
+    <a37>   DW_AT_low_pc      : (addr_index: 0x7): 0
     <a38>   DW_AT_high_pc     : 0xb
     <a40>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <a42>   DW_AT_GNU_all_call_sites: 1
@@ -1010,7 +1010,7 @@ Contents of the .debug_info.dwo section:
     <a5b>   DW_AT_decl_line   : 112
     <a5c>   DW_AT_linkage_name: _Z3f15v
     <a64>   DW_AT_type        : <0xa73>
-    <a68>   DW_AT_low_pc      : (addr_index: 0x8): <no .debug_addr section>
+    <a68>   DW_AT_low_pc      : (addr_index: 0x8): 0
     <a69>   DW_AT_high_pc     : 0xb
     <a71>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <a73>   DW_AT_GNU_all_call_sites: 1
@@ -1030,7 +1030,7 @@ Contents of the .debug_info.dwo section:
     <a8f>   DW_AT_decl_line   : 127
     <a90>   DW_AT_linkage_name: _Z3f18i
     <a98>   DW_AT_type        : <0xa42>
-    <a9c>   DW_AT_low_pc      : (addr_index: 0x9): <no .debug_addr section>
+    <a9c>   DW_AT_low_pc      : (addr_index: 0x9): 0
     <a9d>   DW_AT_high_pc     : 0x44
     <aa5>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
     <aa7>   DW_AT_GNU_all_call_sites: 1
diff --git a/gas/config/tc-riscv.c b/gas/config/tc-riscv.c
index bb5f6e4aedd..68b71e2b127 100644
--- a/gas/config/tc-riscv.c
+++ b/gas/config/tc-riscv.c
@@ -62,10 +62,17 @@ enum riscv_csr_class
 
   CSR_CLASS_I,
   CSR_CLASS_I_32,	/* rv32 only */
+  CSR_CLASS_H,		/* hypervisor CSR */
+  CSR_CLASS_H_32,	/* hypervisor CSR, rv32 only.  */
   CSR_CLASS_F,		/* f-ext only */
   CSR_CLASS_ZKR,	/* zkr only */
   CSR_CLASS_V,		/* rvv only */
-  CSR_CLASS_DEBUG	/* debug CSR */
+  CSR_CLASS_DEBUG,	/* debug CSR */
+  CSR_CLASS_CLIC,	/* clic CSR */
+  CSR_CLASS_RNMI,	/* rnmi CSR */
+  CSR_CLASS_WORLDGUARD, /* world guard CSR */
+  CSR_CLASS_SSCOFPMF,	/* sscofpmf CSR */
+  CSR_CLASS_SSCOFPMF_32,/* sscofpmf CSR, rv32 only. */
 };
 
 /* This structure holds all restricted conditions for a CSR.  */
@@ -389,7 +396,7 @@ const char EXP_CHARS[] = "eE";
 
 /* Chars that mean this number is a floating point constant.
    As in 0f12.456 or 0d1.2345e12.  */
-const char FLT_CHARS[] = "rRsSfFdDxXpP";
+const char FLT_CHARS[] = "rRsSfFdDxXpPhH";
 
 /* Indicate we are already assemble any instructions or not.  */
 static bool start_assemble = false;
@@ -912,13 +919,29 @@ riscv_csr_address (const char *csr_name,
     case CSR_CLASS_F:
       extension = "f";
       break;
+    case CSR_CLASS_H_32:
+      rv32_only = (xlen == 32);
+      /* Fall through.  */
+    case CSR_CLASS_H:
+      need_check_version = true;
+      extension = "h";
+      break;
     case CSR_CLASS_ZKR:
       extension = "zkr";
       break;
     case CSR_CLASS_V:
       extension = "v";
       break;
+    case CSR_CLASS_SSCOFPMF_32:
+      rv32_only = (xlen == 32);
+      /* Fall through.  */
+    case CSR_CLASS_SSCOFPMF:
+      extension = "sscofpmf";
+      break;
     case CSR_CLASS_DEBUG:
+    case CSR_CLASS_CLIC:
+    case CSR_CLASS_RNMI:
+    case CSR_CLASS_WORLDGUARD:
       break;
     default:
       as_bad (_("internal: bad RISC-V CSR class (0x%x)"), csr_class);
@@ -1206,6 +1229,24 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)
 		goto unknown_validate_operand;
 	    }
 	  break;
+	case 'X':
+	  switch (*++oparg)
+	    {
+	    case 'd': USE_BITS (OP_MASK_RD, OP_SH_RD); break;
+	    case 't': USE_BITS (OP_MASK_RS2, OP_SH_RS2); break;
+	    case 'O':
+	      switch (*++oparg)
+		{
+		case '2': USE_BITS (OP_MASK_XO2, OP_SH_XO2); break;
+		case '1': USE_BITS (OP_MASK_XO1, OP_SH_XO1); break;
+		default:
+		  goto unknown_validate_operand;
+		}
+	      break;
+	    default:
+	      goto unknown_validate_operand;
+	    }
+	  break;
 	default:
 	unknown_validate_operand:
 	  as_bad (_("internal: bad RISC-V opcode "
@@ -1908,6 +1949,15 @@ macro (struct riscv_cl_insn *ip, expressionS *imm_expr,
       vector_macro (ip);
       break;
 
+    case M_FLH:
+      pcrel_load (rd, rs1, imm_expr, "flh",
+		  BFD_RELOC_RISCV_PCREL_HI20, BFD_RELOC_RISCV_PCREL_LO12_I);
+      break;
+    case M_FSH:
+      pcrel_store (rs2, rs1, imm_expr, "fsh",
+		   BFD_RELOC_RISCV_PCREL_HI20, BFD_RELOC_RISCV_PCREL_LO12_S);
+      break;
+
     default:
       as_bad (_("internal: macro %s not implemented"), ip->insn_mo->name);
       break;
@@ -2207,6 +2257,27 @@ riscv_csr_read_only_check (insn_t insn)
   return true;
 }
 
+#define UIMM_BITFIELD_VAL(S, E) (1 << ((E) - (S) + 1))
+#define EncodeUimmBitField(NAME, IP, EXPR, RELOC, ASARG, PERCENT, \
+			   START, END) \
+  do \
+    { \
+      if (my_getOpcodeExpression (EXPR, RELOC, ASARG, PERCENT) \
+	  || EXPR->X_op != O_constant \
+	  || EXPR->X_add_number < 0 \
+	  || EXPR->X_add_number >= UIMM_BITFIELD_VAL (START, END)) \
+	{ \
+	  as_bad (_("bad value for <bit-%s-%s> " \
+		    "field, value must be 0...%d"), \
+		  #START, #END, UIMM_BITFIELD_VAL (START, END)); \
+	  break; \
+	} \
+      INSERT_OPERAND (NAME, *IP, EXPR->X_add_number); \
+      EXPR->X_op = O_absent; \
+      ASARG = expr_end; \
+    } \
+  while (0);
+
 /* Return true if it is a privileged instruction.  Otherwise, return false.
 
    uret is actually a N-ext instruction.  So it is better to regard it as
@@ -3209,6 +3280,34 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,
 	      asarg = expr_end;
 	      continue;
 
+	    case 'X': /* SiFive */
+	      switch (*++oparg)
+		{
+		case 'd': /* Xd */
+		  EncodeUimmBitField
+		    (RD, ip, imm_expr, imm_reloc, asarg, p, 7, 11);
+		  continue;
+		case 't': /* Xt */
+		  EncodeUimmBitField
+		    (RS2, ip, imm_expr, imm_reloc, asarg, p, 20, 24)
+		  continue;
+		case 'O':
+		  switch (*++oparg)
+		    {
+		    case '2': /* XO2 */
+		      EncodeUimmBitField
+			(XO2, ip, imm_expr, imm_reloc, asarg, p, 26, 27);
+		      continue;
+		    case '1': /* XO1 */
+		      EncodeUimmBitField
+			(XO1, ip, imm_expr, imm_reloc, asarg, p, 26, 26);
+		      continue;
+		    }
+		default:
+		  goto unknown_riscv_ip_operand;
+		}
+	      break;
+
 	    default:
 	    unknown_riscv_ip_operand:
 	      as_fatal (_("internal: unknown argument type `%s'"),
@@ -3312,9 +3411,58 @@ md_assemble (char *str)
     append_insn (&insn, &imm_expr, imm_reloc);
 }
 
+static const char *
+bfloat16_md_atof (char *litP, int *sizeP)
+{
+  char *t;
+  LITTLENUM_TYPE words[MAX_LITTLENUMS];
+  FLONUM_TYPE generic_float;
+
+  t = atof_ieee_detail (input_line_pointer, 1, 8, words, &generic_float);
+
+  if (t)
+    input_line_pointer = t;
+  else
+    return _("invalid floating point number");
+
+  switch (generic_float.sign)
+    {
+      /* Is +Inf.  */
+      case 'P':
+	words[0] = 0x7f80;
+	break;
+
+      /* Is -Inf.  */
+      case 'N':
+	words[0] = 0xff80;
+	break;
+
+      /* Is NaN.  */
+      /* bfloat16 has two types of NaN - quiet and signalling.
+         Quiet NaN has bit[6] == 1 && faction != 0, whereas
+         signalling Nan's have bit[0] == 0 && fraction != 0.
+         Chose this specific encoding as it is the same form
+         as used by other IEEE 754 encodings in GAS.  */
+      case 0:
+	words[0] = 0x7fff;
+	break;
+
+      default:
+	break;
+    }
+
+    *sizeP = 2;
+    md_number_to_chars (litP, (valueT) words[0], sizeof (LITTLENUM_TYPE));
+    return NULL;
+}
+
 const char *
 md_atof (int type, char *litP, int *sizeP)
 {
+  /* Parse bfloat16 specially since it does not follow the IEEE standard.  */
+  if (type == 'b')
+    return bfloat16_md_atof (litP, sizeP);
+
   return ieee_md_atof (type, litP, sizeP, TARGET_BYTES_BIG_ENDIAN);
 }
 
@@ -3529,6 +3677,9 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)
     case BFD_RELOC_RISCV_SUB32:
     case BFD_RELOC_RISCV_SUB64:
     case BFD_RELOC_RISCV_RELAX:
+    /* cvt_frag_to_fill () has called output_leb128 ().  */
+    case BFD_RELOC_RISCV_SET_ULEB128:
+    case BFD_RELOC_RISCV_SUB_ULEB128:
       break;
 
     case BFD_RELOC_RISCV_TPREL_HI20:
@@ -4281,8 +4432,11 @@ s_riscv_leb128 (int sign)
   char *save_in = input_line_pointer;
 
   expression (&exp);
-  if (exp.X_op != O_constant)
-    as_bad (_("non-constant .%cleb128 is not supported"), sign ? 's' : 'u');
+  if (sign && exp.X_op != O_constant)
+    as_bad (_("non-constant .sleb128 is not supported"));
+  else if (!sign && exp.X_op != O_constant && exp.X_op != O_subtract)
+    as_bad (_(".uleb128 only supports constant or subtract expressions."));
+
   demand_empty_rest_of_line ();
 
   input_line_pointer = save_in;
@@ -4403,11 +4557,55 @@ riscv_set_public_attributes (void)
     riscv_write_out_attrs ();
 }
 
+/* Scan uleb128 subtraction expressions and insert fixups for them.
+   e.g., .uleb128 .L1 - .L0
+   Because relaxation may change the value of the subtraction, we
+   must resolve them at link-time.  */
+
+static void
+riscv_insert_uleb128_fixes (bfd *abfd ATTRIBUTE_UNUSED,
+			    asection *sec, void *xxx ATTRIBUTE_UNUSED)
+{
+  segment_info_type *seginfo = seg_info (sec);
+  struct frag *fragP;
+
+  subseg_set (sec, 0);
+
+  for (fragP = seginfo->frchainP->frch_root;
+       fragP; fragP = fragP->fr_next)
+    {
+      expressionS *exp, *exp_dup;
+
+      if (fragP->fr_type != rs_leb128  || fragP->fr_symbol == NULL)
+	continue;
+
+      exp = symbol_get_value_expression (fragP->fr_symbol);
+
+      if (exp->X_op != O_subtract)
+	continue;
+
+      /* Only unsigned leb128 can be handled.  */
+      gas_assert (fragP->fr_subtype == 0);
+      exp_dup = xmemdup (exp, sizeof (*exp), sizeof (*exp));
+      exp_dup->X_op = O_symbol;
+      exp_dup->X_op_symbol = NULL;
+
+      /* Insert relocations to resolve the subtraction at link-time.  */
+      fix_new_exp (fragP, fragP->fr_fix, 0,
+		   exp_dup, 0, BFD_RELOC_RISCV_SET_ULEB128);
+      exp_dup->X_add_symbol = exp->X_op_symbol;
+      fix_new_exp (fragP, fragP->fr_fix, 0,
+		   exp_dup, 0, BFD_RELOC_RISCV_SUB_ULEB128);
+    }
+}
+
 /* Called after all assembly has been done.  */
 
 void
 riscv_md_end (void)
 {
+  if (riscv_opts.relax)
+    bfd_map_over_sections (stdoutput, riscv_insert_uleb128_fixes, NULL);
   riscv_set_public_attributes ();
 }
 
@@ -4570,6 +4768,8 @@ static const pseudo_typeS riscv_pseudo_table[] =
   {"insn", s_riscv_insn, 0},
   {"attribute", s_riscv_attribute, 0},
   {"variant_cc", s_variant_cc, 0},
+  {"float16", float_cons, 'h'},
+  {"bfloat16", float_cons, 'b'},
 
   { NULL, NULL, 0 },
 };
diff --git a/gas/testsuite/gas/riscv/attribute-prefixed-reorder.d b/gas/testsuite/gas/riscv/attribute-prefixed-reorder.d
new file mode 100644
index 00000000000..a0c6ed6cba4
--- /dev/null
+++ b/gas/testsuite/gas/riscv/attribute-prefixed-reorder.d
@@ -0,0 +1,7 @@
+#as: -misa-spec=20191213 -march-attr -march=rv64gcv_zbc_zfh_zba_zifencei_xbargle2p0_zbb_zicsr_xargle2p0
+#readelf: -A
+#source: empty.s
+
+Attribute Section: riscv
+File Attributes
+  Tag_RISCV_arch: "rv64i2p1_m2p0_a2p1_f2p2_d2p2_c2p0_v1p0_zicsr2p0_zifencei2p0_zfh0p1_zfhmin0p1_zba1p0_zbb1p0_zbc1p0_zve32f1p0_zve32x1p0_zve64d1p0_zve64f1p0_zve64x1p0_zvl128b1p0_zvl32b1p0_zvl64b1p0_xargle2p0_xbargle2p0"
diff --git a/gas/testsuite/gas/riscv/bfloat16.d b/gas/testsuite/gas/riscv/bfloat16.d
new file mode 100644
index 00000000000..291e62dd4d6
--- /dev/null
+++ b/gas/testsuite/gas/riscv/bfloat16.d
@@ -0,0 +1,10 @@
+# source: bfloat16.s
+# objdump: -sj .data
+# as:
+
+.*:[ 	]+file format .*
+
+Contents of section \.data:
+ 0000 4041fc3d 0000f742 0080f7c2 ff7f807f.*
+ 0010 80ff7f7f 7fff8000 80800100 01807f00.*
+ 0020 7f80803f 80bf0040 00c0c1ff 81ff.*
diff --git a/gas/testsuite/gas/riscv/bfloat16.s b/gas/testsuite/gas/riscv/bfloat16.s
new file mode 100644
index 00000000000..0829084cdce
--- /dev/null
+++ b/gas/testsuite/gas/riscv/bfloat16.s
@@ -0,0 +1,21 @@
+ .data
+	.bfloat16 12.0
+	.bfloat16 0.123
+	.bfloat16 +0.0
+	.bfloat16 123.4
+	.bfloat16 -0.0
+	.bfloat16 -123.4
+	.bfloat16 NaN
+	.bfloat16 Inf
+	.bfloat16 -Inf
+	.bfloat16 3.390e+38
+	.bfloat16 -3.390e+38
+	.bfloat16 1.175e-38
+	.bfloat16 -1.175e-38
+	.bfloat16 9.194e-41
+	.bfloat16 -9.194e-41
+	.bfloat16 1.167e-38
+	.bfloat16 -1.167e-38
+	.bfloat16 1.0, -1, 2.0, -2
+	.bfloat16 0b:ffc1	# qNaNh
+	.bfloat16 0b:ff81	# sNaNh
diff --git a/gas/testsuite/gas/riscv/csr-version-1p10.d b/gas/testsuite/gas/riscv/csr-version-1p10.d
index 6e0d1f6c66a..6fe68c54d12 100644
--- a/gas/testsuite/gas/riscv/csr-version-1p10.d
+++ b/gas/testsuite/gas/riscv/csr-version-1p10.d
@@ -1,4 +1,4 @@
-#as: -march=rv64i_zicsr -mcsr-check -mpriv-spec=1.10
+#as: -march=rv64ih_zicsr -mcsr-check -mpriv-spec=1.10
 #source: csr.s
 #warning_output: csr-version-1p10.l
 #objdump: -dr -Mpriv-spec=1.10
@@ -715,3 +715,84 @@ Disassembly of section .text:
 [ 	]+[0-9a-f]+:[ 	]+c2159073[ 	]+csrw[ 	]+vtype,a1
 [ 	]+[0-9a-f]+:[ 	]+c2202573[ 	]+csrr[ 	]+a0,vlenb
 [ 	]+[0-9a-f]+:[ 	]+c2259073[ 	]+csrw[ 	]+vlenb,a1
+[ 	]+[0-9a-f]+:[ 	]+30702573[ 	]+csrr[ 	]+a0,mtvt
+[ 	]+[0-9a-f]+:[ 	]+30759073[ 	]+csrw[ 	]+mtvt,a1
+[ 	]+[0-9a-f]+:[ 	]+34502573[ 	]+csrr[ 	]+a0,mnxti
+[ 	]+[0-9a-f]+:[ 	]+34559073[ 	]+csrw[ 	]+mnxti,a1
+[ 	]+[0-9a-f]+:[ 	]+34602573[ 	]+csrr[ 	]+a0,mintstatus
+[ 	]+[0-9a-f]+:[ 	]+34659073[ 	]+csrw[ 	]+mintstatus,a1
+[ 	]+[0-9a-f]+:[ 	]+34811173[ 	]+csrrw[ 	]+sp,mscratchcsw,sp
+[ 	]+[0-9a-f]+:[ 	]+35002573[ 	]+csrr[ 	]+a0,mnscratch
+[ 	]+[0-9a-f]+:[ 	]+35059073[ 	]+csrw[ 	]+mnscratch,a1
+[ 	]+[0-9a-f]+:[ 	]+35102573[ 	]+csrr[ 	]+a0,mnepc
+[ 	]+[0-9a-f]+:[ 	]+35159073[ 	]+csrw[ 	]+mnepc,a1
+[ 	]+[0-9a-f]+:[ 	]+35202573[ 	]+csrr[ 	]+a0,mncause
+[ 	]+[0-9a-f]+:[ 	]+35259073[ 	]+csrw[ 	]+mncause,a1
+[ 	]+[0-9a-f]+:[ 	]+35302573[ 	]+csrr[ 	]+a0,mnstatus
+[ 	]+[0-9a-f]+:[ 	]+35359073[ 	]+csrw[ 	]+mnstatus,a1
+[ 	]+[0-9a-f]+:[ 	]+7e002573[ 	]+csrr[ 	]+a0,mlwid
+[ 	]+[0-9a-f]+:[ 	]+7e059073[ 	]+csrw[ 	]+mlwid,a1
+[ 	]+[0-9a-f]+:[ 	]+9e002573[ 	]+csrr[ 	]+a0,slwid
+[ 	]+[0-9a-f]+:[ 	]+9e059073[ 	]+csrw[ 	]+slwid,a1
+[ 	]+[0-9a-f]+:[ 	]+7e102573[ 	]+csrr[ 	]+a0,mwiddeleg
+[ 	]+[0-9a-f]+:[ 	]+7e159073[ 	]+csrw[ 	]+mwiddeleg,a1
+[ 	]+[0-9a-f]+:[ 	]+da002573[ 	]+csrr[ 	]+a0,scountovf
+[ 	]+[0-9a-f]+:[ 	]+da059073[ 	]+csrw[ 	]+scountovf,a1
+[ 	]+[0-9a-f]+:[ 	]+72302573[ 	]+csrr[ 	]+a0,mhpmevent3h
+[ 	]+[0-9a-f]+:[ 	]+72359073[ 	]+csrw[ 	]+mhpmevent3h,a1
+[ 	]+[0-9a-f]+:[ 	]+72402573[ 	]+csrr[ 	]+a0,mhpmevent4h
+[ 	]+[0-9a-f]+:[ 	]+72459073[ 	]+csrw[ 	]+mhpmevent4h,a1
+[ 	]+[0-9a-f]+:[ 	]+72502573[ 	]+csrr[ 	]+a0,mhpmevent5h
+[ 	]+[0-9a-f]+:[ 	]+72559073[ 	]+csrw[ 	]+mhpmevent5h,a1
+[ 	]+[0-9a-f]+:[ 	]+72602573[ 	]+csrr[ 	]+a0,mhpmevent6h
+[ 	]+[0-9a-f]+:[ 	]+72659073[ 	]+csrw[ 	]+mhpmevent6h,a1
+[ 	]+[0-9a-f]+:[ 	]+72702573[ 	]+csrr[ 	]+a0,mhpmevent7h
+[ 	]+[0-9a-f]+:[ 	]+72759073[ 	]+csrw[ 	]+mhpmevent7h,a1
+[ 	]+[0-9a-f]+:[ 	]+72802573[ 	]+csrr[ 	]+a0,mhpmevent8h
+[ 	]+[0-9a-f]+:[ 	]+72859073[ 	]+csrw[ 	]+mhpmevent8h,a1
+[ 	]+[0-9a-f]+:[ 	]+72902573[ 	]+csrr[ 	]+a0,mhpmevent9h
+[ 	]+[0-9a-f]+:[ 	]+72959073[ 	]+csrw[ 	]+mhpmevent9h,a1
+[ 	]+[0-9a-f]+:[ 	]+72a02573[ 	]+csrr[ 	]+a0,mhpmevent10h
+[ 	]+[0-9a-f]+:[ 	]+72a59073[ 	]+csrw[ 	]+mhpmevent10h,a1
+[ 	]+[0-9a-f]+:[ 	]+72b02573[ 	]+csrr[ 	]+a0,mhpmevent11h
+[ 	]+[0-9a-f]+:[ 	]+72b59073[ 	]+csrw[ 	]+mhpmevent11h,a1
+[ 	]+[0-9a-f]+:[ 	]+72c02573[ 	]+csrr[ 	]+a0,mhpmevent12h
+[ 	]+[0-9a-f]+:[ 	]+72c59073[ 	]+csrw[ 	]+mhpmevent12h,a1
+[ 	]+[0-9a-f]+:[ 	]+72d02573[ 	]+csrr[ 	]+a0,mhpmevent13h
+[ 	]+[0-9a-f]+:[ 	]+72d59073[ 	]+csrw[ 	]+mhpmevent13h,a1
+[ 	]+[0-9a-f]+:[ 	]+72e02573[ 	]+csrr[ 	]+a0,mhpmevent14h
+[ 	]+[0-9a-f]+:[ 	]+72e59073[ 	]+csrw[ 	]+mhpmevent14h,a1
+[ 	]+[0-9a-f]+:[ 	]+72f02573[ 	]+csrr[ 	]+a0,mhpmevent15h
+[ 	]+[0-9a-f]+:[ 	]+72f59073[ 	]+csrw[ 	]+mhpmevent15h,a1
+[ 	]+[0-9a-f]+:[ 	]+73002573[ 	]+csrr[ 	]+a0,mhpmevent16h
+[ 	]+[0-9a-f]+:[ 	]+73059073[ 	]+csrw[ 	]+mhpmevent16h,a1
+[ 	]+[0-9a-f]+:[ 	]+73102573[ 	]+csrr[ 	]+a0,mhpmevent17h
+[ 	]+[0-9a-f]+:[ 	]+73159073[ 	]+csrw[ 	]+mhpmevent17h,a1
+[ 	]+[0-9a-f]+:[ 	]+73202573[ 	]+csrr[ 	]+a0,mhpmevent18h
+[ 	]+[0-9a-f]+:[ 	]+73259073[ 	]+csrw[ 	]+mhpmevent18h,a1
+[ 	]+[0-9a-f]+:[ 	]+73302573[ 	]+csrr[ 	]+a0,mhpmevent19h
+[ 	]+[0-9a-f]+:[ 	]+73359073[ 	]+csrw[ 	]+mhpmevent19h,a1
+[ 	]+[0-9a-f]+:[ 	]+73402573[ 	]+csrr[ 	]+a0,mhpmevent20h
+[ 	]+[0-9a-f]+:[ 	]+73459073[ 	]+csrw[ 	]+mhpmevent20h,a1
+[ 	]+[0-9a-f]+:[ 	]+73502573[ 	]+csrr[ 	]+a0,mhpmevent21h
+[ 	]+[0-9a-f]+:[ 	]+73559073[ 	]+csrw[ 	]+mhpmevent21h,a1
+[ 	]+[0-9a-f]+:[ 	]+73602573[ 	]+csrr[ 	]+a0,mhpmevent22h
+[ 	]+[0-9a-f]+:[ 	]+73659073[ 	]+csrw[ 	]+mhpmevent22h,a1
+[ 	]+[0-9a-f]+:[ 	]+73702573[ 	]+csrr[ 	]+a0,mhpmevent23h
+[ 	]+[0-9a-f]+:[ 	]+73759073[ 	]+csrw[ 	]+mhpmevent23h,a1
+[ 	]+[0-9a-f]+:[ 	]+73802573[ 	]+csrr[ 	]+a0,mhpmevent24h
+[ 	]+[0-9a-f]+:[ 	]+73859073[ 	]+csrw[ 	]+mhpmevent24h,a1
+[ 	]+[0-9a-f]+:[ 	]+73902573[ 	]+csrr[ 	]+a0,mhpmevent25h
+[ 	]+[0-9a-f]+:[ 	]+73959073[ 	]+csrw[ 	]+mhpmevent25h,a1
+[ 	]+[0-9a-f]+:[ 	]+73a02573[ 	]+csrr[ 	]+a0,mhpmevent26h
+[ 	]+[0-9a-f]+:[ 	]+73a59073[ 	]+csrw[ 	]+mhpmevent26h,a1
+[ 	]+[0-9a-f]+:[ 	]+73b02573[ 	]+csrr[ 	]+a0,mhpmevent27h
+[ 	]+[0-9a-f]+:[ 	]+73b59073[ 	]+csrw[ 	]+mhpmevent27h,a1
+[ 	]+[0-9a-f]+:[ 	]+73c02573[ 	]+csrr[ 	]+a0,mhpmevent28h
+[ 	]+[0-9a-f]+:[ 	]+73c59073[ 	]+csrw[ 	]+mhpmevent28h,a1
+[ 	]+[0-9a-f]+:[ 	]+73d02573[ 	]+csrr[ 	]+a0,mhpmevent29h
+[ 	]+[0-9a-f]+:[ 	]+73d59073[ 	]+csrw[ 	]+mhpmevent29h,a1
+[ 	]+[0-9a-f]+:[ 	]+73e02573[ 	]+csrr[ 	]+a0,mhpmevent30h
+[ 	]+[0-9a-f]+:[ 	]+73e59073[ 	]+csrw[ 	]+mhpmevent30h,a1
+[ 	]+[0-9a-f]+:[ 	]+73f02573[ 	]+csrr[ 	]+a0,mhpmevent31h
+[ 	]+[0-9a-f]+:[ 	]+73f59073[ 	]+csrw[ 	]+mhpmevent31h,a1
diff --git a/gas/testsuite/gas/riscv/csr-version-1p11.d b/gas/testsuite/gas/riscv/csr-version-1p11.d
index 0c9166555a4..92f3f8f3415 100644
--- a/gas/testsuite/gas/riscv/csr-version-1p11.d
+++ b/gas/testsuite/gas/riscv/csr-version-1p11.d
@@ -1,4 +1,4 @@
-#as: -march=rv64i_zicsr -mcsr-check -mpriv-spec=1.11
+#as: -march=rv64ih_zicsr -mcsr-check -mpriv-spec=1.11
 #source: csr.s
 #warning_output: csr-version-1p11.l
 #objdump: -dr -Mpriv-spec=1.11
@@ -715,3 +715,84 @@ Disassembly of section .text:
 [ 	]+[0-9a-f]+:[ 	]+c2159073[ 	]+csrw[ 	]+vtype,a1
 [ 	]+[0-9a-f]+:[ 	]+c2202573[ 	]+csrr[ 	]+a0,vlenb
 [ 	]+[0-9a-f]+:[ 	]+c2259073[ 	]+csrw[ 	]+vlenb,a1
+[ 	]+[0-9a-f]+:[ 	]+30702573[ 	]+csrr[ 	]+a0,mtvt
+[ 	]+[0-9a-f]+:[ 	]+30759073[ 	]+csrw[ 	]+mtvt,a1
+[ 	]+[0-9a-f]+:[ 	]+34502573[ 	]+csrr[ 	]+a0,mnxti
+[ 	]+[0-9a-f]+:[ 	]+34559073[ 	]+csrw[ 	]+mnxti,a1
+[ 	]+[0-9a-f]+:[ 	]+34602573[ 	]+csrr[ 	]+a0,mintstatus
+[ 	]+[0-9a-f]+:[ 	]+34659073[ 	]+csrw[ 	]+mintstatus,a1
+[ 	]+[0-9a-f]+:[ 	]+34811173[ 	]+csrrw[ 	]+sp,mscratchcsw,sp
+[ 	]+[0-9a-f]+:[ 	]+35002573[ 	]+csrr[ 	]+a0,mnscratch
+[ 	]+[0-9a-f]+:[ 	]+35059073[ 	]+csrw[ 	]+mnscratch,a1
+[ 	]+[0-9a-f]+:[ 	]+35102573[ 	]+csrr[ 	]+a0,mnepc
+[ 	]+[0-9a-f]+:[ 	]+35159073[ 	]+csrw[ 	]+mnepc,a1
+[ 	]+[0-9a-f]+:[ 	]+35202573[ 	]+csrr[ 	]+a0,mncause
+[ 	]+[0-9a-f]+:[ 	]+35259073[ 	]+csrw[ 	]+mncause,a1
+[ 	]+[0-9a-f]+:[ 	]+35302573[ 	]+csrr[ 	]+a0,mnstatus
+[ 	]+[0-9a-f]+:[ 	]+35359073[ 	]+csrw[ 	]+mnstatus,a1
+[ 	]+[0-9a-f]+:[ 	]+7e002573[ 	]+csrr[ 	]+a0,mlwid
+[ 	]+[0-9a-f]+:[ 	]+7e059073[ 	]+csrw[ 	]+mlwid,a1
+[ 	]+[0-9a-f]+:[ 	]+9e002573[ 	]+csrr[ 	]+a0,slwid
+[ 	]+[0-9a-f]+:[ 	]+9e059073[ 	]+csrw[ 	]+slwid,a1
+[ 	]+[0-9a-f]+:[ 	]+7e102573[ 	]+csrr[ 	]+a0,mwiddeleg
+[ 	]+[0-9a-f]+:[ 	]+7e159073[ 	]+csrw[ 	]+mwiddeleg,a1
+[ 	]+[0-9a-f]+:[ 	]+da002573[ 	]+csrr[ 	]+a0,scountovf
+[ 	]+[0-9a-f]+:[ 	]+da059073[ 	]+csrw[ 	]+scountovf,a1
+[ 	]+[0-9a-f]+:[ 	]+72302573[ 	]+csrr[ 	]+a0,mhpmevent3h
+[ 	]+[0-9a-f]+:[ 	]+72359073[ 	]+csrw[ 	]+mhpmevent3h,a1
+[ 	]+[0-9a-f]+:[ 	]+72402573[ 	]+csrr[ 	]+a0,mhpmevent4h
+[ 	]+[0-9a-f]+:[ 	]+72459073[ 	]+csrw[ 	]+mhpmevent4h,a1
+[ 	]+[0-9a-f]+:[ 	]+72502573[ 	]+csrr[ 	]+a0,mhpmevent5h
+[ 	]+[0-9a-f]+:[ 	]+72559073[ 	]+csrw[ 	]+mhpmevent5h,a1
+[ 	]+[0-9a-f]+:[ 	]+72602573[ 	]+csrr[ 	]+a0,mhpmevent6h
+[ 	]+[0-9a-f]+:[ 	]+72659073[ 	]+csrw[ 	]+mhpmevent6h,a1
+[ 	]+[0-9a-f]+:[ 	]+72702573[ 	]+csrr[ 	]+a0,mhpmevent7h
+[ 	]+[0-9a-f]+:[ 	]+72759073[ 	]+csrw[ 	]+mhpmevent7h,a1
+[ 	]+[0-9a-f]+:[ 	]+72802573[ 	]+csrr[ 	]+a0,mhpmevent8h
+[ 	]+[0-9a-f]+:[ 	]+72859073[ 	]+csrw[ 	]+mhpmevent8h,a1
+[ 	]+[0-9a-f]+:[ 	]+72902573[ 	]+csrr[ 	]+a0,mhpmevent9h
+[ 	]+[0-9a-f]+:[ 	]+72959073[ 	]+csrw[ 	]+mhpmevent9h,a1
+[ 	]+[0-9a-f]+:[ 	]+72a02573[ 	]+csrr[ 	]+a0,mhpmevent10h
+[ 	]+[0-9a-f]+:[ 	]+72a59073[ 	]+csrw[ 	]+mhpmevent10h,a1
+[ 	]+[0-9a-f]+:[ 	]+72b02573[ 	]+csrr[ 	]+a0,mhpmevent11h
+[ 	]+[0-9a-f]+:[ 	]+72b59073[ 	]+csrw[ 	]+mhpmevent11h,a1
+[ 	]+[0-9a-f]+:[ 	]+72c02573[ 	]+csrr[ 	]+a0,mhpmevent12h
+[ 	]+[0-9a-f]+:[ 	]+72c59073[ 	]+csrw[ 	]+mhpmevent12h,a1
+[ 	]+[0-9a-f]+:[ 	]+72d02573[ 	]+csrr[ 	]+a0,mhpmevent13h
+[ 	]+[0-9a-f]+:[ 	]+72d59073[ 	]+csrw[ 	]+mhpmevent13h,a1
+[ 	]+[0-9a-f]+:[ 	]+72e02573[ 	]+csrr[ 	]+a0,mhpmevent14h
+[ 	]+[0-9a-f]+:[ 	]+72e59073[ 	]+csrw[ 	]+mhpmevent14h,a1
+[ 	]+[0-9a-f]+:[ 	]+72f02573[ 	]+csrr[ 	]+a0,mhpmevent15h
+[ 	]+[0-9a-f]+:[ 	]+72f59073[ 	]+csrw[ 	]+mhpmevent15h,a1
+[ 	]+[0-9a-f]+:[ 	]+73002573[ 	]+csrr[ 	]+a0,mhpmevent16h
+[ 	]+[0-9a-f]+:[ 	]+73059073[ 	]+csrw[ 	]+mhpmevent16h,a1
+[ 	]+[0-9a-f]+:[ 	]+73102573[ 	]+csrr[ 	]+a0,mhpmevent17h
+[ 	]+[0-9a-f]+:[ 	]+73159073[ 	]+csrw[ 	]+mhpmevent17h,a1
+[ 	]+[0-9a-f]+:[ 	]+73202573[ 	]+csrr[ 	]+a0,mhpmevent18h
+[ 	]+[0-9a-f]+:[ 	]+73259073[ 	]+csrw[ 	]+mhpmevent18h,a1
+[ 	]+[0-9a-f]+:[ 	]+73302573[ 	]+csrr[ 	]+a0,mhpmevent19h
+[ 	]+[0-9a-f]+:[ 	]+73359073[ 	]+csrw[ 	]+mhpmevent19h,a1
+[ 	]+[0-9a-f]+:[ 	]+73402573[ 	]+csrr[ 	]+a0,mhpmevent20h
+[ 	]+[0-9a-f]+:[ 	]+73459073[ 	]+csrw[ 	]+mhpmevent20h,a1
+[ 	]+[0-9a-f]+:[ 	]+73502573[ 	]+csrr[ 	]+a0,mhpmevent21h
+[ 	]+[0-9a-f]+:[ 	]+73559073[ 	]+csrw[ 	]+mhpmevent21h,a1
+[ 	]+[0-9a-f]+:[ 	]+73602573[ 	]+csrr[ 	]+a0,mhpmevent22h
+[ 	]+[0-9a-f]+:[ 	]+73659073[ 	]+csrw[ 	]+mhpmevent22h,a1
+[ 	]+[0-9a-f]+:[ 	]+73702573[ 	]+csrr[ 	]+a0,mhpmevent23h
+[ 	]+[0-9a-f]+:[ 	]+73759073[ 	]+csrw[ 	]+mhpmevent23h,a1
+[ 	]+[0-9a-f]+:[ 	]+73802573[ 	]+csrr[ 	]+a0,mhpmevent24h
+[ 	]+[0-9a-f]+:[ 	]+73859073[ 	]+csrw[ 	]+mhpmevent24h,a1
+[ 	]+[0-9a-f]+:[ 	]+73902573[ 	]+csrr[ 	]+a0,mhpmevent25h
+[ 	]+[0-9a-f]+:[ 	]+73959073[ 	]+csrw[ 	]+mhpmevent25h,a1
+[ 	]+[0-9a-f]+:[ 	]+73a02573[ 	]+csrr[ 	]+a0,mhpmevent26h
+[ 	]+[0-9a-f]+:[ 	]+73a59073[ 	]+csrw[ 	]+mhpmevent26h,a1
+[ 	]+[0-9a-f]+:[ 	]+73b02573[ 	]+csrr[ 	]+a0,mhpmevent27h
+[ 	]+[0-9a-f]+:[ 	]+73b59073[ 	]+csrw[ 	]+mhpmevent27h,a1
+[ 	]+[0-9a-f]+:[ 	]+73c02573[ 	]+csrr[ 	]+a0,mhpmevent28h
+[ 	]+[0-9a-f]+:[ 	]+73c59073[ 	]+csrw[ 	]+mhpmevent28h,a1
+[ 	]+[0-9a-f]+:[ 	]+73d02573[ 	]+csrr[ 	]+a0,mhpmevent29h
+[ 	]+[0-9a-f]+:[ 	]+73d59073[ 	]+csrw[ 	]+mhpmevent29h,a1
+[ 	]+[0-9a-f]+:[ 	]+73e02573[ 	]+csrr[ 	]+a0,mhpmevent30h
+[ 	]+[0-9a-f]+:[ 	]+73e59073[ 	]+csrw[ 	]+mhpmevent30h,a1
+[ 	]+[0-9a-f]+:[ 	]+73f02573[ 	]+csrr[ 	]+a0,mhpmevent31h
+[ 	]+[0-9a-f]+:[ 	]+73f59073[ 	]+csrw[ 	]+mhpmevent31h,a1
diff --git a/gas/testsuite/gas/riscv/csr-version-1p12.d b/gas/testsuite/gas/riscv/csr-version-1p12.d
index 3c27ca2de20..a973c570b5d 100644
--- a/gas/testsuite/gas/riscv/csr-version-1p12.d
+++ b/gas/testsuite/gas/riscv/csr-version-1p12.d
@@ -1,4 +1,4 @@
-#as: -march=rv64i_zicsr -mcsr-check -mpriv-spec=1.12
+#as: -march=rv64ih_zicsr -mcsr-check -mpriv-spec=1.12
 #source: csr.s
 #warning_output: csr-version-1p12.l
 #objdump: -dr -Mpriv-spec=1.12
@@ -715,3 +715,84 @@ Disassembly of section .text:
 [ 	]+[0-9a-f]+:[ 	]+c2159073[ 	]+csrw[ 	]+vtype,a1
 [ 	]+[0-9a-f]+:[ 	]+c2202573[ 	]+csrr[ 	]+a0,vlenb
 [ 	]+[0-9a-f]+:[ 	]+c2259073[ 	]+csrw[ 	]+vlenb,a1
+[ 	]+[0-9a-f]+:[ 	]+30702573[ 	]+csrr[ 	]+a0,mtvt
+[ 	]+[0-9a-f]+:[ 	]+30759073[ 	]+csrw[ 	]+mtvt,a1
+[ 	]+[0-9a-f]+:[ 	]+34502573[ 	]+csrr[ 	]+a0,mnxti
+[ 	]+[0-9a-f]+:[ 	]+34559073[ 	]+csrw[ 	]+mnxti,a1
+[ 	]+[0-9a-f]+:[ 	]+34602573[ 	]+csrr[ 	]+a0,mintstatus
+[ 	]+[0-9a-f]+:[ 	]+34659073[ 	]+csrw[ 	]+mintstatus,a1
+[ 	]+[0-9a-f]+:[ 	]+34811173[ 	]+csrrw[ 	]+sp,mscratchcsw,sp
+[ 	]+[0-9a-f]+:[ 	]+35002573[ 	]+csrr[ 	]+a0,mnscratch
+[ 	]+[0-9a-f]+:[ 	]+35059073[ 	]+csrw[ 	]+mnscratch,a1
+[ 	]+[0-9a-f]+:[ 	]+35102573[ 	]+csrr[ 	]+a0,mnepc
+[ 	]+[0-9a-f]+:[ 	]+35159073[ 	]+csrw[ 	]+mnepc,a1
+[ 	]+[0-9a-f]+:[ 	]+35202573[ 	]+csrr[ 	]+a0,mncause
+[ 	]+[0-9a-f]+:[ 	]+35259073[ 	]+csrw[ 	]+mncause,a1
+[ 	]+[0-9a-f]+:[ 	]+35302573[ 	]+csrr[ 	]+a0,mnstatus
+[ 	]+[0-9a-f]+:[ 	]+35359073[ 	]+csrw[ 	]+mnstatus,a1
+[ 	]+[0-9a-f]+:[ 	]+7e002573[ 	]+csrr[ 	]+a0,mlwid
+[ 	]+[0-9a-f]+:[ 	]+7e059073[ 	]+csrw[ 	]+mlwid,a1
+[ 	]+[0-9a-f]+:[ 	]+9e002573[ 	]+csrr[ 	]+a0,slwid
+[ 	]+[0-9a-f]+:[ 	]+9e059073[ 	]+csrw[ 	]+slwid,a1
+[ 	]+[0-9a-f]+:[ 	]+7e102573[ 	]+csrr[ 	]+a0,mwiddeleg
+[ 	]+[0-9a-f]+:[ 	]+7e159073[ 	]+csrw[ 	]+mwiddeleg,a1
+[ 	]+[0-9a-f]+:[ 	]+da002573[ 	]+csrr[ 	]+a0,scountovf
+[ 	]+[0-9a-f]+:[ 	]+da059073[ 	]+csrw[ 	]+scountovf,a1
+[ 	]+[0-9a-f]+:[ 	]+72302573[ 	]+csrr[ 	]+a0,mhpmevent3h
+[ 	]+[0-9a-f]+:[ 	]+72359073[ 	]+csrw[ 	]+mhpmevent3h,a1
+[ 	]+[0-9a-f]+:[ 	]+72402573[ 	]+csrr[ 	]+a0,mhpmevent4h
+[ 	]+[0-9a-f]+:[ 	]+72459073[ 	]+csrw[ 	]+mhpmevent4h,a1
+[ 	]+[0-9a-f]+:[ 	]+72502573[ 	]+csrr[ 	]+a0,mhpmevent5h
+[ 	]+[0-9a-f]+:[ 	]+72559073[ 	]+csrw[ 	]+mhpmevent5h,a1
+[ 	]+[0-9a-f]+:[ 	]+72602573[ 	]+csrr[ 	]+a0,mhpmevent6h
+[ 	]+[0-9a-f]+:[ 	]+72659073[ 	]+csrw[ 	]+mhpmevent6h,a1
+[ 	]+[0-9a-f]+:[ 	]+72702573[ 	]+csrr[ 	]+a0,mhpmevent7h
+[ 	]+[0-9a-f]+:[ 	]+72759073[ 	]+csrw[ 	]+mhpmevent7h,a1
+[ 	]+[0-9a-f]+:[ 	]+72802573[ 	]+csrr[ 	]+a0,mhpmevent8h
+[ 	]+[0-9a-f]+:[ 	]+72859073[ 	]+csrw[ 	]+mhpmevent8h,a1
+[ 	]+[0-9a-f]+:[ 	]+72902573[ 	]+csrr[ 	]+a0,mhpmevent9h
+[ 	]+[0-9a-f]+:[ 	]+72959073[ 	]+csrw[ 	]+mhpmevent9h,a1
+[ 	]+[0-9a-f]+:[ 	]+72a02573[ 	]+csrr[ 	]+a0,mhpmevent10h
+[ 	]+[0-9a-f]+:[ 	]+72a59073[ 	]+csrw[ 	]+mhpmevent10h,a1
+[ 	]+[0-9a-f]+:[ 	]+72b02573[ 	]+csrr[ 	]+a0,mhpmevent11h
+[ 	]+[0-9a-f]+:[ 	]+72b59073[ 	]+csrw[ 	]+mhpmevent11h,a1
+[ 	]+[0-9a-f]+:[ 	]+72c02573[ 	]+csrr[ 	]+a0,mhpmevent12h
+[ 	]+[0-9a-f]+:[ 	]+72c59073[ 	]+csrw[ 	]+mhpmevent12h,a1
+[ 	]+[0-9a-f]+:[ 	]+72d02573[ 	]+csrr[ 	]+a0,mhpmevent13h
+[ 	]+[0-9a-f]+:[ 	]+72d59073[ 	]+csrw[ 	]+mhpmevent13h,a1
+[ 	]+[0-9a-f]+:[ 	]+72e02573[ 	]+csrr[ 	]+a0,mhpmevent14h
+[ 	]+[0-9a-f]+:[ 	]+72e59073[ 	]+csrw[ 	]+mhpmevent14h,a1
+[ 	]+[0-9a-f]+:[ 	]+72f02573[ 	]+csrr[ 	]+a0,mhpmevent15h
+[ 	]+[0-9a-f]+:[ 	]+72f59073[ 	]+csrw[ 	]+mhpmevent15h,a1
+[ 	]+[0-9a-f]+:[ 	]+73002573[ 	]+csrr[ 	]+a0,mhpmevent16h
+[ 	]+[0-9a-f]+:[ 	]+73059073[ 	]+csrw[ 	]+mhpmevent16h,a1
+[ 	]+[0-9a-f]+:[ 	]+73102573[ 	]+csrr[ 	]+a0,mhpmevent17h
+[ 	]+[0-9a-f]+:[ 	]+73159073[ 	]+csrw[ 	]+mhpmevent17h,a1
+[ 	]+[0-9a-f]+:[ 	]+73202573[ 	]+csrr[ 	]+a0,mhpmevent18h
+[ 	]+[0-9a-f]+:[ 	]+73259073[ 	]+csrw[ 	]+mhpmevent18h,a1
+[ 	]+[0-9a-f]+:[ 	]+73302573[ 	]+csrr[ 	]+a0,mhpmevent19h
+[ 	]+[0-9a-f]+:[ 	]+73359073[ 	]+csrw[ 	]+mhpmevent19h,a1
+[ 	]+[0-9a-f]+:[ 	]+73402573[ 	]+csrr[ 	]+a0,mhpmevent20h
+[ 	]+[0-9a-f]+:[ 	]+73459073[ 	]+csrw[ 	]+mhpmevent20h,a1
+[ 	]+[0-9a-f]+:[ 	]+73502573[ 	]+csrr[ 	]+a0,mhpmevent21h
+[ 	]+[0-9a-f]+:[ 	]+73559073[ 	]+csrw[ 	]+mhpmevent21h,a1
+[ 	]+[0-9a-f]+:[ 	]+73602573[ 	]+csrr[ 	]+a0,mhpmevent22h
+[ 	]+[0-9a-f]+:[ 	]+73659073[ 	]+csrw[ 	]+mhpmevent22h,a1
+[ 	]+[0-9a-f]+:[ 	]+73702573[ 	]+csrr[ 	]+a0,mhpmevent23h
+[ 	]+[0-9a-f]+:[ 	]+73759073[ 	]+csrw[ 	]+mhpmevent23h,a1
+[ 	]+[0-9a-f]+:[ 	]+73802573[ 	]+csrr[ 	]+a0,mhpmevent24h
+[ 	]+[0-9a-f]+:[ 	]+73859073[ 	]+csrw[ 	]+mhpmevent24h,a1
+[ 	]+[0-9a-f]+:[ 	]+73902573[ 	]+csrr[ 	]+a0,mhpmevent25h
+[ 	]+[0-9a-f]+:[ 	]+73959073[ 	]+csrw[ 	]+mhpmevent25h,a1
+[ 	]+[0-9a-f]+:[ 	]+73a02573[ 	]+csrr[ 	]+a0,mhpmevent26h
+[ 	]+[0-9a-f]+:[ 	]+73a59073[ 	]+csrw[ 	]+mhpmevent26h,a1
+[ 	]+[0-9a-f]+:[ 	]+73b02573[ 	]+csrr[ 	]+a0,mhpmevent27h
+[ 	]+[0-9a-f]+:[ 	]+73b59073[ 	]+csrw[ 	]+mhpmevent27h,a1
+[ 	]+[0-9a-f]+:[ 	]+73c02573[ 	]+csrr[ 	]+a0,mhpmevent28h
+[ 	]+[0-9a-f]+:[ 	]+73c59073[ 	]+csrw[ 	]+mhpmevent28h,a1
+[ 	]+[0-9a-f]+:[ 	]+73d02573[ 	]+csrr[ 	]+a0,mhpmevent29h
+[ 	]+[0-9a-f]+:[ 	]+73d59073[ 	]+csrw[ 	]+mhpmevent29h,a1
+[ 	]+[0-9a-f]+:[ 	]+73e02573[ 	]+csrr[ 	]+a0,mhpmevent30h
+[ 	]+[0-9a-f]+:[ 	]+73e59073[ 	]+csrw[ 	]+mhpmevent30h,a1
+[ 	]+[0-9a-f]+:[ 	]+73f02573[ 	]+csrr[ 	]+a0,mhpmevent31h
+[ 	]+[0-9a-f]+:[ 	]+73f59073[ 	]+csrw[ 	]+mhpmevent31h,a1
diff --git a/gas/testsuite/gas/riscv/csr-version-1p9p1.d b/gas/testsuite/gas/riscv/csr-version-1p9p1.d
index d0841df5aba..66e8d420fd3 100644
--- a/gas/testsuite/gas/riscv/csr-version-1p9p1.d
+++ b/gas/testsuite/gas/riscv/csr-version-1p9p1.d
@@ -1,4 +1,4 @@
-#as: -march=rv64i_zicsr -mcsr-check -mpriv-spec=1.9.1
+#as: -march=rv64ih_zicsr -mcsr-check -mpriv-spec=1.9.1
 #source: csr.s
 #warning_output: csr-version-1p9p1.l
 #objdump: -dr -Mpriv-spec=1.9.1
@@ -715,3 +715,84 @@ Disassembly of section .text:
 [ 	]+[0-9a-f]+:[ 	]+c2159073[ 	]+csrw[ 	]+vtype,a1
 [ 	]+[0-9a-f]+:[ 	]+c2202573[ 	]+csrr[ 	]+a0,vlenb
 [ 	]+[0-9a-f]+:[ 	]+c2259073[ 	]+csrw[ 	]+vlenb,a1
+[ 	]+[0-9a-f]+:[ 	]+30702573[ 	]+csrr[ 	]+a0,mtvt
+[ 	]+[0-9a-f]+:[ 	]+30759073[ 	]+csrw[ 	]+mtvt,a1
+[ 	]+[0-9a-f]+:[ 	]+34502573[ 	]+csrr[ 	]+a0,mnxti
+[ 	]+[0-9a-f]+:[ 	]+34559073[ 	]+csrw[ 	]+mnxti,a1
+[ 	]+[0-9a-f]+:[ 	]+34602573[ 	]+csrr[ 	]+a0,mintstatus
+[ 	]+[0-9a-f]+:[ 	]+34659073[ 	]+csrw[ 	]+mintstatus,a1
+[ 	]+[0-9a-f]+:[ 	]+34811173[ 	]+csrrw[ 	]+sp,mscratchcsw,sp
+[ 	]+[0-9a-f]+:[ 	]+35002573[ 	]+csrr[ 	]+a0,mnscratch
+[ 	]+[0-9a-f]+:[ 	]+35059073[ 	]+csrw[ 	]+mnscratch,a1
+[ 	]+[0-9a-f]+:[ 	]+35102573[ 	]+csrr[ 	]+a0,mnepc
+[ 	]+[0-9a-f]+:[ 	]+35159073[ 	]+csrw[ 	]+mnepc,a1
+[ 	]+[0-9a-f]+:[ 	]+35202573[ 	]+csrr[ 	]+a0,mncause
+[ 	]+[0-9a-f]+:[ 	]+35259073[ 	]+csrw[ 	]+mncause,a1
+[ 	]+[0-9a-f]+:[ 	]+35302573[ 	]+csrr[ 	]+a0,mnstatus
+[ 	]+[0-9a-f]+:[ 	]+35359073[ 	]+csrw[ 	]+mnstatus,a1
+[ 	]+[0-9a-f]+:[ 	]+7e002573[ 	]+csrr[ 	]+a0,mlwid
+[ 	]+[0-9a-f]+:[ 	]+7e059073[ 	]+csrw[ 	]+mlwid,a1
+[ 	]+[0-9a-f]+:[ 	]+9e002573[ 	]+csrr[ 	]+a0,slwid
+[ 	]+[0-9a-f]+:[ 	]+9e059073[ 	]+csrw[ 	]+slwid,a1
+[ 	]+[0-9a-f]+:[ 	]+7e102573[ 	]+csrr[ 	]+a0,mwiddeleg
+[ 	]+[0-9a-f]+:[ 	]+7e159073[ 	]+csrw[ 	]+mwiddeleg,a1
+[ 	]+[0-9a-f]+:[ 	]+da002573[ 	]+csrr[ 	]+a0,scountovf
+[ 	]+[0-9a-f]+:[ 	]+da059073[ 	]+csrw[ 	]+scountovf,a1
+[ 	]+[0-9a-f]+:[ 	]+72302573[ 	]+csrr[ 	]+a0,mhpmevent3h
+[ 	]+[0-9a-f]+:[ 	]+72359073[ 	]+csrw[ 	]+mhpmevent3h,a1
+[ 	]+[0-9a-f]+:[ 	]+72402573[ 	]+csrr[ 	]+a0,mhpmevent4h
+[ 	]+[0-9a-f]+:[ 	]+72459073[ 	]+csrw[ 	]+mhpmevent4h,a1
+[ 	]+[0-9a-f]+:[ 	]+72502573[ 	]+csrr[ 	]+a0,mhpmevent5h
+[ 	]+[0-9a-f]+:[ 	]+72559073[ 	]+csrw[ 	]+mhpmevent5h,a1
+[ 	]+[0-9a-f]+:[ 	]+72602573[ 	]+csrr[ 	]+a0,mhpmevent6h
+[ 	]+[0-9a-f]+:[ 	]+72659073[ 	]+csrw[ 	]+mhpmevent6h,a1
+[ 	]+[0-9a-f]+:[ 	]+72702573[ 	]+csrr[ 	]+a0,mhpmevent7h
+[ 	]+[0-9a-f]+:[ 	]+72759073[ 	]+csrw[ 	]+mhpmevent7h,a1
+[ 	]+[0-9a-f]+:[ 	]+72802573[ 	]+csrr[ 	]+a0,mhpmevent8h
+[ 	]+[0-9a-f]+:[ 	]+72859073[ 	]+csrw[ 	]+mhpmevent8h,a1
+[ 	]+[0-9a-f]+:[ 	]+72902573[ 	]+csrr[ 	]+a0,mhpmevent9h
+[ 	]+[0-9a-f]+:[ 	]+72959073[ 	]+csrw[ 	]+mhpmevent9h,a1
+[ 	]+[0-9a-f]+:[ 	]+72a02573[ 	]+csrr[ 	]+a0,mhpmevent10h
+[ 	]+[0-9a-f]+:[ 	]+72a59073[ 	]+csrw[ 	]+mhpmevent10h,a1
+[ 	]+[0-9a-f]+:[ 	]+72b02573[ 	]+csrr[ 	]+a0,mhpmevent11h
+[ 	]+[0-9a-f]+:[ 	]+72b59073[ 	]+csrw[ 	]+mhpmevent11h,a1
+[ 	]+[0-9a-f]+:[ 	]+72c02573[ 	]+csrr[ 	]+a0,mhpmevent12h
+[ 	]+[0-9a-f]+:[ 	]+72c59073[ 	]+csrw[ 	]+mhpmevent12h,a1
+[ 	]+[0-9a-f]+:[ 	]+72d02573[ 	]+csrr[ 	]+a0,mhpmevent13h
+[ 	]+[0-9a-f]+:[ 	]+72d59073[ 	]+csrw[ 	]+mhpmevent13h,a1
+[ 	]+[0-9a-f]+:[ 	]+72e02573[ 	]+csrr[ 	]+a0,mhpmevent14h
+[ 	]+[0-9a-f]+:[ 	]+72e59073[ 	]+csrw[ 	]+mhpmevent14h,a1
+[ 	]+[0-9a-f]+:[ 	]+72f02573[ 	]+csrr[ 	]+a0,mhpmevent15h
+[ 	]+[0-9a-f]+:[ 	]+72f59073[ 	]+csrw[ 	]+mhpmevent15h,a1
+[ 	]+[0-9a-f]+:[ 	]+73002573[ 	]+csrr[ 	]+a0,mhpmevent16h
+[ 	]+[0-9a-f]+:[ 	]+73059073[ 	]+csrw[ 	]+mhpmevent16h,a1
+[ 	]+[0-9a-f]+:[ 	]+73102573[ 	]+csrr[ 	]+a0,mhpmevent17h
+[ 	]+[0-9a-f]+:[ 	]+73159073[ 	]+csrw[ 	]+mhpmevent17h,a1
+[ 	]+[0-9a-f]+:[ 	]+73202573[ 	]+csrr[ 	]+a0,mhpmevent18h
+[ 	]+[0-9a-f]+:[ 	]+73259073[ 	]+csrw[ 	]+mhpmevent18h,a1
+[ 	]+[0-9a-f]+:[ 	]+73302573[ 	]+csrr[ 	]+a0,mhpmevent19h
+[ 	]+[0-9a-f]+:[ 	]+73359073[ 	]+csrw[ 	]+mhpmevent19h,a1
+[ 	]+[0-9a-f]+:[ 	]+73402573[ 	]+csrr[ 	]+a0,mhpmevent20h
+[ 	]+[0-9a-f]+:[ 	]+73459073[ 	]+csrw[ 	]+mhpmevent20h,a1
+[ 	]+[0-9a-f]+:[ 	]+73502573[ 	]+csrr[ 	]+a0,mhpmevent21h
+[ 	]+[0-9a-f]+:[ 	]+73559073[ 	]+csrw[ 	]+mhpmevent21h,a1
+[ 	]+[0-9a-f]+:[ 	]+73602573[ 	]+csrr[ 	]+a0,mhpmevent22h
+[ 	]+[0-9a-f]+:[ 	]+73659073[ 	]+csrw[ 	]+mhpmevent22h,a1
+[ 	]+[0-9a-f]+:[ 	]+73702573[ 	]+csrr[ 	]+a0,mhpmevent23h
+[ 	]+[0-9a-f]+:[ 	]+73759073[ 	]+csrw[ 	]+mhpmevent23h,a1
+[ 	]+[0-9a-f]+:[ 	]+73802573[ 	]+csrr[ 	]+a0,mhpmevent24h
+[ 	]+[0-9a-f]+:[ 	]+73859073[ 	]+csrw[ 	]+mhpmevent24h,a1
+[ 	]+[0-9a-f]+:[ 	]+73902573[ 	]+csrr[ 	]+a0,mhpmevent25h
+[ 	]+[0-9a-f]+:[ 	]+73959073[ 	]+csrw[ 	]+mhpmevent25h,a1
+[ 	]+[0-9a-f]+:[ 	]+73a02573[ 	]+csrr[ 	]+a0,mhpmevent26h
+[ 	]+[0-9a-f]+:[ 	]+73a59073[ 	]+csrw[ 	]+mhpmevent26h,a1
+[ 	]+[0-9a-f]+:[ 	]+73b02573[ 	]+csrr[ 	]+a0,mhpmevent27h
+[ 	]+[0-9a-f]+:[ 	]+73b59073[ 	]+csrw[ 	]+mhpmevent27h,a1
+[ 	]+[0-9a-f]+:[ 	]+73c02573[ 	]+csrr[ 	]+a0,mhpmevent28h
+[ 	]+[0-9a-f]+:[ 	]+73c59073[ 	]+csrw[ 	]+mhpmevent28h,a1
+[ 	]+[0-9a-f]+:[ 	]+73d02573[ 	]+csrr[ 	]+a0,mhpmevent29h
+[ 	]+[0-9a-f]+:[ 	]+73d59073[ 	]+csrw[ 	]+mhpmevent29h,a1
+[ 	]+[0-9a-f]+:[ 	]+73e02573[ 	]+csrr[ 	]+a0,mhpmevent30h
+[ 	]+[0-9a-f]+:[ 	]+73e59073[ 	]+csrw[ 	]+mhpmevent30h,a1
+[ 	]+[0-9a-f]+:[ 	]+73f02573[ 	]+csrr[ 	]+a0,mhpmevent31h
+[ 	]+[0-9a-f]+:[ 	]+73f59073[ 	]+csrw[ 	]+mhpmevent31h,a1
diff --git a/gas/testsuite/gas/riscv/csr.s b/gas/testsuite/gas/riscv/csr.s
index 0d0ec712c15..3a7ff07ef2d 100644
--- a/gas/testsuite/gas/riscv/csr.s
+++ b/gas/testsuite/gas/riscv/csr.s
@@ -408,3 +408,54 @@
 	csr vl
 	csr vtype
 	csr vlenb
+
+	# SiFive CLIC
+	csr mtvt
+	csr mnxti
+	csr mintstatus
+	csrrw sp,mscratchcsw,sp
+
+	# SiFive RNMI
+	csr mnscratch
+	csr mnepc
+	csr mncause
+	csr mnstatus
+
+	# SiFive WorldGuard
+	csr mlwid
+	csr slwid
+	csr mwiddeleg
+
+	# SiFive Sscofpmf
+	.option no-csr-check
+	csr scountovf
+	csr mhpmevent3h
+	csr mhpmevent4h
+	csr mhpmevent5h
+	csr mhpmevent6h
+	csr mhpmevent7h
+	csr mhpmevent8h
+	csr mhpmevent9h
+	csr mhpmevent10h
+	csr mhpmevent11h
+	csr mhpmevent12h
+	csr mhpmevent13h
+	csr mhpmevent14h
+	csr mhpmevent15h
+	csr mhpmevent16h
+	csr mhpmevent17h
+	csr mhpmevent18h
+	csr mhpmevent19h
+	csr mhpmevent20h
+	csr mhpmevent21h
+	csr mhpmevent22h
+	csr mhpmevent23h
+	csr mhpmevent24h
+	csr mhpmevent25h
+	csr mhpmevent26h
+	csr mhpmevent27h
+	csr mhpmevent28h
+	csr mhpmevent29h
+	csr mhpmevent30h
+	csr mhpmevent31h
+	.option csr-check
diff --git a/gas/testsuite/gas/riscv/float16-be.d b/gas/testsuite/gas/riscv/float16-be.d
new file mode 100644
index 00000000000..daec7b177bf
--- /dev/null
+++ b/gas/testsuite/gas/riscv/float16-be.d
@@ -0,0 +1,10 @@
+# source: float16.s
+# objdump: -sj .data
+# as: -mbig-endian
+
+.*:[ 	]+file format .*bigriscv
+
+Contents of section \.data:
+ 0000 4a002fdf 1c197bff 000103ff 04003c00.*
+ 0010 3c017fff 7c00fc00 00008000 bc00bbe7.*
+ 0020 fbff4200 4a00603e 7e007c01.*
diff --git a/gas/testsuite/gas/riscv/float16-le.d b/gas/testsuite/gas/riscv/float16-le.d
new file mode 100644
index 00000000000..5591148c2c8
--- /dev/null
+++ b/gas/testsuite/gas/riscv/float16-le.d
@@ -0,0 +1,10 @@
+# source: float16.s
+# objdump: -sj .data
+# as: -mlittle-endian
+
+.*:[ 	]+file format .*littleriscv
+
+Contents of section \.data:
+ 0000 004adf2f 191cff7b 0100ff03 0004003c.*
+ 0010 013cff7f 007c00fc 00000080 00bce7bb.*
+ 0020 fffb0042 004a3e60 007e017c.*
diff --git a/gas/testsuite/gas/riscv/float16.s b/gas/testsuite/gas/riscv/float16.s
new file mode 100644
index 00000000000..c206385d221
--- /dev/null
+++ b/gas/testsuite/gas/riscv/float16.s
@@ -0,0 +1,21 @@
+.data
+	.float16 12.0
+	.float16 0.123
+	.float16 0.004
+	.float16 65504
+	.float16 5.9605e-8
+	.float16 6.0976e-5
+	.float16 6.1035e-5
+	.float16 1
+	.float16 1.001
+	.float16 NaN
+	.float16 +Inf
+	.float16 -Inf
+	.float16 +0
+	.float16 -0
+	.float16 -1
+	.float16 -0.98765
+	.float16 -65504
+	.float16 3.0, 12.0, 543.123
+	.float16 0h:7e00	# qNaNh
+	.float16 0h:7c01	# sNaNh
diff --git a/gas/testsuite/gas/riscv/fp-zfh-insns.d b/gas/testsuite/gas/riscv/fp-zfh-insns.d
new file mode 100644
index 00000000000..a0bb06912bc
--- /dev/null
+++ b/gas/testsuite/gas/riscv/fp-zfh-insns.d
@@ -0,0 +1,71 @@
+#as: -march=rv64ifdq_zfh
+#source: fp-zfh-insns.s
+#objdump: -dr
+
+.*:[ 	]+file format .*
+
+
+Disassembly of section .text:
+
+0+000 <.text>:
+[ 	]+[0-9a-f]+:[ 	]+00059507[ 	]+flh[ 	]+fa0,0\(a1\)
+[ 	]+[0-9a-f]+:[ 	]+00a59027[ 	]+fsh[ 	]+fa0,0\(a1\)
+[ 	]+[0-9a-f]+:[ 	]+24b58553[ 	]+fmv.h[ 	]+fa0,fa1
+[ 	]+[0-9a-f]+:[ 	]+24b59553[ 	]+fneg.h[ 	]+fa0,fa1
+[ 	]+[0-9a-f]+:[ 	]+24b5a553[ 	]+fabs.h[ 	]+fa0,fa1
+[ 	]+[0-9a-f]+:[ 	]+24c58553[ 	]+fsgnj.h[ 	]+fa0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+24c59553[ 	]+fsgnjn.h[ 	]+fa0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+24c5a553[ 	]+fsgnjx.h[ 	]+fa0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+04c5f553[ 	]+fadd.h[ 	]+fa0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+04c58553[ 	]+fadd.h[ 	]+fa0,fa1,fa2,rne
+[ 	]+[0-9a-f]+:[ 	]+0cc5f553[ 	]+fsub.h[ 	]+fa0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+0cc58553[ 	]+fsub.h[ 	]+fa0,fa1,fa2,rne
+[ 	]+[0-9a-f]+:[ 	]+14c5f553[ 	]+fmul.h[ 	]+fa0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+14c58553[ 	]+fmul.h[ 	]+fa0,fa1,fa2,rne
+[ 	]+[0-9a-f]+:[ 	]+1cc5f553[ 	]+fdiv.h[ 	]+fa0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+1cc58553[ 	]+fdiv.h[ 	]+fa0,fa1,fa2,rne
+[ 	]+[0-9a-f]+:[ 	]+5c05f553[ 	]+fsqrt.h[ 	]+fa0,fa1
+[ 	]+[0-9a-f]+:[ 	]+5c058553[ 	]+fsqrt.h[ 	]+fa0,fa1,rne
+[ 	]+[0-9a-f]+:[ 	]+2cc58553[ 	]+fmin.h[ 	]+fa0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+2cc59553[ 	]+fmax.h[ 	]+fa0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+6cc5f543[ 	]+fmadd.h[ 	]+fa0,fa1,fa2,fa3
+[ 	]+[0-9a-f]+:[ 	]+6cc58543[ 	]+fmadd.h[ 	]+fa0,fa1,fa2,fa3,rne
+[ 	]+[0-9a-f]+:[ 	]+6cc5f54f[ 	]+fnmadd.h[ 	]+fa0,fa1,fa2,fa3
+[ 	]+[0-9a-f]+:[ 	]+6cc5854f[ 	]+fnmadd.h[ 	]+fa0,fa1,fa2,fa3,rne
+[ 	]+[0-9a-f]+:[ 	]+6cc5f547[ 	]+fmsub.h[ 	]+fa0,fa1,fa2,fa3
+[ 	]+[0-9a-f]+:[ 	]+6cc58547[ 	]+fmsub.h[ 	]+fa0,fa1,fa2,fa3,rne
+[ 	]+[0-9a-f]+:[ 	]+6cc5f54b[ 	]+fnmsub.h[ 	]+fa0,fa1,fa2,fa3
+[ 	]+[0-9a-f]+:[ 	]+6cc5854b[ 	]+fnmsub.h[ 	]+fa0,fa1,fa2,fa3,rne
+[ 	]+[0-9a-f]+:[ 	]+c405f553[ 	]+fcvt.w.h[ 	]+a0,fa1
+[ 	]+[0-9a-f]+:[ 	]+c4058553[ 	]+fcvt.w.h[ 	]+a0,fa1,rne
+[ 	]+[0-9a-f]+:[ 	]+c415f553[ 	]+fcvt.wu.h[ 	]+a0,fa1
+[ 	]+[0-9a-f]+:[ 	]+c4158553[ 	]+fcvt.wu.h[ 	]+a0,fa1,rne
+[ 	]+[0-9a-f]+:[ 	]+d405f553[ 	]+fcvt.h.w[ 	]+fa0,a1
+[ 	]+[0-9a-f]+:[ 	]+d4058553[ 	]+fcvt.h.w[ 	]+fa0,a1,rne
+[ 	]+[0-9a-f]+:[ 	]+d415f553[ 	]+fcvt.h.wu[ 	]+fa0,a1
+[ 	]+[0-9a-f]+:[ 	]+d4158553[ 	]+fcvt.h.wu[ 	]+fa0,a1,rne
+[ 	]+[0-9a-f]+:[ 	]+c425f553[ 	]+fcvt.l.h[ 	]+a0,fa1
+[ 	]+[0-9a-f]+:[ 	]+c4258553[ 	]+fcvt.l.h[ 	]+a0,fa1,rne
+[ 	]+[0-9a-f]+:[ 	]+c435f553[ 	]+fcvt.lu.h[ 	]+a0,fa1
+[ 	]+[0-9a-f]+:[ 	]+c4358553[ 	]+fcvt.lu.h[ 	]+a0,fa1,rne
+[ 	]+[0-9a-f]+:[ 	]+d425f553[ 	]+fcvt.h.l[ 	]+fa0,a1
+[ 	]+[0-9a-f]+:[ 	]+d4258553[ 	]+fcvt.h.l[ 	]+fa0,a1,rne
+[ 	]+[0-9a-f]+:[ 	]+d435f553[ 	]+fcvt.h.lu[ 	]+fa0,a1
+[ 	]+[0-9a-f]+:[ 	]+d4358553[ 	]+fcvt.h.lu[ 	]+fa0,a1,rne
+[ 	]+[0-9a-f]+:[ 	]+e4058553[ 	]+fmv.x.h[ 	]+a0,fa1
+[ 	]+[0-9a-f]+:[ 	]+f4058553[ 	]+fmv.h.x[ 	]+fa0,a1
+[ 	]+[0-9a-f]+:[ 	]+40258553[ 	]+fcvt.s.h[ 	]+fa0,fa1
+[ 	]+[0-9a-f]+:[ 	]+42258553[ 	]+fcvt.d.h[ 	]+fa0,fa1
+[ 	]+[0-9a-f]+:[ 	]+46258553[ 	]+fcvt.q.h[ 	]+fa0,fa1
+[ 	]+[0-9a-f]+:[ 	]+4405f553[ 	]+fcvt.h.s[ 	]+fa0,fa1
+[ 	]+[0-9a-f]+:[ 	]+44058553[ 	]+fcvt.h.s[ 	]+fa0,fa1,rne
+[ 	]+[0-9a-f]+:[ 	]+4415f553[ 	]+fcvt.h.d[ 	]+fa0,fa1
+[ 	]+[0-9a-f]+:[ 	]+44158553[ 	]+fcvt.h.d[ 	]+fa0,fa1,rne
+[ 	]+[0-9a-f]+:[ 	]+4435f553[ 	]+fcvt.h.q[ 	]+fa0,fa1
+[ 	]+[0-9a-f]+:[ 	]+44358553[ 	]+fcvt.h.q[ 	]+fa0,fa1,rne
+[ 	]+[0-9a-f]+:[ 	]+e4059553[ 	]+fclass.h[ 	]+a0,fa1
+[ 	]+[0-9a-f]+:[ 	]+a4c5a553[ 	]+feq.h[ 	]+a0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+a4c59553[ 	]+flt.h[ 	]+a0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+a4c58553[ 	]+fle.h[ 	]+a0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+a4c59553[ 	]+flt.h[ 	]+a0,fa1,fa2
+[ 	]+[0-9a-f]+:[ 	]+a4c58553[ 	]+fle.h[ 	]+a0,fa1,fa2
diff --git a/gas/testsuite/gas/riscv/fp-zfh-insns.s b/gas/testsuite/gas/riscv/fp-zfh-insns.s
new file mode 100644
index 00000000000..1a04cc64008
--- /dev/null
+++ b/gas/testsuite/gas/riscv/fp-zfh-insns.s
@@ -0,0 +1,68 @@
+	flh		fa0, 0(a1)
+	fsh		fa0, 0(a1)
+
+	fmv.h		fa0, fa1
+	fneg.h		fa0, fa1
+	fabs.h		fa0, fa1
+	fsgnj.h		fa0, fa1, fa2
+	fsgnjn.h	fa0, fa1, fa2
+	fsgnjx.h	fa0, fa1, fa2
+
+	fadd.h		fa0, fa1, fa2
+	fadd.h		fa0, fa1, fa2, rne
+	fsub.h		fa0, fa1, fa2
+	fsub.h		fa0, fa1, fa2, rne
+	fmul.h		fa0, fa1, fa2
+	fmul.h		fa0, fa1, fa2, rne
+	fdiv.h		fa0, fa1, fa2
+	fdiv.h		fa0, fa1, fa2, rne
+	fsqrt.h		fa0, fa1
+	fsqrt.h		fa0, fa1, rne
+	fmin.h		fa0, fa1, fa2
+	fmax.h		fa0, fa1, fa2
+
+	fmadd.h		fa0, fa1, fa2, fa3
+	fmadd.h		fa0, fa1, fa2, fa3, rne
+	fnmadd.h	fa0, fa1, fa2, fa3
+	fnmadd.h	fa0, fa1, fa2, fa3, rne
+	fmsub.h		fa0, fa1, fa2, fa3
+	fmsub.h		fa0, fa1, fa2, fa3, rne
+	fnmsub.h	fa0, fa1, fa2, fa3
+	fnmsub.h	fa0, fa1, fa2, fa3, rne
+
+	fcvt.w.h	a0, fa1
+	fcvt.w.h	a0, fa1, rne
+	fcvt.wu.h	a0, fa1
+	fcvt.wu.h	a0, fa1, rne
+	fcvt.h.w	fa0, a1
+	fcvt.h.w	fa0, a1, rne
+	fcvt.h.wu	fa0, a1
+	fcvt.h.wu	fa0, a1, rne
+	fcvt.l.h	a0, fa1
+	fcvt.l.h	a0, fa1, rne
+	fcvt.lu.h	a0, fa1
+	fcvt.lu.h	a0, fa1, rne
+	fcvt.h.l	fa0, a1
+	fcvt.h.l	fa0, a1, rne
+	fcvt.h.lu	fa0, a1
+	fcvt.h.lu	fa0, a1, rne
+
+	fmv.x.h		a0, fa1
+	fmv.h.x		fa0, a1
+
+	fcvt.s.h	fa0, fa1
+	fcvt.d.h	fa0, fa1
+	fcvt.q.h	fa0, fa1
+	fcvt.h.s	fa0, fa1
+	fcvt.h.s	fa0, fa1, rne
+	fcvt.h.d	fa0, fa1
+	fcvt.h.d	fa0, fa1, rne
+	fcvt.h.q	fa0, fa1
+	fcvt.h.q	fa0, fa1, rne
+	fclass.h	a0, fa1
+
+	feq.h		a0, fa1, fa2
+	flt.h		a0, fa1, fa2
+	fle.h		a0, fa1, fa2
+	fgt.h		a0, fa2, fa1
+	fge.h		a0, fa2, fa1
diff --git a/gas/testsuite/gas/riscv/h-ext-32.d b/gas/testsuite/gas/riscv/h-ext-32.d
index 4328ba7a899..9b1ec6ee6bb 100644
--- a/gas/testsuite/gas/riscv/h-ext-32.d
+++ b/gas/testsuite/gas/riscv/h-ext-32.d
@@ -1,4 +1,4 @@
-#as: -march=rv32i
+#as: -march=rv32ih
 #source: h-ext-32.s
 #objdump: -d
 
diff --git a/gas/testsuite/gas/riscv/h-ext-64.d b/gas/testsuite/gas/riscv/h-ext-64.d
index eb1444b874c..646a664837f 100644
--- a/gas/testsuite/gas/riscv/h-ext-64.d
+++ b/gas/testsuite/gas/riscv/h-ext-64.d
@@ -1,4 +1,4 @@
-#as: -march=rv64i
+#as: -march=rv64ih
 #source: h-ext-64.s
 #objdump: -d
 
diff --git a/gas/testsuite/gas/riscv/march-fail-order-x-z.d b/gas/testsuite/gas/riscv/march-fail-order-x-z.d
deleted file mode 100644
index 7245e68e0ea..00000000000
--- a/gas/testsuite/gas/riscv/march-fail-order-x-z.d
+++ /dev/null
@@ -1,3 +0,0 @@
-#as: -march=rv32i_xargle2p0_zicsr2p0
-#source: empty.s
-#error_output: march-fail-order-x-z.l
diff --git a/gas/testsuite/gas/riscv/march-fail-order-x-z.l b/gas/testsuite/gas/riscv/march-fail-order-x-z.l
deleted file mode 100644
index 53ea8201187..00000000000
--- a/gas/testsuite/gas/riscv/march-fail-order-x-z.l
+++ /dev/null
@@ -1,2 +0,0 @@
-.*Assembler messages:
-.*Error: .*prefixed ISA extension `zicsr' is not in expected order.  It must come before `xargle'
diff --git a/gas/testsuite/gas/riscv/march-fail-order-x.d b/gas/testsuite/gas/riscv/march-fail-order-x.d
deleted file mode 100644
index 72a821ef8e6..00000000000
--- a/gas/testsuite/gas/riscv/march-fail-order-x.d
+++ /dev/null
@@ -1,3 +0,0 @@
-#as: -march=rv32i_xbargle2p0_xargle2p0
-#source: empty.s
-#error_output: march-fail-order-x.l
diff --git a/gas/testsuite/gas/riscv/march-fail-order-x.l b/gas/testsuite/gas/riscv/march-fail-order-x.l
deleted file mode 100644
index cfb118528df..00000000000
--- a/gas/testsuite/gas/riscv/march-fail-order-x.l
+++ /dev/null
@@ -1,2 +0,0 @@
-.*Assembler messages:
-.*Error: .*prefixed ISA extension `xargle' is not in expected order.  It must come before `xbargle'
diff --git a/gas/testsuite/gas/riscv/march-fail-order-z.d b/gas/testsuite/gas/riscv/march-fail-order-z.d
deleted file mode 100644
index dd076c6d35a..00000000000
--- a/gas/testsuite/gas/riscv/march-fail-order-z.d
+++ /dev/null
@@ -1,3 +0,0 @@
-#as: -march=rv32i_zifencei2p0_zicsr2p0
-#source: empty.s
-#error_output: march-fail-order-z.l
diff --git a/gas/testsuite/gas/riscv/march-fail-order-z.l b/gas/testsuite/gas/riscv/march-fail-order-z.l
deleted file mode 100644
index 468c412051f..00000000000
--- a/gas/testsuite/gas/riscv/march-fail-order-z.l
+++ /dev/null
@@ -1,2 +0,0 @@
-.*Assembler messages:
-.*Error: .*prefixed ISA extension `zicsr' is not in expected order.  It must come before `zifencei'
diff --git a/gas/testsuite/gas/riscv/march-fail-single-prefix-h.d b/gas/testsuite/gas/riscv/march-fail-single-prefix-h.d
deleted file mode 100644
index eb101bd7135..00000000000
--- a/gas/testsuite/gas/riscv/march-fail-single-prefix-h.d
+++ /dev/null
@@ -1,3 +0,0 @@
-#as: -march=rv32ih
-#source: empty.s
-#error_output: march-fail-single-prefix.l
diff --git a/gas/testsuite/gas/riscv/march-imply-v0p10.d b/gas/testsuite/gas/riscv/march-imply-v0p10.d
new file mode 100644
index 00000000000..3fdb765be31
--- /dev/null
+++ b/gas/testsuite/gas/riscv/march-imply-v0p10.d
@@ -0,0 +1,6 @@
+#as: -march=rv32iv0p10 -march-attr -misa-spec=20191213
+#readelf: -A
+#source: empty.s
+Attribute Section: riscv
+File Attributes
+  Tag_RISCV_arch: "rv32i2p1_f2p2_d2p2_v0p10_zicsr2p0_zvlsseg0p10"
diff --git a/gas/testsuite/gas/riscv/march-imply-v.d b/gas/testsuite/gas/riscv/march-imply-v1p0.d
similarity index 100%
rename from gas/testsuite/gas/riscv/march-imply-v.d
rename to gas/testsuite/gas/riscv/march-imply-v1p0.d
diff --git a/gas/testsuite/gas/riscv/march-imply-xsfvfhbfmin.d b/gas/testsuite/gas/riscv/march-imply-xsfvfhbfmin.d
new file mode 100644
index 00000000000..7c7d2b6df7f
--- /dev/null
+++ b/gas/testsuite/gas/riscv/march-imply-xsfvfhbfmin.d
@@ -0,0 +1,6 @@
+#as: -march=rv32i_xsfvfhbfmin -march-attr -misa-spec=20191213
+#readelf: -A
+#source: empty.s
+Attribute Section: riscv
+File Attributes
+  Tag_RISCV_arch: "rv32i2p1_f2p2_zicsr2p0_zve32f1p0_zve32x1p0_zvl32b1p0_xsfvfhbfmin0p1"
diff --git a/gas/testsuite/gas/riscv/march-imply-xsfvfnrclipxfqf.d b/gas/testsuite/gas/riscv/march-imply-xsfvfnrclipxfqf.d
new file mode 100644
index 00000000000..ab5ee35691c
--- /dev/null
+++ b/gas/testsuite/gas/riscv/march-imply-xsfvfnrclipxfqf.d
@@ -0,0 +1,6 @@
+#as: -march=rv32i_xsfvfnrclipxfqf -march-attr -misa-spec=20191213
+#readelf: -A
+#source: empty.s
+Attribute Section: riscv
+File Attributes
+  Tag_RISCV_arch: "rv32i2p1_f2p2_zicsr2p0_zve32f1p0_zve32x1p0_zvl32b1p0_xsfvfnrclipxfqf0p1"
diff --git a/gas/testsuite/gas/riscv/march-imply-xsfvfwmaccqqq.d b/gas/testsuite/gas/riscv/march-imply-xsfvfwmaccqqq.d
new file mode 100644
index 00000000000..c47a1e8ef30
--- /dev/null
+++ b/gas/testsuite/gas/riscv/march-imply-xsfvfwmaccqqq.d
@@ -0,0 +1,6 @@
+#as: -march=rv32i_xsfvfwmaccqqq -march-attr -misa-spec=20191213
+#readelf: -A
+#source: empty.s
+Attribute Section: riscv
+File Attributes
+  Tag_RISCV_arch: "rv32i2p1_f2p2_zicsr2p0_zve32f1p0_zve32x1p0_zvl128b1p0_zvl256b1p0_zvl32b1p0_zvl64b1p0_xsfvfwmaccqqq0p1"
diff --git a/gas/testsuite/gas/riscv/march-imply-xsfvqmaccdod.d b/gas/testsuite/gas/riscv/march-imply-xsfvqmaccdod.d
new file mode 100644
index 00000000000..1be8249bcc4
--- /dev/null
+++ b/gas/testsuite/gas/riscv/march-imply-xsfvqmaccdod.d
@@ -0,0 +1,6 @@
+#as: -march=rv32i_xsfvqmaccdod -march-attr -misa-spec=20191213
+#readelf: -A
+#source: empty.s
+Attribute Section: riscv
+File Attributes
+  Tag_RISCV_arch: "rv32i2p1_zve32x1p0_zvl128b1p0_zvl32b1p0_zvl64b1p0_xsfvqmaccdod0p1"
diff --git a/gas/testsuite/gas/riscv/march-imply-xsfvqmaccqoq.d b/gas/testsuite/gas/riscv/march-imply-xsfvqmaccqoq.d
new file mode 100644
index 00000000000..39aa5768ee0
--- /dev/null
+++ b/gas/testsuite/gas/riscv/march-imply-xsfvqmaccqoq.d
@@ -0,0 +1,6 @@
+#as: -march=rv32i_xsfvqmaccqoq -march-attr -misa-spec=20191213
+#readelf: -A
+#source: empty.s
+Attribute Section: riscv
+File Attributes
+  Tag_RISCV_arch: "rv32i2p1_zve32x1p0_zvl128b1p0_zvl256b1p0_zvl32b1p0_zvl64b1p0_xsfvqmaccqoq0p1"
diff --git a/gas/testsuite/gas/riscv/sifive-insns.d b/gas/testsuite/gas/riscv/sifive-insns.d
new file mode 100644
index 00000000000..78642978efb
--- /dev/null
+++ b/gas/testsuite/gas/riscv/sifive-insns.d
@@ -0,0 +1,60 @@
+#as:
+#objdump: -dr
+
+.*:[   ]+file format .*
+
+
+Disassembly of section .text:
+
+0+000 <.text>:
+[ 	]+[0-9a-f]+:[ 	]+70200073[ 	]+mnret
+[ 	]+[0-9a-f]+:[ 	]+70200073[ 	]+mnret
+[ 	]+[0-9a-f]+:[ 	]+fc050073[ 	]+cflush.d.l1[ 	]+a0
+[ 	]+[0-9a-f]+:[ 	]+fc250073[ 	]+cdiscard.d.l1[ 	]+a0
+[ 	]+[0-9a-f]+:[ 	]+fc100073[ 	]+cflush.i.l1
+[ 	]+[0-9a-f]+:[ 	]+fc050073[ 	]+cflush.d.l1[ 	]+a0
+[ 	]+[0-9a-f]+:[ 	]+fc250073[ 	]+cdiscard.d.l1[ 	]+a0
+[ 	]+[0-9a-f]+:[ 	]+fc100073[ 	]+cflush.i.l1
+[ 	]+[0-9a-f]+:[ 	]+f2c4225b[ 	]+sf.vqmaccu.4x8x4[ 	]+v4,v8,v12
+[ 	]+[0-9a-f]+:[ 	]+f6c4225b[ 	]+sf.vqmacc.4x8x4[ 	]+v4,v8,v12
+[ 	]+[0-9a-f]+:[ 	]+fac4225b[ 	]+sf.vqmaccus.4x8x4[ 	]+v4,v8,v12
+[ 	]+[0-9a-f]+:[ 	]+fec4225b[ 	]+sf.vqmaccsu.4x8x4[ 	]+v4,v8,v12
+[ 	]+[0-9a-f]+:[ 	]+b2c4225b[ 	]+sf.vqmaccu.2x8x2[ 	]+v4,v8,v12
+[ 	]+[0-9a-f]+:[ 	]+b6c4225b[ 	]+sf.vqmacc.2x8x2[ 	]+v4,v8,v12
+[ 	]+[0-9a-f]+:[ 	]+bac4225b[ 	]+sf.vqmaccus.2x8x2[ 	]+v4,v8,v12
+[ 	]+[0-9a-f]+:[ 	]+bec4225b[ 	]+sf.vqmaccsu.2x8x2[ 	]+v4,v8,v12
+[ 	]+[0-9a-f]+:[ 	]+4a869257[ 	]+sf.vfwcvt.f.bf16.v[ 	]+v4,v8
+[ 	]+[0-9a-f]+:[ 	]+4a8e9257[ 	]+sf.vfncvt.bf16.f.w[ 	]+v4,v8
+[ 	]+[0-9a-f]+:[ 	]+48869257[ 	]+sf.vfwcvt.f.bf16.v[ 	]+v4,v8,v0.t
+[ 	]+[0-9a-f]+:[ 	]+488e9257[ 	]+sf.vfncvt.bf16.f.w[ 	]+v4,v8,v0.t
+[ 	]+[0-9a-f]+:[ 	]+f2c4125b[ 	]+sf.vfwmacc.4x4x4[ 	]+v4,v8,v12
+[ 	]+[0-9a-f]+:[ 	]+8a86525b[ 	]+sf.vfnrclip.xu.f.qf[ 	]+v4,v8,fa2
+[ 	]+[0-9a-f]+:[ 	]+8e86525b[ 	]+sf.vfnrclip.x.f.qf[ 	]+v4,v8,fa2
+[ 	]+[0-9a-f]+:[ 	]+0ef5cfdb[ 	]+sf.vc.x[ 	]+0x3,0xf,0x1f,a1
+[ 	]+[0-9a-f]+:[ 	]+0ef7bfdb[ 	]+sf.vc.i[ 	]+0x3,0xf,0x1f,15
+[ 	]+[0-9a-f]+:[ 	]+2e208fdb[ 	]+sf.vc.vv[ 	]+0x3,0x1f,v2,v1
+[ 	]+[0-9a-f]+:[ 	]+2e25cfdb[ 	]+sf.vc.xv[ 	]+0x3,0x1f,v2,a1
+[ 	]+[0-9a-f]+:[ 	]+2e27bfdb[ 	]+sf.vc.iv[ 	]+0x3,0x1f,v2,15
+[ 	]+[0-9a-f]+:[ 	]+2e25dfdb[ 	]+sf.vc.fv[ 	]+0x1,0x1f,v2,fa1
+[ 	]+[0-9a-f]+:[ 	]+ae20805b[ 	]+sf.vc.vvv[ 	]+0x3,v0,v2,v1
+[ 	]+[0-9a-f]+:[ 	]+ae25c05b[ 	]+sf.vc.xvv[ 	]+0x3,v0,v2,a1
+[ 	]+[0-9a-f]+:[ 	]+ae27b05b[ 	]+sf.vc.ivv[ 	]+0x3,v0,v2,15
+[ 	]+[0-9a-f]+:[ 	]+ae25d05b[ 	]+sf.vc.fvv[ 	]+0x1,v0,v2,fa1
+[ 	]+[0-9a-f]+:[ 	]+fe20805b[ 	]+sf.vc.vvw[ 	]+0x3,v0,v2,v1
+[ 	]+[0-9a-f]+:[ 	]+fe25c05b[ 	]+sf.vc.xvw[ 	]+0x3,v0,v2,a1
+[ 	]+[0-9a-f]+:[ 	]+fe27b05b[ 	]+sf.vc.ivw[ 	]+0x3,v0,v2,15
+[ 	]+[0-9a-f]+:[ 	]+fe25d05b[ 	]+sf.vc.fvw[ 	]+0x1,v0,v2,fa1
+[ 	]+[0-9a-f]+:[ 	]+0cf5c05b[ 	]+sf.vc.v.x[ 	]+0x3,0xf,v0,a1
+[ 	]+[0-9a-f]+:[ 	]+0cf7b05b[ 	]+sf.vc.v.i[ 	]+0x3,0xf,v0,15
+[ 	]+[0-9a-f]+:[ 	]+2c20805b[ 	]+sf.vc.v.vv[ 	]+0x3,v0,v2,v1
+[ 	]+[0-9a-f]+:[ 	]+2c25c05b[ 	]+sf.vc.v.xv[ 	]+0x3,v0,v2,a1
+[ 	]+[0-9a-f]+:[ 	]+2c27b05b[ 	]+sf.vc.v.iv[ 	]+0x3,v0,v2,15
+[ 	]+[0-9a-f]+:[ 	]+2c25d05b[ 	]+sf.vc.v.fv[ 	]+0x1,v0,v2,fa1
+[ 	]+[0-9a-f]+:[ 	]+ac20805b[ 	]+sf.vc.v.vvv[ 	]+0x3,v0,v2,v1
+[ 	]+[0-9a-f]+:[ 	]+ac25c05b[ 	]+sf.vc.v.xvv[ 	]+0x3,v0,v2,a1
+[ 	]+[0-9a-f]+:[ 	]+ac27b05b[ 	]+sf.vc.v.ivv[ 	]+0x3,v0,v2,15
+[ 	]+[0-9a-f]+:[ 	]+ac25d05b[ 	]+sf.vc.v.fvv[ 	]+0x1,v0,v2,fa1
+[ 	]+[0-9a-f]+:[ 	]+fc20805b[ 	]+sf.vc.v.vvw[ 	]+0x3,v0,v2,v1
+[ 	]+[0-9a-f]+:[ 	]+fc25c05b[ 	]+sf.vc.v.xvw[ 	]+0x3,v0,v2,a1
+[ 	]+[0-9a-f]+:[ 	]+fc27b05b[ 	]+sf.vc.v.ivw[ 	]+0x3,v0,v2,15
+[ 	]+[0-9a-f]+:[ 	]+fc25d05b[ 	]+sf.vc.v.fvw[ 	]+0x1,v0,v2,fa1
diff --git a/gas/testsuite/gas/riscv/sifive-insns.s b/gas/testsuite/gas/riscv/sifive-insns.s
new file mode 100644
index 00000000000..9a8426e5618
--- /dev/null
+++ b/gas/testsuite/gas/riscv/sifive-insns.s
@@ -0,0 +1,104 @@
+	.attribute arch, "rv32iv_xsfvqmaccqoq_xsfvqmaccdod_xsfvfhbfmin_xsfvfwmaccqqq_xsfvfnrclipxfqf_xsfvcp"
+	.option push
+	.option arch, rv32i
+	# mnret
+	mnret
+	.insn r SYSTEM, 0x0, 0x38, x0, x0, x2
+
+	# cache control
+	cflush.d.l1	x10
+	cdiscard.d.l1	x10
+	cflush.i.l1
+	.insn i SYSTEM, 0, x0, x10, -0x40
+	.insn i SYSTEM, 0, x0, x10, -0x3E
+	.insn i SYSTEM, 0, x0, x0,  -0x3F
+
+	# xsfvqmaccqoq
+	.option push
+	.option arch, +xsfvqmaccqoq
+	sf.vqmaccu.4x8x4 v4, v8, v12
+	sf.vqmacc.4x8x4 v4, v8, v12
+	sf.vqmaccus.4x8x4 v4, v8, v12
+	sf.vqmaccsu.4x8x4 v4, v8, v12
+	#.insn r CUSTOM_2, 0x2, 0x79, v4, v8, v12
+	#.insn r CUSTOM_2, 0x2, 0x7b, v4, v8, v12
+	#.insn r 0x5b, 0x2, 0x7d, v4, v8, v12
+	#.insn r 0x5b, 0x2, 0x7f, v4, v8, v12
+	.option pop
+
+	# xsfvqmaccdod
+	.option push
+	.option arch, +xsfvqmaccdod
+	sf.vqmaccu.2x8x2 v4, v8, v12
+	sf.vqmacc.2x8x2 v4, v8, v12
+	sf.vqmaccus.2x8x2 v4, v8, v12
+	sf.vqmaccsu.2x8x2 v4, v8, v12
+	#.insn r CUSTOM_2, 0x2, 0x59, v4, v8, v12
+	#.insn r CUSTOM_2, 0x2, 0x5b, v4, v8, v12
+	#.insn r 0x5b, 0x2, 0x5d, v4, v8, v12
+	#.insn r 0x5b, 0x2, 0x5f, v4, v8, v12
+	.option pop
+
+	# xsfvfhbfmin
+	.option push
+	.option arch, +xsfvfhbfmin
+	sf.vfwcvt.f.bf16.v v4, v8
+	sf.vfncvt.bf16.f.w v4, v8
+	sf.vfwcvt.f.bf16.v v4, v8, v0.t
+	sf.vfncvt.bf16.f.w v4, v8, v0.t
+	#.insn r 0x57, 0x1, 0x25, v4, a3, v8
+	#.insn r 0x57, 0x1, 0x25, v4, t4, v8
+	#.insn r 0x57, 0x1, 0x24, v4, a3, v8
+	#.insn r 0x57, 0x1, 0x24, v4, t4, v8
+	.option pop
+
+	# xsfvfwmaccqqq
+	.option push
+	.option arch, +xsfvfwmaccqqq
+	sf.vfwmacc.4x4x4 v4, v8, v12
+	#.insn r CUSTOM_2, 0x1, 0x3c, v4, v8, v12
+	.option pop
+
+	# xsfvfnrclipxfqf
+	.option push
+	.option arch, +xsfvfnrclipxfqf
+	sf.vfnrclip.xu.f.qf v4, v8, f12
+	sf.vfnrclip.x.f.qf  v4, v8, f12
+	#.insn r CUSTOM_2, 0x1, 0x22, v4, f12, v8
+	#.insn r 0x57, 0x1, 0x23, v4, f12, v8
+	.option pop
+
+	# xsfvcp
+	.option push
+	.option arch, +xsfvcp
+	sf.vc.x 0x3, 0xf, 0x1f, a1
+	sf.vc.i 0x3, 0xf, 0x1f, 15
+	sf.vc.vv 0x3, 0x1f, v2, v1
+	sf.vc.xv 0x3, 0x1f, v2, a1
+	sf.vc.iv 0x3, 0x1f, v2, 15
+	sf.vc.fv 0x1, 0x1f, v2, fa1
+	sf.vc.vvv 0x3, v0, v2, v1
+	sf.vc.xvv 0x3, v0, v2, a1
+	sf.vc.ivv 0x3, v0, v2, 15
+	sf.vc.fvv 0x1, v0, v2, fa1
+	sf.vc.vvw 0x3, v0, v2, v1
+	sf.vc.xvw 0x3, v0, v2, a1
+	sf.vc.ivw 0x3, v0, v2, 15
+	sf.vc.fvw 0x1, v0, v2, fa1
+	sf.vc.v.x 0x3, 0xf, v0, a1
+	sf.vc.v.i 0x3, 0xf, v0, 15
+	sf.vc.v.vv 0x3, v0, v2, v1
+	sf.vc.v.xv 0x3, v0, v2, a1
+	sf.vc.v.iv 0x3, v0, v2, 15
+	sf.vc.v.fv 0x1, v0, v2, fa1
+	sf.vc.v.vvv 0x3, v0, v2, v1
+	sf.vc.v.xvv 0x3, v0, v2, a1
+	sf.vc.v.ivv 0x3, v0, v2, 15
+	sf.vc.v.fvv 0x1, v0, v2, fa1
+	sf.vc.v.vvw 0x3, v0, v2, v1
+	sf.vc.v.xvw 0x3, v0, v2, a1
+	sf.vc.v.ivw 0x3, v0, v2, 15
+	sf.vc.v.fvw 0x1, v0, v2, fa1
+	.option pop
+
+	.option pop
diff --git a/gas/testsuite/gas/riscv/vector-insns-zvamo.d b/gas/testsuite/gas/riscv/vector-insns-zvamo.d
new file mode 100644
index 00000000000..5e2cf995795
--- /dev/null
+++ b/gas/testsuite/gas/riscv/vector-insns-zvamo.d
@@ -0,0 +1,297 @@
+#as: -march=rv32i_zvamo
+#objdump: -dr
+
+.*:[ 	]+file format .*
+
+
+Disassembly of section .text:
+
+0+000 <.text>:
+[ 	]+[0-9a-f]+:[ 	]+0685822f[ 	]+vamoaddei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0285822f[ 	]+vamoaddei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0485822f[ 	]+vamoaddei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0085822f[ 	]+vamoaddei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0e85822f[ 	]+vamoswapei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0a85822f[ 	]+vamoswapei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0c85822f[ 	]+vamoswapei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0885822f[ 	]+vamoswapei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2685822f[ 	]+vamoxorei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2285822f[ 	]+vamoxorei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2485822f[ 	]+vamoxorei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2085822f[ 	]+vamoxorei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6685822f[ 	]+vamoandei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6285822f[ 	]+vamoandei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6485822f[ 	]+vamoandei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6085822f[ 	]+vamoandei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4685822f[ 	]+vamoorei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4285822f[ 	]+vamoorei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4485822f[ 	]+vamoorei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4085822f[ 	]+vamoorei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8685822f[ 	]+vamominei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8285822f[ 	]+vamominei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8485822f[ 	]+vamominei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8085822f[ 	]+vamominei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a685822f[ 	]+vamomaxei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a285822f[ 	]+vamomaxei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a485822f[ 	]+vamomaxei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a085822f[ 	]+vamomaxei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c685822f[ 	]+vamominuei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c285822f[ 	]+vamominuei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c485822f[ 	]+vamominuei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c085822f[ 	]+vamominuei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e685822f[ 	]+vamomaxuei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e285822f[ 	]+vamomaxuei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e485822f[ 	]+vamomaxuei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e085822f[ 	]+vamomaxuei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0685822f[ 	]+vamoaddei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0285822f[ 	]+vamoaddei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0485822f[ 	]+vamoaddei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0085822f[ 	]+vamoaddei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0e85822f[ 	]+vamoswapei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0a85822f[ 	]+vamoswapei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0c85822f[ 	]+vamoswapei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0885822f[ 	]+vamoswapei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2685822f[ 	]+vamoxorei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2285822f[ 	]+vamoxorei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2485822f[ 	]+vamoxorei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2085822f[ 	]+vamoxorei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6685822f[ 	]+vamoandei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6285822f[ 	]+vamoandei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6485822f[ 	]+vamoandei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6085822f[ 	]+vamoandei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4685822f[ 	]+vamoorei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4285822f[ 	]+vamoorei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4485822f[ 	]+vamoorei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4085822f[ 	]+vamoorei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8685822f[ 	]+vamominei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8285822f[ 	]+vamominei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8485822f[ 	]+vamominei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8085822f[ 	]+vamominei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a685822f[ 	]+vamomaxei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a285822f[ 	]+vamomaxei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a485822f[ 	]+vamomaxei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a085822f[ 	]+vamomaxei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c685822f[ 	]+vamominuei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c285822f[ 	]+vamominuei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c485822f[ 	]+vamominuei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c085822f[ 	]+vamominuei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e685822f[ 	]+vamomaxuei8.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e285822f[ 	]+vamomaxuei8.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e485822f[ 	]+vamomaxuei8.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e085822f[ 	]+vamomaxuei8.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0685d22f[ 	]+vamoaddei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0285d22f[ 	]+vamoaddei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0485d22f[ 	]+vamoaddei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0085d22f[ 	]+vamoaddei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0e85d22f[ 	]+vamoswapei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0a85d22f[ 	]+vamoswapei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0c85d22f[ 	]+vamoswapei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0885d22f[ 	]+vamoswapei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2685d22f[ 	]+vamoxorei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2285d22f[ 	]+vamoxorei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2485d22f[ 	]+vamoxorei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2085d22f[ 	]+vamoxorei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6685d22f[ 	]+vamoandei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6285d22f[ 	]+vamoandei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6485d22f[ 	]+vamoandei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6085d22f[ 	]+vamoandei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4685d22f[ 	]+vamoorei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4285d22f[ 	]+vamoorei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4485d22f[ 	]+vamoorei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4085d22f[ 	]+vamoorei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8685d22f[ 	]+vamominei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8285d22f[ 	]+vamominei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8485d22f[ 	]+vamominei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8085d22f[ 	]+vamominei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a685d22f[ 	]+vamomaxei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a285d22f[ 	]+vamomaxei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a485d22f[ 	]+vamomaxei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a085d22f[ 	]+vamomaxei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c685d22f[ 	]+vamominuei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c285d22f[ 	]+vamominuei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c485d22f[ 	]+vamominuei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c085d22f[ 	]+vamominuei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e685d22f[ 	]+vamomaxuei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e285d22f[ 	]+vamomaxuei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e485d22f[ 	]+vamomaxuei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e085d22f[ 	]+vamomaxuei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0685d22f[ 	]+vamoaddei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0285d22f[ 	]+vamoaddei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0485d22f[ 	]+vamoaddei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0085d22f[ 	]+vamoaddei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0e85d22f[ 	]+vamoswapei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0a85d22f[ 	]+vamoswapei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0c85d22f[ 	]+vamoswapei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0885d22f[ 	]+vamoswapei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2685d22f[ 	]+vamoxorei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2285d22f[ 	]+vamoxorei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2485d22f[ 	]+vamoxorei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2085d22f[ 	]+vamoxorei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6685d22f[ 	]+vamoandei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6285d22f[ 	]+vamoandei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6485d22f[ 	]+vamoandei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6085d22f[ 	]+vamoandei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4685d22f[ 	]+vamoorei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4285d22f[ 	]+vamoorei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4485d22f[ 	]+vamoorei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4085d22f[ 	]+vamoorei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8685d22f[ 	]+vamominei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8285d22f[ 	]+vamominei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8485d22f[ 	]+vamominei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8085d22f[ 	]+vamominei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a685d22f[ 	]+vamomaxei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a285d22f[ 	]+vamomaxei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a485d22f[ 	]+vamomaxei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a085d22f[ 	]+vamomaxei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c685d22f[ 	]+vamominuei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c285d22f[ 	]+vamominuei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c485d22f[ 	]+vamominuei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c085d22f[ 	]+vamominuei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e685d22f[ 	]+vamomaxuei16.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e285d22f[ 	]+vamomaxuei16.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e485d22f[ 	]+vamomaxuei16.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e085d22f[ 	]+vamomaxuei16.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0685e22f[ 	]+vamoaddei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0285e22f[ 	]+vamoaddei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0485e22f[ 	]+vamoaddei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0085e22f[ 	]+vamoaddei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0e85e22f[ 	]+vamoswapei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0a85e22f[ 	]+vamoswapei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0c85e22f[ 	]+vamoswapei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0885e22f[ 	]+vamoswapei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2685e22f[ 	]+vamoxorei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2285e22f[ 	]+vamoxorei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2485e22f[ 	]+vamoxorei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2085e22f[ 	]+vamoxorei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6685e22f[ 	]+vamoandei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6285e22f[ 	]+vamoandei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6485e22f[ 	]+vamoandei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6085e22f[ 	]+vamoandei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4685e22f[ 	]+vamoorei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4285e22f[ 	]+vamoorei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4485e22f[ 	]+vamoorei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4085e22f[ 	]+vamoorei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8685e22f[ 	]+vamominei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8285e22f[ 	]+vamominei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8485e22f[ 	]+vamominei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8085e22f[ 	]+vamominei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a685e22f[ 	]+vamomaxei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a285e22f[ 	]+vamomaxei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a485e22f[ 	]+vamomaxei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a085e22f[ 	]+vamomaxei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c685e22f[ 	]+vamominuei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c285e22f[ 	]+vamominuei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c485e22f[ 	]+vamominuei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c085e22f[ 	]+vamominuei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e685e22f[ 	]+vamomaxuei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e285e22f[ 	]+vamomaxuei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e485e22f[ 	]+vamomaxuei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e085e22f[ 	]+vamomaxuei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0685e22f[ 	]+vamoaddei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0285e22f[ 	]+vamoaddei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0485e22f[ 	]+vamoaddei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0085e22f[ 	]+vamoaddei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0e85e22f[ 	]+vamoswapei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0a85e22f[ 	]+vamoswapei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0c85e22f[ 	]+vamoswapei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0885e22f[ 	]+vamoswapei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2685e22f[ 	]+vamoxorei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2285e22f[ 	]+vamoxorei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2485e22f[ 	]+vamoxorei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2085e22f[ 	]+vamoxorei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6685e22f[ 	]+vamoandei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6285e22f[ 	]+vamoandei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6485e22f[ 	]+vamoandei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6085e22f[ 	]+vamoandei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4685e22f[ 	]+vamoorei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4285e22f[ 	]+vamoorei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4485e22f[ 	]+vamoorei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4085e22f[ 	]+vamoorei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8685e22f[ 	]+vamominei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8285e22f[ 	]+vamominei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8485e22f[ 	]+vamominei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8085e22f[ 	]+vamominei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a685e22f[ 	]+vamomaxei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a285e22f[ 	]+vamomaxei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a485e22f[ 	]+vamomaxei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a085e22f[ 	]+vamomaxei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c685e22f[ 	]+vamominuei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c285e22f[ 	]+vamominuei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c485e22f[ 	]+vamominuei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c085e22f[ 	]+vamominuei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e685e22f[ 	]+vamomaxuei32.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e285e22f[ 	]+vamomaxuei32.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e485e22f[ 	]+vamomaxuei32.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e085e22f[ 	]+vamomaxuei32.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0685f22f[ 	]+vamoaddei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0285f22f[ 	]+vamoaddei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0485f22f[ 	]+vamoaddei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0085f22f[ 	]+vamoaddei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0e85f22f[ 	]+vamoswapei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0a85f22f[ 	]+vamoswapei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0c85f22f[ 	]+vamoswapei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0885f22f[ 	]+vamoswapei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2685f22f[ 	]+vamoxorei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2285f22f[ 	]+vamoxorei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2485f22f[ 	]+vamoxorei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2085f22f[ 	]+vamoxorei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6685f22f[ 	]+vamoandei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6285f22f[ 	]+vamoandei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6485f22f[ 	]+vamoandei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6085f22f[ 	]+vamoandei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4685f22f[ 	]+vamoorei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4285f22f[ 	]+vamoorei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4485f22f[ 	]+vamoorei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4085f22f[ 	]+vamoorei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8685f22f[ 	]+vamominei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8285f22f[ 	]+vamominei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8485f22f[ 	]+vamominei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8085f22f[ 	]+vamominei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a685f22f[ 	]+vamomaxei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a285f22f[ 	]+vamomaxei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a485f22f[ 	]+vamomaxei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a085f22f[ 	]+vamomaxei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c685f22f[ 	]+vamominuei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c285f22f[ 	]+vamominuei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c485f22f[ 	]+vamominuei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c085f22f[ 	]+vamominuei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e685f22f[ 	]+vamomaxuei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e285f22f[ 	]+vamomaxuei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e485f22f[ 	]+vamomaxuei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e085f22f[ 	]+vamomaxuei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0685f22f[ 	]+vamoaddei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0285f22f[ 	]+vamoaddei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0485f22f[ 	]+vamoaddei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0085f22f[ 	]+vamoaddei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0e85f22f[ 	]+vamoswapei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0a85f22f[ 	]+vamoswapei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+0c85f22f[ 	]+vamoswapei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+0885f22f[ 	]+vamoswapei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2685f22f[ 	]+vamoxorei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2285f22f[ 	]+vamoxorei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+2485f22f[ 	]+vamoxorei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+2085f22f[ 	]+vamoxorei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6685f22f[ 	]+vamoandei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6285f22f[ 	]+vamoandei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+6485f22f[ 	]+vamoandei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+6085f22f[ 	]+vamoandei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4685f22f[ 	]+vamoorei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4285f22f[ 	]+vamoorei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+4485f22f[ 	]+vamoorei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+4085f22f[ 	]+vamoorei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8685f22f[ 	]+vamominei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8285f22f[ 	]+vamominei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+8485f22f[ 	]+vamominei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+8085f22f[ 	]+vamominei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a685f22f[ 	]+vamomaxei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a285f22f[ 	]+vamomaxei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+a485f22f[ 	]+vamomaxei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+a085f22f[ 	]+vamomaxei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c685f22f[ 	]+vamominuei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c285f22f[ 	]+vamominuei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+c485f22f[ 	]+vamominuei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+c085f22f[ 	]+vamominuei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e685f22f[ 	]+vamomaxuei64.v[ 	]+v4,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e285f22f[ 	]+vamomaxuei64.v[ 	]+zero,\(a1\),v8,v4
+[ 	]+[0-9a-f]+:[ 	]+e485f22f[ 	]+vamomaxuei64.v[ 	]+v4,\(a1\),v8,v4,v0.t
+[ 	]+[0-9a-f]+:[ 	]+e085f22f[ 	]+vamomaxuei64.v[ 	]+zero,\(a1\),v8,v4,v0.t
diff --git a/gas/testsuite/gas/riscv/vector-insns-zvamo.s b/gas/testsuite/gas/riscv/vector-insns-zvamo.s
new file mode 100644
index 00000000000..a0be2bcf0fa
--- /dev/null
+++ b/gas/testsuite/gas/riscv/vector-insns-zvamo.s
@@ -0,0 +1,311 @@
+	vamoaddei8.v v4, (a1), v8, v4
+	vamoaddei8.v x0, (a1), v8, v4
+	vamoaddei8.v v4, (a1), v8, v4, v0.t
+	vamoaddei8.v x0, (a1), v8, v4, v0.t
+	vamoswapei8.v v4, (a1), v8, v4
+	vamoswapei8.v x0, (a1), v8, v4
+	vamoswapei8.v v4, (a1), v8, v4, v0.t
+	vamoswapei8.v x0, (a1), v8, v4, v0.t
+
+	vamoxorei8.v v4, (a1), v8, v4
+	vamoxorei8.v x0, (a1), v8, v4
+	vamoxorei8.v v4, (a1), v8, v4, v0.t
+	vamoxorei8.v x0, (a1), v8, v4, v0.t
+	vamoandei8.v v4, (a1), v8, v4
+	vamoandei8.v x0, (a1), v8, v4
+	vamoandei8.v v4, (a1), v8, v4, v0.t
+	vamoandei8.v x0, (a1), v8, v4, v0.t
+	vamoorei8.v v4, (a1), v8, v4
+	vamoorei8.v x0, (a1), v8, v4
+	vamoorei8.v v4, (a1), v8, v4, v0.t
+	vamoorei8.v x0, (a1), v8, v4, v0.t
+
+	vamominei8.v v4, (a1), v8, v4
+	vamominei8.v x0, (a1), v8, v4
+	vamominei8.v v4, (a1), v8, v4, v0.t
+	vamominei8.v x0, (a1), v8, v4, v0.t
+	vamomaxei8.v v4, (a1), v8, v4
+	vamomaxei8.v x0, (a1), v8, v4
+	vamomaxei8.v v4, (a1), v8, v4, v0.t
+	vamomaxei8.v x0, (a1), v8, v4, v0.t
+	vamominuei8.v v4, (a1), v8, v4
+	vamominuei8.v x0, (a1), v8, v4
+	vamominuei8.v v4, (a1), v8, v4, v0.t
+	vamominuei8.v x0, (a1), v8, v4, v0.t
+	vamomaxuei8.v v4, (a1), v8, v4
+	vamomaxuei8.v x0, (a1), v8, v4
+	vamomaxuei8.v v4, (a1), v8, v4, v0.t
+	vamomaxuei8.v x0, (a1), v8, v4, v0.t
+
+	vamoaddei8.v v4, 0(a1), v8, v4
+	vamoaddei8.v x0, 0(a1), v8, v4
+	vamoaddei8.v v4, 0(a1), v8, v4, v0.t
+	vamoaddei8.v x0, 0(a1), v8, v4, v0.t
+	vamoswapei8.v v4, 0(a1), v8, v4
+	vamoswapei8.v x0, 0(a1), v8, v4
+	vamoswapei8.v v4, 0(a1), v8, v4, v0.t
+	vamoswapei8.v x0, 0(a1), v8, v4, v0.t
+
+	vamoxorei8.v v4, 0(a1), v8, v4
+	vamoxorei8.v x0, 0(a1), v8, v4
+	vamoxorei8.v v4, 0(a1), v8, v4, v0.t
+	vamoxorei8.v x0, 0(a1), v8, v4, v0.t
+	vamoandei8.v v4, 0(a1), v8, v4
+	vamoandei8.v x0, 0(a1), v8, v4
+	vamoandei8.v v4, 0(a1), v8, v4, v0.t
+	vamoandei8.v x0, 0(a1), v8, v4, v0.t
+	vamoorei8.v v4, 0(a1), v8, v4
+	vamoorei8.v x0, 0(a1), v8, v4
+	vamoorei8.v v4, 0(a1), v8, v4, v0.t
+	vamoorei8.v x0, 0(a1), v8, v4, v0.t
+
+	vamominei8.v v4, 0(a1), v8, v4
+	vamominei8.v x0, 0(a1), v8, v4
+	vamominei8.v v4, 0(a1), v8, v4, v0.t
+	vamominei8.v x0, 0(a1), v8, v4, v0.t
+	vamomaxei8.v v4, 0(a1), v8, v4
+	vamomaxei8.v x0, 0(a1), v8, v4
+	vamomaxei8.v v4, 0(a1), v8, v4, v0.t
+	vamomaxei8.v x0, 0(a1), v8, v4, v0.t
+	vamominuei8.v v4, 0(a1), v8, v4
+	vamominuei8.v x0, 0(a1), v8, v4
+	vamominuei8.v v4, 0(a1), v8, v4, v0.t
+	vamominuei8.v x0, 0(a1), v8, v4, v0.t
+	vamomaxuei8.v v4, 0(a1), v8, v4
+	vamomaxuei8.v x0, 0(a1), v8, v4
+	vamomaxuei8.v v4, 0(a1), v8, v4, v0.t
+	vamomaxuei8.v x0, 0(a1), v8, v4, v0.t
+
+	vamoaddei16.v v4, (a1), v8, v4
+	vamoaddei16.v x0, (a1), v8, v4
+	vamoaddei16.v v4, (a1), v8, v4, v0.t
+	vamoaddei16.v x0, (a1), v8, v4, v0.t
+	vamoswapei16.v v4, (a1), v8, v4
+	vamoswapei16.v x0, (a1), v8, v4
+	vamoswapei16.v v4, (a1), v8, v4, v0.t
+	vamoswapei16.v x0, (a1), v8, v4, v0.t
+
+	vamoxorei16.v v4, (a1), v8, v4
+	vamoxorei16.v x0, (a1), v8, v4
+	vamoxorei16.v v4, (a1), v8, v4, v0.t
+	vamoxorei16.v x0, (a1), v8, v4, v0.t
+	vamoandei16.v v4, (a1), v8, v4
+	vamoandei16.v x0, (a1), v8, v4
+	vamoandei16.v v4, (a1), v8, v4, v0.t
+	vamoandei16.v x0, (a1), v8, v4, v0.t
+	vamoorei16.v v4, (a1), v8, v4
+	vamoorei16.v x0, (a1), v8, v4
+	vamoorei16.v v4, (a1), v8, v4, v0.t
+	vamoorei16.v x0, (a1), v8, v4, v0.t
+
+	vamominei16.v v4, (a1), v8, v4
+	vamominei16.v x0, (a1), v8, v4
+	vamominei16.v v4, (a1), v8, v4, v0.t
+	vamominei16.v x0, (a1), v8, v4, v0.t
+	vamomaxei16.v v4, (a1), v8, v4
+	vamomaxei16.v x0, (a1), v8, v4
+	vamomaxei16.v v4, (a1), v8, v4, v0.t
+	vamomaxei16.v x0, (a1), v8, v4, v0.t
+	vamominuei16.v v4, (a1), v8, v4
+	vamominuei16.v x0, (a1), v8, v4
+	vamominuei16.v v4, (a1), v8, v4, v0.t
+	vamominuei16.v x0, (a1), v8, v4, v0.t
+	vamomaxuei16.v v4, (a1), v8, v4
+	vamomaxuei16.v x0, (a1), v8, v4
+	vamomaxuei16.v v4, (a1), v8, v4, v0.t
+	vamomaxuei16.v x0, (a1), v8, v4, v0.t
+
+	vamoaddei16.v v4, 0(a1), v8, v4
+	vamoaddei16.v x0, 0(a1), v8, v4
+	vamoaddei16.v v4, 0(a1), v8, v4, v0.t
+	vamoaddei16.v x0, 0(a1), v8, v4, v0.t
+	vamoswapei16.v v4, 0(a1), v8, v4
+	vamoswapei16.v x0, 0(a1), v8, v4
+	vamoswapei16.v v4, 0(a1), v8, v4, v0.t
+	vamoswapei16.v x0, 0(a1), v8, v4, v0.t
+
+	vamoxorei16.v v4, 0(a1), v8, v4
+	vamoxorei16.v x0, 0(a1), v8, v4
+	vamoxorei16.v v4, 0(a1), v8, v4, v0.t
+	vamoxorei16.v x0, 0(a1), v8, v4, v0.t
+	vamoandei16.v v4, 0(a1), v8, v4
+	vamoandei16.v x0, 0(a1), v8, v4
+	vamoandei16.v v4, 0(a1), v8, v4, v0.t
+	vamoandei16.v x0, 0(a1), v8, v4, v0.t
+	vamoorei16.v v4, 0(a1), v8, v4
+	vamoorei16.v x0, 0(a1), v8, v4
+	vamoorei16.v v4, 0(a1), v8, v4, v0.t
+	vamoorei16.v x0, 0(a1), v8, v4, v0.t
+
+	vamominei16.v v4, 0(a1), v8, v4
+	vamominei16.v x0, 0(a1), v8, v4
+	vamominei16.v v4, 0(a1), v8, v4, v0.t
+	vamominei16.v x0, 0(a1), v8, v4, v0.t
+	vamomaxei16.v v4, 0(a1), v8, v4
+	vamomaxei16.v x0, 0(a1), v8, v4
+	vamomaxei16.v v4, 0(a1), v8, v4, v0.t
+	vamomaxei16.v x0, 0(a1), v8, v4, v0.t
+	vamominuei16.v v4, 0(a1), v8, v4
+	vamominuei16.v x0, 0(a1), v8, v4
+	vamominuei16.v v4, 0(a1), v8, v4, v0.t
+	vamominuei16.v x0, 0(a1), v8, v4, v0.t
+	vamomaxuei16.v v4, 0(a1), v8, v4
+	vamomaxuei16.v x0, 0(a1), v8, v4
+	vamomaxuei16.v v4, 0(a1), v8, v4, v0.t
+	vamomaxuei16.v x0, 0(a1), v8, v4, v0.t
+
+	vamoaddei32.v v4, (a1), v8, v4
+	vamoaddei32.v x0, (a1), v8, v4
+	vamoaddei32.v v4, (a1), v8, v4, v0.t
+	vamoaddei32.v x0, (a1), v8, v4, v0.t
+	vamoswapei32.v v4, (a1), v8, v4
+	vamoswapei32.v x0, (a1), v8, v4
+	vamoswapei32.v v4, (a1), v8, v4, v0.t
+	vamoswapei32.v x0, (a1), v8, v4, v0.t
+
+	vamoxorei32.v v4, (a1), v8, v4
+	vamoxorei32.v x0, (a1), v8, v4
+	vamoxorei32.v v4, (a1), v8, v4, v0.t
+	vamoxorei32.v x0, (a1), v8, v4, v0.t
+	vamoandei32.v v4, (a1), v8, v4
+	vamoandei32.v x0, (a1), v8, v4
+	vamoandei32.v v4, (a1), v8, v4, v0.t
+	vamoandei32.v x0, (a1), v8, v4, v0.t
+	vamoorei32.v v4, (a1), v8, v4
+	vamoorei32.v x0, (a1), v8, v4
+	vamoorei32.v v4, (a1), v8, v4, v0.t
+	vamoorei32.v x0, (a1), v8, v4, v0.t
+
+	vamominei32.v v4, (a1), v8, v4
+	vamominei32.v x0, (a1), v8, v4
+	vamominei32.v v4, (a1), v8, v4, v0.t
+	vamominei32.v x0, (a1), v8, v4, v0.t
+	vamomaxei32.v v4, (a1), v8, v4
+	vamomaxei32.v x0, (a1), v8, v4
+	vamomaxei32.v v4, (a1), v8, v4, v0.t
+	vamomaxei32.v x0, (a1), v8, v4, v0.t
+	vamominuei32.v v4, (a1), v8, v4
+	vamominuei32.v x0, (a1), v8, v4
+	vamominuei32.v v4, (a1), v8, v4, v0.t
+	vamominuei32.v x0, (a1), v8, v4, v0.t
+	vamomaxuei32.v v4, (a1), v8, v4
+	vamomaxuei32.v x0, (a1), v8, v4
+	vamomaxuei32.v v4, (a1), v8, v4, v0.t
+	vamomaxuei32.v x0, (a1), v8, v4, v0.t
+
+	vamoaddei32.v v4, 0(a1), v8, v4
+	vamoaddei32.v x0, 0(a1), v8, v4
+	vamoaddei32.v v4, 0(a1), v8, v4, v0.t
+	vamoaddei32.v x0, 0(a1), v8, v4, v0.t
+	vamoswapei32.v v4, 0(a1), v8, v4
+	vamoswapei32.v x0, 0(a1), v8, v4
+	vamoswapei32.v v4, 0(a1), v8, v4, v0.t
+	vamoswapei32.v x0, 0(a1), v8, v4, v0.t
+
+	vamoxorei32.v v4, 0(a1), v8, v4
+	vamoxorei32.v x0, 0(a1), v8, v4
+	vamoxorei32.v v4, 0(a1), v8, v4, v0.t
+	vamoxorei32.v x0, 0(a1), v8, v4, v0.t
+	vamoandei32.v v4, 0(a1), v8, v4
+	vamoandei32.v x0, 0(a1), v8, v4
+	vamoandei32.v v4, 0(a1), v8, v4, v0.t
+	vamoandei32.v x0, 0(a1), v8, v4, v0.t
+	vamoorei32.v v4, 0(a1), v8, v4
+	vamoorei32.v x0, 0(a1), v8, v4
+	vamoorei32.v v4, 0(a1), v8, v4, v0.t
+	vamoorei32.v x0, 0(a1), v8, v4, v0.t
+
+	vamominei32.v v4, 0(a1), v8, v4
+	vamominei32.v x0, 0(a1), v8, v4
+	vamominei32.v v4, 0(a1), v8, v4, v0.t
+	vamominei32.v x0, 0(a1), v8, v4, v0.t
+	vamomaxei32.v v4, 0(a1), v8, v4
+	vamomaxei32.v x0, 0(a1), v8, v4
+	vamomaxei32.v v4, 0(a1), v8, v4, v0.t
+	vamomaxei32.v x0, 0(a1), v8, v4, v0.t
+	vamominuei32.v v4, 0(a1), v8, v4
+	vamominuei32.v x0, 0(a1), v8, v4
+	vamominuei32.v v4, 0(a1), v8, v4, v0.t
+	vamominuei32.v x0, 0(a1), v8, v4, v0.t
+	vamomaxuei32.v v4, 0(a1), v8, v4
+	vamomaxuei32.v x0, 0(a1), v8, v4
+	vamomaxuei32.v v4, 0(a1), v8, v4, v0.t
+	vamomaxuei32.v x0, 0(a1), v8, v4, v0.t
+
+	vamoaddei64.v v4, (a1), v8, v4
+	vamoaddei64.v x0, (a1), v8, v4
+	vamoaddei64.v v4, (a1), v8, v4, v0.t
+	vamoaddei64.v x0, (a1), v8, v4, v0.t
+	vamoswapei64.v v4, (a1), v8, v4
+	vamoswapei64.v x0, (a1), v8, v4
+	vamoswapei64.v v4, (a1), v8, v4, v0.t
+	vamoswapei64.v x0, (a1), v8, v4, v0.t
+
+	vamoxorei64.v v4, (a1), v8, v4
+	vamoxorei64.v x0, (a1), v8, v4
+	vamoxorei64.v v4, (a1), v8, v4, v0.t
+	vamoxorei64.v x0, (a1), v8, v4, v0.t
+	vamoandei64.v v4, (a1), v8, v4
+	vamoandei64.v x0, (a1), v8, v4
+	vamoandei64.v v4, (a1), v8, v4, v0.t
+	vamoandei64.v x0, (a1), v8, v4, v0.t
+	vamoorei64.v v4, (a1), v8, v4
+	vamoorei64.v x0, (a1), v8, v4
+	vamoorei64.v v4, (a1), v8, v4, v0.t
+	vamoorei64.v x0, (a1), v8, v4, v0.t
+
+	vamominei64.v v4, (a1), v8, v4
+	vamominei64.v x0, (a1), v8, v4
+	vamominei64.v v4, (a1), v8, v4, v0.t
+	vamominei64.v x0, (a1), v8, v4, v0.t
+	vamomaxei64.v v4, (a1), v8, v4
+	vamomaxei64.v x0, (a1), v8, v4
+	vamomaxei64.v v4, (a1), v8, v4, v0.t
+	vamomaxei64.v x0, (a1), v8, v4, v0.t
+	vamominuei64.v v4, (a1), v8, v4
+	vamominuei64.v x0, (a1), v8, v4
+	vamominuei64.v v4, (a1), v8, v4, v0.t
+	vamominuei64.v x0, (a1), v8, v4, v0.t
+	vamomaxuei64.v v4, (a1), v8, v4
+	vamomaxuei64.v x0, (a1), v8, v4
+	vamomaxuei64.v v4, (a1), v8, v4, v0.t
+	vamomaxuei64.v x0, (a1), v8, v4, v0.t
+
+	vamoaddei64.v v4, 0(a1), v8, v4
+	vamoaddei64.v x0, 0(a1), v8, v4
+	vamoaddei64.v v4, 0(a1), v8, v4, v0.t
+	vamoaddei64.v x0, 0(a1), v8, v4, v0.t
+	vamoswapei64.v v4, 0(a1), v8, v4
+	vamoswapei64.v x0, 0(a1), v8, v4
+	vamoswapei64.v v4, 0(a1), v8, v4, v0.t
+	vamoswapei64.v x0, 0(a1), v8, v4, v0.t
+
+	vamoxorei64.v v4, 0(a1), v8, v4
+	vamoxorei64.v x0, 0(a1), v8, v4
+	vamoxorei64.v v4, 0(a1), v8, v4, v0.t
+	vamoxorei64.v x0, 0(a1), v8, v4, v0.t
+	vamoandei64.v v4, 0(a1), v8, v4
+	vamoandei64.v x0, 0(a1), v8, v4
+	vamoandei64.v v4, 0(a1), v8, v4, v0.t
+	vamoandei64.v x0, 0(a1), v8, v4, v0.t
+	vamoorei64.v v4, 0(a1), v8, v4
+	vamoorei64.v x0, 0(a1), v8, v4
+	vamoorei64.v v4, 0(a1), v8, v4, v0.t
+	vamoorei64.v x0, 0(a1), v8, v4, v0.t
+
+	vamominei64.v v4, 0(a1), v8, v4
+	vamominei64.v x0, 0(a1), v8, v4
+	vamominei64.v v4, 0(a1), v8, v4, v0.t
+	vamominei64.v x0, 0(a1), v8, v4, v0.t
+	vamomaxei64.v v4, 0(a1), v8, v4
+	vamomaxei64.v x0, 0(a1), v8, v4
+	vamomaxei64.v v4, 0(a1), v8, v4, v0.t
+	vamomaxei64.v x0, 0(a1), v8, v4, v0.t
+	vamominuei64.v v4, 0(a1), v8, v4
+	vamominuei64.v x0, 0(a1), v8, v4
+	vamominuei64.v v4, 0(a1), v8, v4, v0.t
+	vamominuei64.v x0, 0(a1), v8, v4, v0.t
+	vamomaxuei64.v v4, 0(a1), v8, v4
+	vamomaxuei64.v x0, 0(a1), v8, v4
+	vamomaxuei64.v v4, 0(a1), v8, v4, v0.t
+	vamomaxuei64.v x0, 0(a1), v8, v4, v0.t
diff --git a/gdb/aclocal.m4 b/gdb/aclocal.m4
index 3ed4a58d39f..7947ec1939a 100644
--- a/gdb/aclocal.m4
+++ b/gdb/aclocal.m4
@@ -1,6 +1,6 @@
-# generated automatically by aclocal 1.15.1 -*- Autoconf -*-
+# generated automatically by aclocal 1.16.1 -*- Autoconf -*-
 
-# Copyright (C) 1996-2017 Free Software Foundation, Inc.
+# Copyright (C) 1996-2018 Free Software Foundation, Inc.
 
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -14,7 +14,7 @@
 m4_ifndef([AC_CONFIG_MACRO_DIRS], [m4_defun([_AM_CONFIG_MACRO_DIRS], [])m4_defun([AC_CONFIG_MACRO_DIRS], [_AM_CONFIG_MACRO_DIRS($@)])])
 # AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-
 
-# Copyright (C) 2001-2017 Free Software Foundation, Inc.
+# Copyright (C) 2001-2018 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -66,7 +66,7 @@ am_aux_dir=`cd "$ac_aux_dir" && pwd`
 
 # AM_CONDITIONAL                                            -*- Autoconf -*-
 
-# Copyright (C) 1997-2017 Free Software Foundation, Inc.
+# Copyright (C) 1997-2018 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -97,7 +97,7 @@ AC_CONFIG_COMMANDS_PRE(
 Usually this means the macro was only invoked conditionally.]])
 fi])])
 
-# Copyright (C) 2001-2017 Free Software Foundation, Inc.
+# Copyright (C) 2001-2018 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -121,7 +121,7 @@ AC_SUBST([install_sh])])
 # Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-
 # From Jim Meyering
 
-# Copyright (C) 1996-2017 Free Software Foundation, Inc.
+# Copyright (C) 1996-2018 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -154,7 +154,7 @@ AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])
 ]
 )
 
-# Copyright (C) 2001-2017 Free Software Foundation, Inc.
+# Copyright (C) 2001-2018 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -182,7 +182,7 @@ fi
 INSTALL_STRIP_PROGRAM="\$(install_sh) -c -s"
 AC_SUBST([INSTALL_STRIP_PROGRAM])])
 
-# Copyright (C) 2006-2017 Free Software Foundation, Inc.
+# Copyright (C) 2006-2018 Free Software Foundation, Inc.
 #
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
diff --git a/gdb/config.in b/gdb/config.in
index cd9f252eba1..0146bc38cff 100644
--- a/gdb/config.in
+++ b/gdb/config.in
@@ -370,9 +370,6 @@
 /* Define if sys/ptrace.h defines the PT_GETDBREGS request. */
 #undef HAVE_PT_GETDBREGS
 
-/* Define if sys/ptrace.h defines the PT_GETXMMREGS request. */
-#undef HAVE_PT_GETXMMREGS
-
 /* Define to 1 if you have the `pt_insn_event' function. */
 #undef HAVE_PT_INSN_EVENT
 
diff --git a/gdb/configure b/gdb/configure
index b34baff13be..4752626ed0a 100755
--- a/gdb/configure
+++ b/gdb/configure
@@ -903,8 +903,13 @@ with_jit_reader_dir
 with_expat
 with_libexpat_prefix
 with_libexpat_type
+with_gmp_include
+with_gmp_lib
+with_gmp
 with_libgmp_prefix
 with_libgmp_type
+with_mpfr_include
+with_mpfr_lib
 with_mpfr
 with_libmpfr_prefix
 with_libmpfr_type
@@ -1653,9 +1658,14 @@ Optional Packages:
   --with-libexpat-prefix[=DIR]  search for libexpat in DIR/include and DIR/lib
   --without-libexpat-prefix     don't search for libexpat in includedir and libdir
   --with-libexpat-type=TYPE     type of library to search for (auto/static/shared)
+  --with-gmp-include=DIR  GMP include directory
+  --with-gmp-lib=DIR      GMP lib directory
+  --with-gmp=DIR          GMP install directory
   --with-libgmp-prefix[=DIR]  search for libgmp in DIR/include and DIR/lib
   --without-libgmp-prefix     don't search for libgmp in includedir and libdir
   --with-libgmp-type=TYPE     type of library to search for (auto/static/shared)
+  --with-mpfr-include=DIR MPFR include directory
+  --with-mpfr-lib=DIR     MPFR lib directory
   --with-mpfr             include MPFR support (auto/yes/no)
   --with-libmpfr-prefix[=DIR]  search for libmpfr in DIR/include and DIR/lib
   --without-libmpfr-prefix     don't search for libmpfr in includedir and libdir
@@ -10044,6 +10054,32 @@ done
   fi
 fi
 
+
+# Check whether --with-gmp_include was given.
+if test "${with_gmp_include+set}" = set; then :
+  withval=$with_gmp_include; CPPFLAGS="$CPPFLAGS -I$withval"
+fi
+
+
+# Check whether --with-gmp_lib was given.
+if test "${with_gmp_lib+set}" = set; then :
+  withval=$with_gmp_lib; LDFLAGS="$LDFLAGS -L$withval"
+fi
+
+
+# Check whether --with-gmp was given.
+if test "${with_gmp+set}" = set; then :
+  withval=$with_gmp;
+   if test -z "$with_gmp_lib" && test -z "$with_gmp_include" ; then
+      CPPFLAGS="$CPPFLAGS -I$withval/include"
+      LDFLAGS="$LDFLAGS -L$withval/lib"
+   else
+      as_fn_error $? "Do not use --with-gmp and --with-gmp-include/--with-gmp-lib options simultaneously." "$LINENO" 5
+   fi
+
+fi
+
+
 # Verify that we have a usable GMP library.
 
 
@@ -10528,6 +10564,19 @@ if test "$HAVE_LIBGMP" != yes; then
 fi
 
 
+# Check whether --with-mpfr_include was given.
+if test "${with_mpfr_include+set}" = set; then :
+  withval=$with_mpfr_include; CPPFLAGS="-I$withval $CPPFLAGS"
+fi
+
+
+# Check whether --with-mpfr_lib was given.
+if test "${with_mpfr_lib+set}" = set; then :
+  withval=$with_mpfr_lib; LDFLAGS="-L$withval $LDFLAGS"
+fi
+
+
+
 # Check whether --with-mpfr was given.
 if test "${with_mpfr+set}" = set; then :
   withval=$with_mpfr;
diff --git a/gdb/configure.ac b/gdb/configure.ac
index bc8925ddd69..f8c5aa0f1b0 100644
--- a/gdb/configure.ac
+++ b/gdb/configure.ac
@@ -665,6 +665,22 @@ else
   fi
 fi
 
+AC_ARG_WITH(gmp_include,
+   [  --with-gmp-include=DIR  GMP include directory ],
+   CPPFLAGS="$CPPFLAGS -I$withval")
+AC_ARG_WITH(gmp_lib,
+   [  --with-gmp-lib=DIR      GMP lib directory ],
+   LDFLAGS="$LDFLAGS -L$withval")
+AC_ARG_WITH(gmp,
+  [  --with-gmp=DIR          GMP install directory ], [
+   if test -z "$with_gmp_lib" && test -z "$with_gmp_include" ; then
+      CPPFLAGS="$CPPFLAGS -I$withval/include"
+      LDFLAGS="$LDFLAGS -L$withval/lib"
+   else
+      AC_MSG_ERROR([Do not use --with-gmp and --with-gmp-include/--with-gmp-lib options simultaneously.])
+   fi
+  ])
+
 # Verify that we have a usable GMP library.
 AC_LIB_HAVE_LINKFLAGS([gmp], [], [#include <gmp.h>],
                       [mpz_t n;
@@ -673,6 +689,15 @@ if test "$HAVE_LIBGMP" != yes; then
   AC_MSG_ERROR([GMP is missing or unusable])
 fi
 
+AC_ARG_WITH([mpfr_include],
+            [AC_HELP_STRING([--with-mpfr-include=DIR],
+                            [MPFR include directory])],
+            [CPPFLAGS="-I$withval $CPPFLAGS"])
+AC_ARG_WITH([mpfr_lib],
+            [AC_HELP_STRING([--with-mpfr-lib=DIR],
+                            [MPFR lib directory])],
+            [LDFLAGS="-L$withval $LDFLAGS"])
+
 AC_ARG_WITH(mpfr,
   AS_HELP_STRING([--with-mpfr], [include MPFR support (auto/yes/no)]),
   [], [with_mpfr=auto])
diff --git a/gnulib/import/libc-config.h b/gnulib/import/libc-config.h
index e3571ee4c94..44c3d0f50fc 100644
--- a/gnulib/import/libc-config.h
+++ b/gnulib/import/libc-config.h
@@ -189,3 +189,7 @@
 #define SHLIB_COMPAT(lib, introduced, obsoleted) 0
 #define compat_symbol(lib, local, symbol, version) extern int dummy
 #define versioned_symbol(lib, local, symbol, version) extern int dummy
+
+#ifndef __THROWNL
+#define __THROWNL __THROW
+#endif
diff --git a/include/elf/riscv.h b/include/elf/riscv.h
index d0acf6886d8..1e023d4b255 100644
--- a/include/elf/riscv.h
+++ b/include/elf/riscv.h
@@ -89,6 +89,9 @@ START_RELOC_NUMBERS (elf_riscv_reloc_type)
   RELOC_NUMBER (R_RISCV_SET32, 56)
   RELOC_NUMBER (R_RISCV_32_PCREL, 57)
   RELOC_NUMBER (R_RISCV_IRELATIVE, 58)
+
+  RELOC_NUMBER (R_RISCV_SET_ULEB128, 59)
+  RELOC_NUMBER (R_RISCV_SUB_ULEB128, 60)
 END_RELOC_NUMBERS (R_RISCV_max)
 
 /* Processor specific flags for the ELF header e_flags field.  */
diff --git a/include/opcode/riscv-opc.h b/include/opcode/riscv-opc.h
index 3eea33a5dae..5d55effef6b 100644
--- a/include/opcode/riscv-opc.h
+++ b/include/opcode/riscv-opc.h
@@ -705,6 +705,78 @@
 #define MASK_AES64DSM  0xfe00707f
 #define MATCH_AES64DS 0x3a000033
 #define MASK_AES64DS  0xfe00707f
+#define MATCH_FLH 0x1007
+#define MASK_FLH 0x707f
+#define MATCH_FSH 0x1027
+#define MASK_FSH 0x707f
+#define MATCH_FADD_H 0x4000053
+#define MASK_FADD_H 0xfe00007f
+#define MATCH_FSUB_H 0xc000053
+#define MASK_FSUB_H 0xfe00007f
+#define MATCH_FMUL_H 0x14000053
+#define MASK_FMUL_H 0xfe00007f
+#define MATCH_FDIV_H 0x1c000053
+#define MASK_FDIV_H 0xfe00007f
+#define MATCH_FSGNJ_H 0x24000053
+#define MASK_FSGNJ_H 0xfe00707f
+#define MATCH_FSGNJN_H 0x24001053
+#define MASK_FSGNJN_H 0xfe00707f
+#define MATCH_FSGNJX_H 0x24002053
+#define MASK_FSGNJX_H 0xfe00707f
+#define MATCH_FMIN_H 0x2c000053
+#define MASK_FMIN_H 0xfe00707f
+#define MATCH_FMAX_H 0x2c001053
+#define MASK_FMAX_H 0xfe00707f
+#define MATCH_FCVT_S_H 0x40200053
+#define MASK_FCVT_S_H 0xfff0007f
+#define MATCH_FCVT_H_S 0x44000053
+#define MASK_FCVT_H_S 0xfff0007f
+#define MATCH_FCVT_D_H 0x42200053
+#define MASK_FCVT_D_H 0xfff0007f
+#define MATCH_FCVT_H_D 0x44100053
+#define MASK_FCVT_H_D 0xfff0007f
+#define MATCH_FCVT_Q_H 0x46200053
+#define MASK_FCVT_Q_H 0xfff0007f
+#define MATCH_FCVT_H_Q 0x44300053
+#define MASK_FCVT_H_Q 0xfff0007f
+#define MATCH_FSQRT_H 0x5c000053
+#define MASK_FSQRT_H 0xfff0007f
+#define MATCH_FLE_H 0xa4000053
+#define MASK_FLE_H 0xfe00707f
+#define MATCH_FLT_H 0xa4001053
+#define MASK_FLT_H 0xfe00707f
+#define MATCH_FEQ_H 0xa4002053
+#define MASK_FEQ_H 0xfe00707f
+#define MATCH_FCVT_W_H 0xc4000053
+#define MASK_FCVT_W_H 0xfff0007f
+#define MATCH_FCVT_WU_H 0xc4100053
+#define MASK_FCVT_WU_H 0xfff0007f
+#define MATCH_FCVT_L_H 0xc4200053
+#define MASK_FCVT_L_H 0xfff0007f
+#define MATCH_FCVT_LU_H 0xc4300053
+#define MASK_FCVT_LU_H 0xfff0007f
+#define MATCH_FMV_X_H 0xe4000053
+#define MASK_FMV_X_H 0xfff0707f
+#define MATCH_FCLASS_H 0xe4001053
+#define MASK_FCLASS_H 0xfff0707f
+#define MATCH_FCVT_H_W 0xd4000053
+#define MASK_FCVT_H_W 0xfff0007f
+#define MATCH_FCVT_H_WU 0xd4100053
+#define MASK_FCVT_H_WU 0xfff0007f
+#define MATCH_FCVT_H_L 0xd4200053
+#define MASK_FCVT_H_L 0xfff0007f
+#define MATCH_FCVT_H_LU 0xd4300053
+#define MASK_FCVT_H_LU 0xfff0007f
+#define MATCH_FMV_H_X 0xf4000053
+#define MASK_FMV_H_X 0xfff0707f
+#define MATCH_FMADD_H 0x4000043
+#define MASK_FMADD_H 0x600007f
+#define MATCH_FMSUB_H 0x4000047
+#define MASK_FMSUB_H 0x600007f
+#define MATCH_FNMSUB_H 0x400004b
+#define MASK_FNMSUB_H 0x600007f
+#define MATCH_FNMADD_H 0x400004f
+#define MASK_FNMADD_H 0x600007f
 #define MATCH_VSETVL  0x80007057
 #define MASK_VSETVL  0xfe00707f
 #define MATCH_VSETIVLI  0xc0007057
@@ -1331,6 +1403,78 @@
 #define MASK_VS4RV  0xfff0707f
 #define MATCH_VS8RV  0xe2800027
 #define MASK_VS8RV  0xfff0707f
+#define MATCH_VAMOADDEI8V 0x0000002f
+#define MASK_VAMOADDEI8V 0xf800707f
+#define MATCH_VAMOSWAPEI8V 0x0800002f
+#define MASK_VAMOSWAPEI8V 0xf800707f
+#define MATCH_VAMOXOREI8V 0x2000002f
+#define MASK_VAMOXOREI8V 0xf800707f
+#define MATCH_VAMOANDEI8V 0x6000002f
+#define MASK_VAMOANDEI8V 0xf800707f
+#define MATCH_VAMOOREI8V 0x4000002f
+#define MASK_VAMOOREI8V  0xf800707f
+#define MATCH_VAMOMINEI8V 0x8000002f
+#define MASK_VAMOMINEI8V 0xf800707f
+#define MATCH_VAMOMAXEI8V 0xa000002f
+#define MASK_VAMOMAXEI8V 0xf800707f
+#define MATCH_VAMOMINUEI8V 0xc000002f
+#define MASK_VAMOMINUEI8V 0xf800707f
+#define MATCH_VAMOMAXUEI8V 0xe000002f
+#define MASK_VAMOMAXUEI8V 0xf800707f
+#define MATCH_VAMOADDEI16V 0x0000502f
+#define MASK_VAMOADDEI16V 0xf800707f
+#define MATCH_VAMOSWAPEI16V 0x0800502f
+#define MASK_VAMOSWAPEI16V 0xf800707f
+#define MATCH_VAMOXOREI16V 0x2000502f
+#define MASK_VAMOXOREI16V 0xf800707f
+#define MATCH_VAMOANDEI16V 0x6000502f
+#define MASK_VAMOANDEI16V 0xf800707f
+#define MATCH_VAMOOREI16V 0x4000502f
+#define MASK_VAMOOREI16V 0xf800707f
+#define MATCH_VAMOMINEI16V 0x8000502f
+#define MASK_VAMOMINEI16V 0xf800707f
+#define MATCH_VAMOMAXEI16V 0xa000502f
+#define MASK_VAMOMAXEI16V 0xf800707f
+#define MATCH_VAMOMINUEI16V 0xc000502f
+#define MASK_VAMOMINUEI16V 0xf800707f
+#define MATCH_VAMOMAXUEI16V 0xe000502f
+#define MASK_VAMOMAXUEI16V 0xf800707f
+#define MATCH_VAMOADDEI32V 0x0000602f
+#define MASK_VAMOADDEI32V 0xf800707f
+#define MATCH_VAMOSWAPEI32V 0x0800602f
+#define MASK_VAMOSWAPEI32V 0xf800707f
+#define MATCH_VAMOXOREI32V 0x2000602f
+#define MASK_VAMOXOREI32V 0xf800707f
+#define MATCH_VAMOANDEI32V 0x6000602f
+#define MASK_VAMOANDEI32V 0xf800707f
+#define MATCH_VAMOOREI32V 0x4000602f
+#define MASK_VAMOOREI32V 0xf800707f
+#define MATCH_VAMOMINEI32V 0x8000602f
+#define MASK_VAMOMINEI32V 0xf800707f
+#define MATCH_VAMOMAXEI32V 0xa000602f
+#define MASK_VAMOMAXEI32V 0xf800707f
+#define MATCH_VAMOMINUEI32V 0xc000602f
+#define MASK_VAMOMINUEI32V 0xf800707f
+#define MATCH_VAMOMAXUEI32V 0xe000602f
+#define MASK_VAMOMAXUEI32V 0xf800707f
+#define MATCH_VAMOADDEI64V 0x0000702f
+#define MASK_VAMOADDEI64V 0xf800707f
+#define MATCH_VAMOSWAPEI64V 0x0800702f
+#define MASK_VAMOSWAPEI64V 0xf800707f
+#define MATCH_VAMOXOREI64V 0x2000702f
+#define MASK_VAMOXOREI64V 0xf800707f
+#define MATCH_VAMOANDEI64V 0x6000702f
+#define MASK_VAMOANDEI64V 0xf800707f
+#define MATCH_VAMOOREI64V 0x4000702f
+#define MASK_VAMOOREI64V 0xf800707f
+#define MATCH_VAMOMINEI64V 0x8000702f
+#define MASK_VAMOMINEI64V 0xf800707f
+#define MATCH_VAMOMAXEI64V 0xa000702f
+#define MASK_VAMOMAXEI64V 0xf800707f
+#define MATCH_VAMOMINUEI64V 0xc000702f
+#define MASK_VAMOMINUEI64V 0xf800707f
+#define MATCH_VAMOMAXUEI64V 0xe000702f
+#define MASK_VAMOMAXUEI64V 0xf800707f
 #define MATCH_VADDVV  0x00000057
 #define MASK_VADDVV  0xfc00707f
 #define MATCH_VADDVX  0x00004057
@@ -2045,6 +2189,103 @@
 #define MASK_CBO_INVAL 0xfff07fff
 #define MATCH_CBO_ZERO 0x40200f
 #define MASK_CBO_ZERO 0xfff07fff
+/* SiFive MNRET instruction.  */
+#define MATCH_MNRET 0x70200073
+#define MASK_MNRET 0xffffffff
+/* SiFive cache control instruction.  */
+#define MATCH_CFLUSH_D_L1 0xfc000073
+#define MASK_CFLUSH_D_L1 0xfff07fff
+#define MATCH_CDISCARD_D_L1 0xfc200073
+#define MASK_CDISCARD_D_L1 0xfff07fff
+#define MATCH_CFLUSH_I_L1 0xfc100073
+#define MASK_CFLUSH_I_L1 0xffffffff
+/* SiFive custom int8 matrix-multiply instruction.  */
+#define MATCH_SFVQMACCU4X8X4 0xf200205b
+#define MASK_SFVQMACCU4X8X4 0xfe00707f
+#define MATCH_SFVQMACC4X8X4 0xf600205b
+#define MASK_SFVQMACC4X8X4 0xfe00707f
+#define MATCH_SFVQMACCUS4X8X4 0xfa00205b
+#define MASK_SFVQMACCUS4X8X4 0xfe00707f
+#define MATCH_SFVQMACCSU4X8X4 0xfe00205b
+#define MASK_SFVQMACCSU4X8X4 0xfe00707f
+#define MATCH_SFVQMACCU2X8X2 0xb200205b
+#define MASK_SFVQMACCU2X8X2 0xfe00707f
+#define MATCH_SFVQMACC2X8X2 0xb600205b
+#define MASK_SFVQMACC2X8X2 0xfe00707f
+#define MATCH_SFVQMACCUS2X8X2 0xba00205b
+#define MASK_SFVQMACCUS2X8X2 0xfe00707f
+#define MATCH_SFVQMACCSU2X8X2 0xbe00205b
+#define MASK_SFVQMACCSU2X8X2 0xfe00707f
+/* SiFive custom minimal bfloat16 vector instruction.  */
+#define MATCH_SFVFWCVTFBF16V 0x48069057
+#define MASK_SFVFWCVTFBF16V 0xfc0ff07f
+#define MATCH_SFVFNCVTBF16FW 0x480e9057
+#define MASK_SFVFNCVTBF16FW 0xfc0ff07f
+/* SiFive custom bfloat16 matrix arithmetic vector instructions.  */
+#define MATCH_SFVFWMACC4X4X4 0xf200105b
+#define MASK_SFVFWMACC4X4X4 0xfe00707f
+/* SiFive custom bfloat16 requantization vector instructions.  */
+#define MATCH_SFVFNRCLIPXUFQF 0x8a00505b
+#define MASK_SFVFNRCLIPXUFQF 0xfe00707f
+#define MATCH_SFVFNRCLIPXFQF 0x8e00505b
+#define MASK_SFVFNRCLIPXFQF 0xfe00707f
+/* Sifive vector coprocessor interface instruction.  */
+#define MATCH_SF_VC_X 0x0200405b
+#define MASK_SF_VC_X 0xf200707f
+#define MATCH_SF_VC_V_X 0x0000405b
+#define MASK_SF_VC_V_X 0xf200707f
+#define MATCH_SF_VC_I 0x0200305b
+#define MASK_SF_VC_I 0xf200707f
+#define MATCH_SF_VC_V_I 0x0000305b
+#define MASK_SF_VC_V_I 0xf200707f
+#define MATCH_SF_VC_VV 0x2200005b
+#define MASK_SF_VC_VV 0xf200707f
+#define MATCH_SF_VC_V_VV 0x2000005b
+#define MASK_SF_VC_V_VV 0xf200707f
+#define MATCH_SF_VC_XV 0x2200405b
+#define MASK_SF_VC_XV 0xf200707f
+#define MATCH_SF_VC_V_XV 0x2000405b
+#define MASK_SF_VC_V_XV 0xf200707f
+#define MATCH_SF_VC_IV 0x2200305b
+#define MASK_SF_VC_IV 0xf200707f
+#define MATCH_SF_VC_V_IV 0x2000305b
+#define MASK_SF_VC_V_IV 0xf200707f
+#define MATCH_SF_VC_FV 0x2a00505b
+#define MASK_SF_VC_FV 0xfa00707f
+#define MATCH_SF_VC_V_FV 0x2800505b
+#define MASK_SF_VC_V_FV 0xfa00707f
+#define MATCH_SF_VC_VVV 0xa200005b
+#define MASK_SF_VC_VVV 0xf200707f
+#define MATCH_SF_VC_V_VVV 0xa000005b
+#define MASK_SF_VC_V_VVV 0xf200707f
+#define MATCH_SF_VC_XVV 0xa200405b
+#define MASK_SF_VC_XVV 0xf200707f
+#define MATCH_SF_VC_V_XVV 0xa000405b
+#define MASK_SF_VC_V_XVV 0xf200707f
+#define MATCH_SF_VC_IVV 0xa200305b
+#define MASK_SF_VC_IVV 0xf200707f
+#define MATCH_SF_VC_V_IVV 0xa000305b
+#define MASK_SF_VC_V_IVV 0xf200707f
+#define MATCH_SF_VC_FVV 0xaa00505b
+#define MASK_SF_VC_FVV 0xfa00707f
+#define MATCH_SF_VC_V_FVV 0xa800505b
+#define MASK_SF_VC_V_FVV 0xfa00707f
+#define MATCH_SF_VC_VVW 0xf200005b
+#define MASK_SF_VC_VVW 0xf200707f
+#define MATCH_SF_VC_V_VVW 0xf000005b
+#define MASK_SF_VC_V_VVW 0xf200707f
+#define MATCH_SF_VC_XVW 0xf200405b
+#define MASK_SF_VC_XVW 0xf200707f
+#define MATCH_SF_VC_V_XVW 0xf000405b
+#define MASK_SF_VC_V_XVW 0xf200707f
+#define MATCH_SF_VC_IVW 0xf200305b
+#define MASK_SF_VC_IVW 0xf200707f
+#define MATCH_SF_VC_V_IVW 0xf000305b
+#define MASK_SF_VC_V_IVW 0xf200707f
+#define MATCH_SF_VC_FVW 0xfa00505b
+#define MASK_SF_VC_FVW 0xfa00707f
+#define MATCH_SF_VC_V_FVW 0xf800505b
+#define MASK_SF_VC_V_FVW 0xfa00707f
 /* Unprivileged Counter/Timers CSR addresses.  */
 #define CSR_CYCLE 0xc00
 #define CSR_TIME 0xc01
@@ -2393,6 +2634,51 @@
 #define CSR_VL 0xc20
 #define CSR_VTYPE 0xc21
 #define CSR_VLENB 0xc22
+/* SiFive CLIC CSR addresses.  */
+#define CSR_MTVT 0x307
+#define CSR_MNXTI 0x345
+#define CSR_MINTSTATUS 0x346
+#define CSR_MSCRATCHCSW 0x348
+/* SiFive RNMI CSR addresses.  */
+#define CSR_MNSCRATCH 0x350
+#define CSR_MNEPC 0x351
+#define CSR_MNCAUSE 0x352
+#define CSR_MNSTATUS 0x353
+/* SiFive World Guard Security CSR addresses.  */
+#define CSR_MLWID 0x7e0
+#define CSR_MWIDDELEG 0x7e1
+#define CSR_SLWID 0x9e0
+/* SiFive Sscofpmf CSR addresses.  */
+#define CSR_SCOUNTOVF 0xda0
+#define CSR_MHPMEVENT3H 0x723
+#define CSR_MHPMEVENT4H 0x724
+#define CSR_MHPMEVENT5H 0x725
+#define CSR_MHPMEVENT6H 0x726
+#define CSR_MHPMEVENT7H 0x727
+#define CSR_MHPMEVENT8H 0x728
+#define CSR_MHPMEVENT9H 0x729
+#define CSR_MHPMEVENT10H 0x72a
+#define CSR_MHPMEVENT11H 0x72b
+#define CSR_MHPMEVENT12H 0x72c
+#define CSR_MHPMEVENT13H 0x72d
+#define CSR_MHPMEVENT14H 0x72e
+#define CSR_MHPMEVENT15H 0x72f
+#define CSR_MHPMEVENT16H 0x730
+#define CSR_MHPMEVENT17H 0x731
+#define CSR_MHPMEVENT18H 0x732
+#define CSR_MHPMEVENT19H 0x733
+#define CSR_MHPMEVENT20H 0x734
+#define CSR_MHPMEVENT21H 0x735
+#define CSR_MHPMEVENT22H 0x736
+#define CSR_MHPMEVENT23H 0x737
+#define CSR_MHPMEVENT24H 0x738
+#define CSR_MHPMEVENT25H 0x739
+#define CSR_MHPMEVENT26H 0x73a
+#define CSR_MHPMEVENT27H 0x73b
+#define CSR_MHPMEVENT28H 0x73c
+#define CSR_MHPMEVENT29H 0x73d
+#define CSR_MHPMEVENT30H 0x73e
+#define CSR_MHPMEVENT31H 0x73f
 #endif /* RISCV_ENCODING_H */
 #ifdef DECLARE_INSN
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
@@ -2720,6 +3006,46 @@ DECLARE_INSN(hsv_b, MATCH_HSV_B, MASK_HSV_B)
 DECLARE_INSN(hsv_h, MATCH_HSV_H, MASK_HSV_H)
 DECLARE_INSN(hsv_w, MATCH_HSV_W, MASK_HSV_W)
 DECLARE_INSN(hsv_d, MATCH_HSV_D, MASK_HSV_D)
+DECLARE_INSN(flh, MATCH_FLH, MASK_FLH)
+DECLARE_INSN(fsh, MATCH_FSH, MASK_FSH)
+DECLARE_INSN(fadd_h, MATCH_FADD_H, MASK_FADD_H)
+DECLARE_INSN(fsub_h, MATCH_FSUB_H, MASK_FSUB_H)
+DECLARE_INSN(fmul_h, MATCH_FMUL_H, MASK_FMUL_H)
+DECLARE_INSN(fdiv_h, MATCH_FDIV_H, MASK_FDIV_H)
+DECLARE_INSN(fsgnj_h, MATCH_FSGNJ_H, MASK_FSGNJ_H)
+DECLARE_INSN(fsgnjn_h, MATCH_FSGNJN_H, MASK_FSGNJN_H)
+DECLARE_INSN(fsgnjx_h, MATCH_FSGNJX_H, MASK_FSGNJX_H)
+DECLARE_INSN(fmin_h, MATCH_FMIN_H, MASK_FMIN_H)
+DECLARE_INSN(fmax_h, MATCH_FMAX_H, MASK_FMAX_H)
+DECLARE_INSN(fcvt_s_h, MATCH_FCVT_S_H, MASK_FCVT_S_H)
+DECLARE_INSN(fcvt_h_s, MATCH_FCVT_H_S, MASK_FCVT_H_S)
+DECLARE_INSN(fcvt_d_h, MATCH_FCVT_D_H, MASK_FCVT_D_H)
+DECLARE_INSN(fcvt_h_d, MATCH_FCVT_H_D, MASK_FCVT_H_D)
+DECLARE_INSN(fcvt_q_h, MATCH_FCVT_Q_H, MASK_FCVT_Q_H)
+DECLARE_INSN(fcvt_h_q, MATCH_FCVT_H_Q, MASK_FCVT_H_Q)
+DECLARE_INSN(fsqrt_h, MATCH_FSQRT_H, MASK_FSQRT_H)
+DECLARE_INSN(fle_h, MATCH_FLE_H, MASK_FLE_H)
+DECLARE_INSN(flt_h, MATCH_FLT_H, MASK_FLT_H)
+DECLARE_INSN(feq_h, MATCH_FEQ_H, MASK_FEQ_H)
+DECLARE_INSN(fcvt_w_h, MATCH_FCVT_W_H, MASK_FCVT_W_H)
+DECLARE_INSN(fcvt_wu_h, MATCH_FCVT_WU_H, MASK_FCVT_WU_H)
+DECLARE_INSN(fcvt_l_h, MATCH_FCVT_L_H, MASK_FCVT_L_H)
+DECLARE_INSN(fcvt_lu_h, MATCH_FCVT_LU_H, MASK_FCVT_LU_H)
+DECLARE_INSN(fmv_x_h, MATCH_FMV_X_H, MASK_FMV_X_H)
+DECLARE_INSN(fclass_h, MATCH_FCLASS_H, MASK_FCLASS_H)
+DECLARE_INSN(fcvt_h_w, MATCH_FCVT_H_W, MASK_FCVT_H_W)
+DECLARE_INSN(fcvt_h_wu, MATCH_FCVT_H_WU, MASK_FCVT_H_WU)
+DECLARE_INSN(fcvt_h_l, MATCH_FCVT_H_L, MASK_FCVT_H_L)
+DECLARE_INSN(fcvt_h_lu, MATCH_FCVT_H_LU, MASK_FCVT_H_LU)
+DECLARE_INSN(fmv_h_x, MATCH_FMV_H_X, MASK_FMV_H_X)
+DECLARE_INSN(fmadd_h, MATCH_FMADD_H, MASK_FMADD_H)
+DECLARE_INSN(fmsub_h, MATCH_FMSUB_H, MASK_FMSUB_H)
+DECLARE_INSN(fnmsub_h, MATCH_FNMSUB_H, MASK_FNMSUB_H)
+DECLARE_INSN(fnmadd_h, MATCH_FNMADD_H, MASK_FNMADD_H)
+DECLARE_INSN(mnret, MATCH_MNRET, MASK_MNRET)
+DECLARE_INSN(cflush_d_l1, MATCH_CFLUSH_D_L1, MASK_CFLUSH_D_L1)
+DECLARE_INSN(cdiscard_d_l1, MATCH_CDISCARD_D_L1, MASK_CDISCARD_D_L1)
+DECLARE_INSN(cflush_i_l1, MATCH_CFLUSH_I_L1, MASK_CFLUSH_I_L1)
 #endif /* DECLARE_INSN */
 #ifdef DECLARE_CSR
 /* Unprivileged Counter/Timers CSRs.  */
@@ -2997,31 +3323,31 @@ DECLARE_CSR(mhpmevent29, CSR_MHPMEVENT29, CSR_CLASS_I, PRIV_SPEC_CLASS_1P9P1, PR
 DECLARE_CSR(mhpmevent30, CSR_MHPMEVENT30, CSR_CLASS_I, PRIV_SPEC_CLASS_1P9P1, PRIV_SPEC_CLASS_DRAFT)
 DECLARE_CSR(mhpmevent31, CSR_MHPMEVENT31, CSR_CLASS_I, PRIV_SPEC_CLASS_1P9P1, PRIV_SPEC_CLASS_DRAFT)
 /* Privileged Hypervisor CSRs.  */
-DECLARE_CSR(hstatus, CSR_HSTATUS, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(hedeleg, CSR_HEDELEG, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(hideleg, CSR_HIDELEG, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(hie, CSR_HIE, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(hcounteren, CSR_HCOUNTEREN, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(hgeie, CSR_HGEIE, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(htval, CSR_HTVAL, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(hip, CSR_HIP, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(hvip, CSR_HVIP, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(htinst, CSR_HTINST, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(hgeip, CSR_HGEIP, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(henvcfg, CSR_HENVCFG, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(henvcfgh, CSR_HENVCFGH, CSR_CLASS_I_32, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(hgatp, CSR_HGATP, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(htimedelta, CSR_HTIMEDELTA, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(htimedeltah, CSR_HTIMEDELTAH, CSR_CLASS_I_32, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(vsstatus, CSR_VSSTATUS, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(vsie, CSR_VSIE, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(vstvec, CSR_VSTVEC, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(vsscratch, CSR_VSSCRATCH, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(vsepc, CSR_VSEPC, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(vscause, CSR_VSCAUSE, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(vstval, CSR_VSTVAL, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(vsip, CSR_VSIP, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
-DECLARE_CSR(vsatp, CSR_VSATP, CSR_CLASS_I, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(hstatus, CSR_HSTATUS, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(hedeleg, CSR_HEDELEG, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(hideleg, CSR_HIDELEG, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(hie, CSR_HIE, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(hcounteren, CSR_HCOUNTEREN, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(hgeie, CSR_HGEIE, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(htval, CSR_HTVAL, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(hip, CSR_HIP, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(hvip, CSR_HVIP, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(htinst, CSR_HTINST, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(hgeip, CSR_HGEIP, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(henvcfg, CSR_HENVCFG, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(henvcfgh, CSR_HENVCFGH, CSR_CLASS_H_32, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(hgatp, CSR_HGATP, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(htimedelta, CSR_HTIMEDELTA, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(htimedeltah, CSR_HTIMEDELTAH, CSR_CLASS_H_32, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(vsstatus, CSR_VSSTATUS, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(vsie, CSR_VSIE, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(vstvec, CSR_VSTVEC, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(vsscratch, CSR_VSSCRATCH, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(vsepc, CSR_VSEPC, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(vscause, CSR_VSCAUSE, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(vstval, CSR_VSTVAL, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(vsip, CSR_VSIP, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
+DECLARE_CSR(vsatp, CSR_VSATP, CSR_CLASS_H, PRIV_SPEC_CLASS_1P12, PRIV_SPEC_CLASS_DRAFT)
 /* Dropped CSRs.  */
 DECLARE_CSR(mbase, CSR_MBASE, CSR_CLASS_I, PRIV_SPEC_CLASS_1P9P1, PRIV_SPEC_CLASS_1P10)
 DECLARE_CSR(mbound, CSR_MBOUND, CSR_CLASS_I, PRIV_SPEC_CLASS_1P9P1, PRIV_SPEC_CLASS_1P10)
@@ -3070,6 +3396,51 @@ DECLARE_CSR(vcsr, CSR_VCSR, CSR_CLASS_V, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_N
 DECLARE_CSR(vl, CSR_VL, CSR_CLASS_V, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
 DECLARE_CSR(vtype, CSR_VTYPE, CSR_CLASS_V, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
 DECLARE_CSR(vlenb, CSR_VLENB, CSR_CLASS_V, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+/* SiFive CLIC CSRs.  */
+DECLARE_CSR(mtvt, CSR_MTVT, CSR_CLASS_CLIC, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mnxti, CSR_MNXTI, CSR_CLASS_CLIC, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mintstatus, CSR_MINTSTATUS, CSR_CLASS_CLIC, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mscratchcsw, CSR_MSCRATCHCSW, CSR_CLASS_CLIC, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+/* SiFive RNMI CSRs.  */
+DECLARE_CSR(mnscratch, CSR_MNSCRATCH, CSR_CLASS_RNMI, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mnepc, CSR_MNEPC, CSR_CLASS_RNMI, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mncause, CSR_MNCAUSE, CSR_CLASS_RNMI, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mnstatus, CSR_MNSTATUS, CSR_CLASS_RNMI, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+/* SiFive World Guard Security CSRs.  */
+DECLARE_CSR(mlwid, CSR_MLWID, CSR_CLASS_WORLDGUARD, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mwiddeleg, CSR_MWIDDELEG, CSR_CLASS_WORLDGUARD, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(slwid, CSR_SLWID, CSR_CLASS_WORLDGUARD, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+/* SiFive Sscofpmf CSRs.  */
+DECLARE_CSR(scountovf, CSR_SCOUNTOVF, CSR_CLASS_SSCOFPMF, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent3h, CSR_MHPMEVENT3H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent4h, CSR_MHPMEVENT4H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent5h, CSR_MHPMEVENT5H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent6h, CSR_MHPMEVENT6H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent7h, CSR_MHPMEVENT7H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent8h, CSR_MHPMEVENT8H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent9h, CSR_MHPMEVENT9H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent10h, CSR_MHPMEVENT10H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent11h, CSR_MHPMEVENT11H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent12h, CSR_MHPMEVENT12H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent13h, CSR_MHPMEVENT13H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent14h, CSR_MHPMEVENT14H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent15h, CSR_MHPMEVENT15H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent16h, CSR_MHPMEVENT16H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent17h, CSR_MHPMEVENT17H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent18h, CSR_MHPMEVENT18H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent19h, CSR_MHPMEVENT19H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent20h, CSR_MHPMEVENT20H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent21h, CSR_MHPMEVENT21H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent22h, CSR_MHPMEVENT22H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent23h, CSR_MHPMEVENT23H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent24h, CSR_MHPMEVENT24H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent25h, CSR_MHPMEVENT25H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent26h, CSR_MHPMEVENT26H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent27h, CSR_MHPMEVENT27H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent28h, CSR_MHPMEVENT28H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent29h, CSR_MHPMEVENT29H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent30h, CSR_MHPMEVENT30H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
+DECLARE_CSR(mhpmevent31h, CSR_MHPMEVENT31H, CSR_CLASS_SSCOFPMF_32, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)
 #endif /* DECLARE_CSR */
 #ifdef DECLARE_CSR_ALIAS
 DECLARE_CSR_ALIAS(ubadaddr, CSR_UTVAL, CSR_CLASS_I, PRIV_SPEC_CLASS_1P9P1, PRIV_SPEC_CLASS_1P10)
diff --git a/include/opcode/riscv.h b/include/opcode/riscv.h
index b769769b4ec..4aed2b479f4 100644
--- a/include/opcode/riscv.h
+++ b/include/opcode/riscv.h
@@ -312,6 +312,12 @@ static const char * const riscv_pred_succ[16] =
 #define NVECR 32
 #define NVECM 1
 
+/* SiFive fields.  */
+#define OP_MASK_XO2		0x3
+#define OP_SH_XO2		26
+#define OP_MASK_XO1		0x1
+#define OP_SH_XO1		26
+
 /* ABI names for selected x-registers.  */
 
 #define X_RA 1
@@ -370,6 +376,10 @@ enum riscv_insn_class
   INSN_CLASS_F_OR_ZFINX,
   INSN_CLASS_D_OR_ZDINX,
   INSN_CLASS_Q_OR_ZQINX,
+  INSN_CLASS_ZFH,
+  INSN_CLASS_ZFHMIN,
+  INSN_CLASS_D_AND_ZFHMIN,
+  INSN_CLASS_Q_AND_ZFHMIN,
   INSN_CLASS_ZBA,
   INSN_CLASS_ZBB,
   INSN_CLASS_ZBC,
@@ -387,10 +397,19 @@ enum riscv_insn_class
   INSN_CLASS_ZKND_OR_ZKNE,
   INSN_CLASS_V,
   INSN_CLASS_ZVEF,
+  INSN_CLASS_ZVAMO,
+  INSN_CLASS_ZVLSSEG,
   INSN_CLASS_SVINVAL,
   INSN_CLASS_ZICBOM,
   INSN_CLASS_ZICBOP,
   INSN_CLASS_ZICBOZ,
+  INSN_CLASS_H,
+  INSN_CLASS_XSFVQMACCQOQ,
+  INSN_CLASS_XSFVQMACCDOD,
+  INSN_CLASS_XSFVFHBFMIN,
+  INSN_CLASS_XSFVFWNACCQQQ,
+  INSN_CLASS_XSFVFNRCLIPXFQF,
+  INSN_CLASS_XSFVCP,
 };
 
 /* This structure holds information for a particular instruction.  */
@@ -498,6 +517,8 @@ enum
   M_SEXTH,
   M_VMSGE,
   M_VMSGEU,
+  M_FLH,
+  M_FSH,
   M_NUM_MACROS
 };
 
diff --git a/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp b/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp
index 272424b33e3..10133072f1a 100644
--- a/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp
+++ b/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp
@@ -119,6 +119,7 @@ proc run_relax_twice_test {} {
 }
 
 if [istarget "riscv*-*-*"] {
+    run_dump_test "uleb128"
     run_dump_test "align-small-region"
     run_dump_test "call-relax"
     run_dump_test "pcgp-relax-01"
diff --git a/ld/testsuite/ld-riscv-elf/uleb128.d b/ld/testsuite/ld-riscv-elf/uleb128.d
new file mode 100644
index 00000000000..a921478e988
--- /dev/null
+++ b/ld/testsuite/ld-riscv-elf/uleb128.d
@@ -0,0 +1,18 @@
+#source: uleb128.s
+#as: -march=rv32ic
+#ld: -melf32lriscv
+#objdump: -d
+
+.*:[ 	]+file format .*
+
+Disassembly of section .text:
+
+.* <_start>:
+.*jal.*<bar>
+.*jal.*<bar>
+.*jal.*<bar>
+.*jal.*<bar>
+.*jal.*<bar>
+.*jal.*<bar>
+.*:[ 	]+0e0c.*
+#pass
diff --git a/ld/testsuite/ld-riscv-elf/uleb128.s b/ld/testsuite/ld-riscv-elf/uleb128.s
new file mode 100644
index 00000000000..f7d23be1635
--- /dev/null
+++ b/ld/testsuite/ld-riscv-elf/uleb128.s
@@ -0,0 +1,18 @@
+.text
+.globl bar
+.globl _start
+.option rvc
+.align 2
+_start:
+.L0:
+        .rept 6
+        call bar
+        .endr
+.align 2
+.L1:
+        .uleb128 .L1 - .L0
+        .uleb128 .L2 - .L0
+.L2:
+.align 2
+bar:
+        nop
diff --git a/opcodes/riscv-dis.c b/opcodes/riscv-dis.c
index 57b798d8e14..11d5a0e7597 100644
--- a/opcodes/riscv-dis.c
+++ b/opcodes/riscv-dis.c
@@ -525,6 +525,29 @@ print_insn_args (const char *oparg, insn_t l, bfd_vma pc, disassemble_info *info
 	  print (info->stream, "%d", rs1);
 	  break;
 
+	case 'X': /* SiFive */
+	  switch (*++oparg)
+	    {
+	    case 'd':
+	      print (info->stream, "0x%x", (int) EXTRACT_OPERAND (RD, l));
+	      break;
+	    case 't':
+	      print (info->stream, "0x%x", (int) EXTRACT_OPERAND (RS2, l));
+	      break;
+	    case 'O':
+	      switch (*++oparg)
+		{
+		case '2':
+		  print (info->stream, "0x%x", (int) EXTRACT_OPERAND (XO2, l));
+		  break;
+		case '1':
+		  print (info->stream, "0x%x", (int) EXTRACT_OPERAND (XO1, l));
+		  break;
+		}
+	      break;
+	    }
+	  break;
+
 	default:
 	  /* xgettext:c-format */
 	  print (info->stream, _("# internal error, undefined modifier (%c)"),
diff --git a/opcodes/riscv-opc.c b/opcodes/riscv-opc.c
index 523d1652267..f934eee5023 100644
--- a/opcodes/riscv-opc.c
+++ b/opcodes/riscv-opc.c
@@ -572,6 +572,71 @@ const struct riscv_opcode riscv_opcodes[] =
 {"remw",      64, INSN_CLASS_M,   "d,s,t",     MATCH_REMW, MASK_REMW, match_opcode, 0 },
 {"remuw",     64, INSN_CLASS_M,   "d,s,t",     MATCH_REMUW, MASK_REMUW, match_opcode, 0 },
 
+/* Half-precision floating-point instruction subset.  */
+{"flh",        0, INSN_CLASS_ZFHMIN,  "D,o(s)",    MATCH_FLH, MASK_FLH, match_opcode, INSN_DREF|INSN_2_BYTE },
+{"flh",        0, INSN_CLASS_ZFHMIN,  "D,A,s",     0, (int) M_FLH, match_never, INSN_MACRO },
+{"fsh",        0, INSN_CLASS_ZFHMIN,  "T,q(s)",    MATCH_FSH, MASK_FSH, match_opcode, INSN_DREF|INSN_2_BYTE },
+{"fsh",        0, INSN_CLASS_ZFHMIN,  "T,A,s",     0, (int) M_FSH, match_never, INSN_MACRO },
+{"fmv.h",      0, INSN_CLASS_ZFH,  "D,U",       MATCH_FSGNJ_H, MASK_FSGNJ_H, match_rs1_eq_rs2, INSN_ALIAS },
+{"fneg.h",     0, INSN_CLASS_ZFH,  "D,U",       MATCH_FSGNJN_H, MASK_FSGNJN_H, match_rs1_eq_rs2, INSN_ALIAS },
+{"fabs.h",     0, INSN_CLASS_ZFH,  "D,U",       MATCH_FSGNJX_H, MASK_FSGNJX_H, match_rs1_eq_rs2, INSN_ALIAS },
+{"fsgnj.h",    0, INSN_CLASS_ZFH,  "D,S,T",     MATCH_FSGNJ_H, MASK_FSGNJ_H, match_opcode, 0 },
+{"fsgnjn.h",   0, INSN_CLASS_ZFH,  "D,S,T",     MATCH_FSGNJN_H, MASK_FSGNJN_H, match_opcode, 0 },
+{"fsgnjx.h",   0, INSN_CLASS_ZFH,  "D,S,T",     MATCH_FSGNJX_H, MASK_FSGNJX_H, match_opcode, 0 },
+{"fadd.h",     0, INSN_CLASS_ZFH,  "D,S,T",     MATCH_FADD_H|MASK_RM, MASK_FADD_H|MASK_RM, match_opcode, 0 },
+{"fadd.h",     0, INSN_CLASS_ZFH,  "D,S,T,m",   MATCH_FADD_H, MASK_FADD_H, match_opcode, 0 },
+{"fsub.h",     0, INSN_CLASS_ZFH,  "D,S,T",     MATCH_FSUB_H|MASK_RM, MASK_FSUB_H|MASK_RM, match_opcode, 0 },
+{"fsub.h",     0, INSN_CLASS_ZFH,  "D,S,T,m",   MATCH_FSUB_H, MASK_FSUB_H, match_opcode, 0 },
+{"fmul.h",     0, INSN_CLASS_ZFH,  "D,S,T",     MATCH_FMUL_H|MASK_RM, MASK_FMUL_H|MASK_RM, match_opcode, 0 },
+{"fmul.h",     0, INSN_CLASS_ZFH,  "D,S,T,m",   MATCH_FMUL_H, MASK_FMUL_H, match_opcode, 0 },
+{"fdiv.h",     0, INSN_CLASS_ZFH,  "D,S,T",     MATCH_FDIV_H|MASK_RM, MASK_FDIV_H|MASK_RM, match_opcode, 0 },
+{"fdiv.h",     0, INSN_CLASS_ZFH,  "D,S,T,m",   MATCH_FDIV_H, MASK_FDIV_H, match_opcode, 0 },
+{"fsqrt.h",    0, INSN_CLASS_ZFH,  "D,S",       MATCH_FSQRT_H|MASK_RM, MASK_FSQRT_H|MASK_RM, match_opcode, 0 },
+{"fsqrt.h",    0, INSN_CLASS_ZFH,  "D,S,m",     MATCH_FSQRT_H, MASK_FSQRT_H, match_opcode, 0 },
+{"fmin.h",     0, INSN_CLASS_ZFH,  "D,S,T",     MATCH_FMIN_H, MASK_FMIN_H, match_opcode, 0 },
+{"fmax.h",     0, INSN_CLASS_ZFH,  "D,S,T",     MATCH_FMAX_H, MASK_FMAX_H, match_opcode, 0 },
+{"fmadd.h",    0, INSN_CLASS_ZFH,  "D,S,T,R",   MATCH_FMADD_H|MASK_RM, MASK_FMADD_H|MASK_RM, match_opcode, 0 },
+{"fmadd.h",    0, INSN_CLASS_ZFH,  "D,S,T,R,m", MATCH_FMADD_H, MASK_FMADD_H, match_opcode, 0 },
+{"fnmadd.h",   0, INSN_CLASS_ZFH,  "D,S,T,R",   MATCH_FNMADD_H|MASK_RM, MASK_FNMADD_H|MASK_RM, match_opcode, 0 },
+{"fnmadd.h",   0, INSN_CLASS_ZFH,  "D,S,T,R,m", MATCH_FNMADD_H, MASK_FNMADD_H, match_opcode, 0 },
+{"fmsub.h",    0, INSN_CLASS_ZFH,  "D,S,T,R",   MATCH_FMSUB_H|MASK_RM, MASK_FMSUB_H|MASK_RM, match_opcode, 0 },
+{"fmsub.h",    0, INSN_CLASS_ZFH,  "D,S,T,R,m", MATCH_FMSUB_H, MASK_FMSUB_H, match_opcode, 0 },
+{"fnmsub.h",   0, INSN_CLASS_ZFH,  "D,S,T,R",   MATCH_FNMSUB_H|MASK_RM, MASK_FNMSUB_H|MASK_RM, match_opcode, 0 },
+{"fnmsub.h",   0, INSN_CLASS_ZFH,  "D,S,T,R,m", MATCH_FNMSUB_H, MASK_FNMSUB_H, match_opcode, 0 },
+{"fcvt.w.h",   0, INSN_CLASS_ZFH,  "d,S",       MATCH_FCVT_W_H|MASK_RM, MASK_FCVT_W_H|MASK_RM, match_opcode, 0 },
+{"fcvt.w.h",   0, INSN_CLASS_ZFH,  "d,S,m",     MATCH_FCVT_W_H, MASK_FCVT_W_H, match_opcode, 0 },
+{"fcvt.wu.h",  0, INSN_CLASS_ZFH,  "d,S",       MATCH_FCVT_WU_H|MASK_RM, MASK_FCVT_WU_H|MASK_RM, match_opcode, 0 },
+{"fcvt.wu.h",  0, INSN_CLASS_ZFH,  "d,S,m",     MATCH_FCVT_WU_H, MASK_FCVT_WU_H, match_opcode, 0 },
+{"fcvt.h.w",   0, INSN_CLASS_ZFH,  "D,s",       MATCH_FCVT_H_W|MASK_RM, MASK_FCVT_H_W|MASK_RM, match_opcode, 0 },
+{"fcvt.h.w",   0, INSN_CLASS_ZFH,  "D,s,m",     MATCH_FCVT_H_W, MASK_FCVT_H_W, match_opcode, 0 },
+{"fcvt.h.wu",  0, INSN_CLASS_ZFH,  "D,s",       MATCH_FCVT_H_WU|MASK_RM, MASK_FCVT_H_WU|MASK_RM, match_opcode, 0 },
+{"fcvt.h.wu",  0, INSN_CLASS_ZFH,  "D,s,m",     MATCH_FCVT_H_WU, MASK_FCVT_H_WU, match_opcode, 0 },
+{"fcvt.s.h",   0, INSN_CLASS_ZFHMIN,  "D,S",       MATCH_FCVT_S_H, MASK_FCVT_S_H|MASK_RM, match_opcode, 0 },
+{"fcvt.d.h",   0, INSN_CLASS_D_AND_ZFHMIN,  "D,S",       MATCH_FCVT_D_H, MASK_FCVT_D_H|MASK_RM, match_opcode, 0 },
+{"fcvt.q.h",   0, INSN_CLASS_Q_AND_ZFHMIN,  "D,S",       MATCH_FCVT_Q_H, MASK_FCVT_Q_H|MASK_RM, match_opcode, 0 },
+{"fcvt.h.s",   0, INSN_CLASS_ZFHMIN,  "D,S",       MATCH_FCVT_H_S|MASK_RM, MASK_FCVT_H_S|MASK_RM, match_opcode, 0 },
+{"fcvt.h.s",   0, INSN_CLASS_ZFHMIN,  "D,S,m",     MATCH_FCVT_H_S, MASK_FCVT_H_S, match_opcode, 0 },
+{"fcvt.h.d",   0, INSN_CLASS_D_AND_ZFHMIN,  "D,S",       MATCH_FCVT_H_D|MASK_RM, MASK_FCVT_H_D|MASK_RM, match_opcode, 0 },
+{"fcvt.h.d",   0, INSN_CLASS_D_AND_ZFHMIN,  "D,S,m",     MATCH_FCVT_H_D, MASK_FCVT_H_D, match_opcode, 0 },
+{"fcvt.h.q",   0, INSN_CLASS_Q_AND_ZFHMIN,  "D,S",       MATCH_FCVT_H_Q|MASK_RM, MASK_FCVT_H_Q|MASK_RM, match_opcode, 0 },
+{"fcvt.h.q",   0, INSN_CLASS_Q_AND_ZFHMIN,  "D,S,m",     MATCH_FCVT_H_Q, MASK_FCVT_H_Q, match_opcode, 0 },
+{"fclass.h",   0, INSN_CLASS_ZFH,  "d,S",       MATCH_FCLASS_H, MASK_FCLASS_H, match_opcode, 0 },
+{"feq.h",      0, INSN_CLASS_ZFH,  "d,S,T",     MATCH_FEQ_H, MASK_FEQ_H, match_opcode, 0 },
+{"flt.h",      0, INSN_CLASS_ZFH,  "d,S,T",     MATCH_FLT_H, MASK_FLT_H, match_opcode, 0 },
+{"fle.h",      0, INSN_CLASS_ZFH,  "d,S,T",     MATCH_FLE_H, MASK_FLE_H, match_opcode, 0 },
+{"fgt.h",      0, INSN_CLASS_ZFH,  "d,T,S",     MATCH_FLT_H, MASK_FLT_H, match_opcode, 0 },
+{"fge.h",      0, INSN_CLASS_ZFH,  "d,T,S",     MATCH_FLE_H, MASK_FLE_H, match_opcode, 0 },
+{"fmv.x.h",    0, INSN_CLASS_ZFHMIN,  "d,S",       MATCH_FMV_X_H, MASK_FMV_X_H, match_opcode, 0 },
+{"fmv.h.x",    0, INSN_CLASS_ZFHMIN,  "D,s",       MATCH_FMV_H_X, MASK_FMV_H_X, match_opcode, 0 },
+{"fcvt.l.h",  64, INSN_CLASS_ZFH,  "d,S",       MATCH_FCVT_L_H|MASK_RM, MASK_FCVT_L_H|MASK_RM, match_opcode, 0 },
+{"fcvt.l.h",  64, INSN_CLASS_ZFH,  "d,S,m",     MATCH_FCVT_L_H, MASK_FCVT_L_H, match_opcode, 0 },
+{"fcvt.lu.h", 64, INSN_CLASS_ZFH,  "d,S",       MATCH_FCVT_LU_H|MASK_RM, MASK_FCVT_LU_H|MASK_RM, match_opcode, 0 },
+{"fcvt.lu.h", 64, INSN_CLASS_ZFH,  "d,S,m",     MATCH_FCVT_LU_H, MASK_FCVT_LU_H, match_opcode, 0 },
+{"fcvt.h.l",  64, INSN_CLASS_ZFH,  "D,s",       MATCH_FCVT_H_L|MASK_RM, MASK_FCVT_H_L|MASK_RM, match_opcode, 0 },
+{"fcvt.h.l",  64, INSN_CLASS_ZFH,  "D,s,m",     MATCH_FCVT_H_L, MASK_FCVT_H_L, match_opcode, 0 },
+{"fcvt.h.lu", 64, INSN_CLASS_ZFH,  "D,s",       MATCH_FCVT_H_LU|MASK_RM, MASK_FCVT_H_L|MASK_RM, match_opcode, 0 },
+{"fcvt.h.lu", 64, INSN_CLASS_ZFH,  "D,s,m",     MATCH_FCVT_H_LU, MASK_FCVT_H_LU, match_opcode, 0 },
+
 /* Single-precision floating-point instruction subset.  */
 {"frcsr",      0, INSN_CLASS_F,   "d",         MATCH_FRCSR, MASK_FRCSR, match_opcode, INSN_ALIAS },
 {"frsr",       0, INSN_CLASS_F,   "d",         MATCH_FRCSR, MASK_FRCSR, match_opcode, INSN_ALIAS },
@@ -1027,277 +1092,277 @@ const struct riscv_opcode riscv_opcodes[] =
 {"vle32ff.v",   0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLE32FFV, MASK_VLE32FFV, match_opcode, INSN_DREF },
 {"vle64ff.v",   0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLE64FFV, MASK_VLE64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
 
-{"vlseg2e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG2E8V, MASK_VLSEG2E8V, match_opcode, INSN_DREF },
-{"vsseg2e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG2E8V, MASK_VSSEG2E8V, match_opcode, INSN_DREF },
-{"vlseg3e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG3E8V, MASK_VLSEG3E8V, match_opcode, INSN_DREF },
-{"vsseg3e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG3E8V, MASK_VSSEG3E8V, match_opcode, INSN_DREF },
-{"vlseg4e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG4E8V, MASK_VLSEG4E8V, match_opcode, INSN_DREF },
-{"vsseg4e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG4E8V, MASK_VSSEG4E8V, match_opcode, INSN_DREF },
-{"vlseg5e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG5E8V, MASK_VLSEG5E8V, match_opcode, INSN_DREF },
-{"vsseg5e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG5E8V, MASK_VSSEG5E8V, match_opcode, INSN_DREF },
-{"vlseg6e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG6E8V, MASK_VLSEG6E8V, match_opcode, INSN_DREF },
-{"vsseg6e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG6E8V, MASK_VSSEG6E8V, match_opcode, INSN_DREF },
-{"vlseg7e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG7E8V, MASK_VLSEG7E8V, match_opcode, INSN_DREF },
-{"vsseg7e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG7E8V, MASK_VSSEG7E8V, match_opcode, INSN_DREF },
-{"vlseg8e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG8E8V, MASK_VLSEG8E8V, match_opcode, INSN_DREF },
-{"vsseg8e8.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG8E8V, MASK_VSSEG8E8V, match_opcode, INSN_DREF },
-
-{"vlseg2e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG2E16V, MASK_VLSEG2E16V, match_opcode, INSN_DREF },
-{"vsseg2e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG2E16V, MASK_VSSEG2E16V, match_opcode, INSN_DREF },
-{"vlseg3e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG3E16V, MASK_VLSEG3E16V, match_opcode, INSN_DREF },
-{"vsseg3e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG3E16V, MASK_VSSEG3E16V, match_opcode, INSN_DREF },
-{"vlseg4e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG4E16V, MASK_VLSEG4E16V, match_opcode, INSN_DREF },
-{"vsseg4e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG4E16V, MASK_VSSEG4E16V, match_opcode, INSN_DREF },
-{"vlseg5e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG5E16V, MASK_VLSEG5E16V, match_opcode, INSN_DREF },
-{"vsseg5e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG5E16V, MASK_VSSEG5E16V, match_opcode, INSN_DREF },
-{"vlseg6e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG6E16V, MASK_VLSEG6E16V, match_opcode, INSN_DREF },
-{"vsseg6e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG6E16V, MASK_VSSEG6E16V, match_opcode, INSN_DREF },
-{"vlseg7e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG7E16V, MASK_VLSEG7E16V, match_opcode, INSN_DREF },
-{"vsseg7e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG7E16V, MASK_VSSEG7E16V, match_opcode, INSN_DREF },
-{"vlseg8e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG8E16V, MASK_VLSEG8E16V, match_opcode, INSN_DREF },
-{"vsseg8e16.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG8E16V, MASK_VSSEG8E16V, match_opcode, INSN_DREF },
-
-{"vlseg2e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG2E32V, MASK_VLSEG2E32V, match_opcode, INSN_DREF },
-{"vsseg2e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG2E32V, MASK_VSSEG2E32V, match_opcode, INSN_DREF },
-{"vlseg3e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG3E32V, MASK_VLSEG3E32V, match_opcode, INSN_DREF },
-{"vsseg3e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG3E32V, MASK_VSSEG3E32V, match_opcode, INSN_DREF },
-{"vlseg4e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG4E32V, MASK_VLSEG4E32V, match_opcode, INSN_DREF },
-{"vsseg4e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG4E32V, MASK_VSSEG4E32V, match_opcode, INSN_DREF },
-{"vlseg5e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG5E32V, MASK_VLSEG5E32V, match_opcode, INSN_DREF },
-{"vsseg5e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG5E32V, MASK_VSSEG5E32V, match_opcode, INSN_DREF },
-{"vlseg6e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG6E32V, MASK_VLSEG6E32V, match_opcode, INSN_DREF },
-{"vsseg6e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG6E32V, MASK_VSSEG6E32V, match_opcode, INSN_DREF },
-{"vlseg7e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG7E32V, MASK_VLSEG7E32V, match_opcode, INSN_DREF },
-{"vsseg7e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG7E32V, MASK_VSSEG7E32V, match_opcode, INSN_DREF },
-{"vlseg8e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG8E32V, MASK_VLSEG8E32V, match_opcode, INSN_DREF },
-{"vsseg8e32.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG8E32V, MASK_VSSEG8E32V, match_opcode, INSN_DREF },
-
-{"vlseg2e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG2E64V, MASK_VLSEG2E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsseg2e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG2E64V, MASK_VSSEG2E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg3e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG3E64V, MASK_VLSEG3E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsseg3e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG3E64V, MASK_VSSEG3E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg4e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG4E64V, MASK_VLSEG4E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsseg4e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG4E64V, MASK_VSSEG4E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg5e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG5E64V, MASK_VLSEG5E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsseg5e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG5E64V, MASK_VSSEG5E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg6e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG6E64V, MASK_VLSEG6E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsseg6e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG6E64V, MASK_VSSEG6E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg7e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG7E64V, MASK_VLSEG7E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsseg7e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG7E64V, MASK_VSSEG7E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg8e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG8E64V, MASK_VLSEG8E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsseg8e64.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VSSEG8E64V, MASK_VSSEG8E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-
-{"vlsseg2e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG2E8V, MASK_VLSSEG2E8V, match_opcode, INSN_DREF },
-{"vssseg2e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG2E8V, MASK_VSSSEG2E8V, match_opcode, INSN_DREF },
-{"vlsseg3e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG3E8V, MASK_VLSSEG3E8V, match_opcode, INSN_DREF },
-{"vssseg3e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG3E8V, MASK_VSSSEG3E8V, match_opcode, INSN_DREF },
-{"vlsseg4e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG4E8V, MASK_VLSSEG4E8V, match_opcode, INSN_DREF },
-{"vssseg4e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG4E8V, MASK_VSSSEG4E8V, match_opcode, INSN_DREF },
-{"vlsseg5e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG5E8V, MASK_VLSSEG5E8V, match_opcode, INSN_DREF },
-{"vssseg5e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG5E8V, MASK_VSSSEG5E8V, match_opcode, INSN_DREF },
-{"vlsseg6e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG6E8V, MASK_VLSSEG6E8V, match_opcode, INSN_DREF },
-{"vssseg6e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG6E8V, MASK_VSSSEG6E8V, match_opcode, INSN_DREF },
-{"vlsseg7e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG7E8V, MASK_VLSSEG7E8V, match_opcode, INSN_DREF },
-{"vssseg7e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG7E8V, MASK_VSSSEG7E8V, match_opcode, INSN_DREF },
-{"vlsseg8e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG8E8V, MASK_VLSSEG8E8V, match_opcode, INSN_DREF },
-{"vssseg8e8.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG8E8V, MASK_VSSSEG8E8V, match_opcode, INSN_DREF },
-
-{"vlsseg2e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG2E16V, MASK_VLSSEG2E16V, match_opcode, INSN_DREF },
-{"vssseg2e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG2E16V, MASK_VSSSEG2E16V, match_opcode, INSN_DREF },
-{"vlsseg3e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG3E16V, MASK_VLSSEG3E16V, match_opcode, INSN_DREF },
-{"vssseg3e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG3E16V, MASK_VSSSEG3E16V, match_opcode, INSN_DREF },
-{"vlsseg4e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG4E16V, MASK_VLSSEG4E16V, match_opcode, INSN_DREF },
-{"vssseg4e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG4E16V, MASK_VSSSEG4E16V, match_opcode, INSN_DREF },
-{"vlsseg5e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG5E16V, MASK_VLSSEG5E16V, match_opcode, INSN_DREF },
-{"vssseg5e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG5E16V, MASK_VSSSEG5E16V, match_opcode, INSN_DREF },
-{"vlsseg6e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG6E16V, MASK_VLSSEG6E16V, match_opcode, INSN_DREF },
-{"vssseg6e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG6E16V, MASK_VSSSEG6E16V, match_opcode, INSN_DREF },
-{"vlsseg7e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG7E16V, MASK_VLSSEG7E16V, match_opcode, INSN_DREF },
-{"vssseg7e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG7E16V, MASK_VSSSEG7E16V, match_opcode, INSN_DREF },
-{"vlsseg8e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG8E16V, MASK_VLSSEG8E16V, match_opcode, INSN_DREF },
-{"vssseg8e16.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG8E16V, MASK_VSSSEG8E16V, match_opcode, INSN_DREF },
-
-{"vlsseg2e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG2E32V, MASK_VLSSEG2E32V, match_opcode, INSN_DREF },
-{"vssseg2e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG2E32V, MASK_VSSSEG2E32V, match_opcode, INSN_DREF },
-{"vlsseg3e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG3E32V, MASK_VLSSEG3E32V, match_opcode, INSN_DREF },
-{"vssseg3e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG3E32V, MASK_VSSSEG3E32V, match_opcode, INSN_DREF },
-{"vlsseg4e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG4E32V, MASK_VLSSEG4E32V, match_opcode, INSN_DREF },
-{"vssseg4e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG4E32V, MASK_VSSSEG4E32V, match_opcode, INSN_DREF },
-{"vlsseg5e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG5E32V, MASK_VLSSEG5E32V, match_opcode, INSN_DREF },
-{"vssseg5e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG5E32V, MASK_VSSSEG5E32V, match_opcode, INSN_DREF },
-{"vlsseg6e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG6E32V, MASK_VLSSEG6E32V, match_opcode, INSN_DREF },
-{"vssseg6e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG6E32V, MASK_VSSSEG6E32V, match_opcode, INSN_DREF },
-{"vlsseg7e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG7E32V, MASK_VLSSEG7E32V, match_opcode, INSN_DREF },
-{"vssseg7e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG7E32V, MASK_VSSSEG7E32V, match_opcode, INSN_DREF },
-{"vlsseg8e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG8E32V, MASK_VLSSEG8E32V, match_opcode, INSN_DREF },
-{"vssseg8e32.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG8E32V, MASK_VSSSEG8E32V, match_opcode, INSN_DREF },
-
-{"vlsseg2e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG2E64V, MASK_VLSSEG2E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vssseg2e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG2E64V, MASK_VSSSEG2E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlsseg3e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG3E64V, MASK_VLSSEG3E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vssseg3e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG3E64V, MASK_VSSSEG3E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlsseg4e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG4E64V, MASK_VLSSEG4E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vssseg4e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG4E64V, MASK_VSSSEG4E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlsseg5e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG5E64V, MASK_VLSSEG5E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vssseg5e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG5E64V, MASK_VSSSEG5E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlsseg6e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG6E64V, MASK_VLSSEG6E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vssseg6e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG6E64V, MASK_VSSSEG6E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlsseg7e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG7E64V, MASK_VLSSEG7E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vssseg7e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG7E64V, MASK_VSSSEG7E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlsseg8e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VLSSEG8E64V, MASK_VLSSEG8E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vssseg8e64.v",  0, INSN_CLASS_V,  "Vd,0(s),tVm", MATCH_VSSSEG8E64V, MASK_VSSSEG8E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-
-{"vloxseg2ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG2EI8V, MASK_VLOXSEG2EI8V, match_opcode, INSN_DREF },
-{"vsoxseg2ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG2EI8V, MASK_VSOXSEG2EI8V, match_opcode, INSN_DREF },
-{"vloxseg3ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG3EI8V, MASK_VLOXSEG3EI8V, match_opcode, INSN_DREF },
-{"vsoxseg3ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG3EI8V, MASK_VSOXSEG3EI8V, match_opcode, INSN_DREF },
-{"vloxseg4ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG4EI8V, MASK_VLOXSEG4EI8V, match_opcode, INSN_DREF },
-{"vsoxseg4ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG4EI8V, MASK_VSOXSEG4EI8V, match_opcode, INSN_DREF },
-{"vloxseg5ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG5EI8V, MASK_VLOXSEG5EI8V, match_opcode, INSN_DREF },
-{"vsoxseg5ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG5EI8V, MASK_VSOXSEG5EI8V, match_opcode, INSN_DREF },
-{"vloxseg6ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG6EI8V, MASK_VLOXSEG6EI8V, match_opcode, INSN_DREF },
-{"vsoxseg6ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG6EI8V, MASK_VSOXSEG6EI8V, match_opcode, INSN_DREF },
-{"vloxseg7ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG7EI8V, MASK_VLOXSEG7EI8V, match_opcode, INSN_DREF },
-{"vsoxseg7ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG7EI8V, MASK_VSOXSEG7EI8V, match_opcode, INSN_DREF },
-{"vloxseg8ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG8EI8V, MASK_VLOXSEG8EI8V, match_opcode, INSN_DREF },
-{"vsoxseg8ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG8EI8V, MASK_VSOXSEG8EI8V, match_opcode, INSN_DREF },
-
-{"vloxseg2ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG2EI16V, MASK_VLOXSEG2EI16V, match_opcode, INSN_DREF },
-{"vsoxseg2ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG2EI16V, MASK_VSOXSEG2EI16V, match_opcode, INSN_DREF },
-{"vloxseg3ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG3EI16V, MASK_VLOXSEG3EI16V, match_opcode, INSN_DREF },
-{"vsoxseg3ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG3EI16V, MASK_VSOXSEG3EI16V, match_opcode, INSN_DREF },
-{"vloxseg4ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG4EI16V, MASK_VLOXSEG4EI16V, match_opcode, INSN_DREF },
-{"vsoxseg4ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG4EI16V, MASK_VSOXSEG4EI16V, match_opcode, INSN_DREF },
-{"vloxseg5ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG5EI16V, MASK_VLOXSEG5EI16V, match_opcode, INSN_DREF },
-{"vsoxseg5ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG5EI16V, MASK_VSOXSEG5EI16V, match_opcode, INSN_DREF },
-{"vloxseg6ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG6EI16V, MASK_VLOXSEG6EI16V, match_opcode, INSN_DREF },
-{"vsoxseg6ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG6EI16V, MASK_VSOXSEG6EI16V, match_opcode, INSN_DREF },
-{"vloxseg7ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG7EI16V, MASK_VLOXSEG7EI16V, match_opcode, INSN_DREF },
-{"vsoxseg7ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG7EI16V, MASK_VSOXSEG7EI16V, match_opcode, INSN_DREF },
-{"vloxseg8ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG8EI16V, MASK_VLOXSEG8EI16V, match_opcode, INSN_DREF },
-{"vsoxseg8ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG8EI16V, MASK_VSOXSEG8EI16V, match_opcode, INSN_DREF },
-
-{"vloxseg2ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG2EI32V, MASK_VLOXSEG2EI32V, match_opcode, INSN_DREF },
-{"vsoxseg2ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG2EI32V, MASK_VSOXSEG2EI32V, match_opcode, INSN_DREF },
-{"vloxseg3ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG3EI32V, MASK_VLOXSEG3EI32V, match_opcode, INSN_DREF },
-{"vsoxseg3ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG3EI32V, MASK_VSOXSEG3EI32V, match_opcode, INSN_DREF },
-{"vloxseg4ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG4EI32V, MASK_VLOXSEG4EI32V, match_opcode, INSN_DREF },
-{"vsoxseg4ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG4EI32V, MASK_VSOXSEG4EI32V, match_opcode, INSN_DREF },
-{"vloxseg5ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG5EI32V, MASK_VLOXSEG5EI32V, match_opcode, INSN_DREF },
-{"vsoxseg5ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG5EI32V, MASK_VSOXSEG5EI32V, match_opcode, INSN_DREF },
-{"vloxseg6ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG6EI32V, MASK_VLOXSEG6EI32V, match_opcode, INSN_DREF },
-{"vsoxseg6ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG6EI32V, MASK_VSOXSEG6EI32V, match_opcode, INSN_DREF },
-{"vloxseg7ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG7EI32V, MASK_VLOXSEG7EI32V, match_opcode, INSN_DREF },
-{"vsoxseg7ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG7EI32V, MASK_VSOXSEG7EI32V, match_opcode, INSN_DREF },
-{"vloxseg8ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG8EI32V, MASK_VLOXSEG8EI32V, match_opcode, INSN_DREF },
-{"vsoxseg8ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG8EI32V, MASK_VSOXSEG8EI32V, match_opcode, INSN_DREF },
-
-{"vloxseg2ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG2EI64V, MASK_VLOXSEG2EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsoxseg2ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG2EI64V, MASK_VSOXSEG2EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vloxseg3ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG3EI64V, MASK_VLOXSEG3EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsoxseg3ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG3EI64V, MASK_VSOXSEG3EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vloxseg4ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG4EI64V, MASK_VLOXSEG4EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsoxseg4ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG4EI64V, MASK_VSOXSEG4EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vloxseg5ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG5EI64V, MASK_VLOXSEG5EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsoxseg5ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG5EI64V, MASK_VSOXSEG5EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vloxseg6ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG6EI64V, MASK_VLOXSEG6EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsoxseg6ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG6EI64V, MASK_VSOXSEG6EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vloxseg7ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG7EI64V, MASK_VLOXSEG7EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsoxseg7ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG7EI64V, MASK_VSOXSEG7EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vloxseg8ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLOXSEG8EI64V, MASK_VLOXSEG8EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsoxseg8ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSOXSEG8EI64V, MASK_VSOXSEG8EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-
-{"vluxseg2ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG2EI8V, MASK_VLUXSEG2EI8V, match_opcode, INSN_DREF },
-{"vsuxseg2ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG2EI8V, MASK_VSUXSEG2EI8V, match_opcode, INSN_DREF },
-{"vluxseg3ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG3EI8V, MASK_VLUXSEG3EI8V, match_opcode, INSN_DREF },
-{"vsuxseg3ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG3EI8V, MASK_VSUXSEG3EI8V, match_opcode, INSN_DREF },
-{"vluxseg4ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG4EI8V, MASK_VLUXSEG4EI8V, match_opcode, INSN_DREF },
-{"vsuxseg4ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG4EI8V, MASK_VSUXSEG4EI8V, match_opcode, INSN_DREF },
-{"vluxseg5ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG5EI8V, MASK_VLUXSEG5EI8V, match_opcode, INSN_DREF },
-{"vsuxseg5ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG5EI8V, MASK_VSUXSEG5EI8V, match_opcode, INSN_DREF },
-{"vluxseg6ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG6EI8V, MASK_VLUXSEG6EI8V, match_opcode, INSN_DREF },
-{"vsuxseg6ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG6EI8V, MASK_VSUXSEG6EI8V, match_opcode, INSN_DREF },
-{"vluxseg7ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG7EI8V, MASK_VLUXSEG7EI8V, match_opcode, INSN_DREF },
-{"vsuxseg7ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG7EI8V, MASK_VSUXSEG7EI8V, match_opcode, INSN_DREF },
-{"vluxseg8ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG8EI8V, MASK_VLUXSEG8EI8V, match_opcode, INSN_DREF },
-{"vsuxseg8ei8.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG8EI8V, MASK_VSUXSEG8EI8V, match_opcode, INSN_DREF },
-
-{"vluxseg2ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG2EI16V, MASK_VLUXSEG2EI16V, match_opcode, INSN_DREF },
-{"vsuxseg2ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG2EI16V, MASK_VSUXSEG2EI16V, match_opcode, INSN_DREF },
-{"vluxseg3ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG3EI16V, MASK_VLUXSEG3EI16V, match_opcode, INSN_DREF },
-{"vsuxseg3ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG3EI16V, MASK_VSUXSEG3EI16V, match_opcode, INSN_DREF },
-{"vluxseg4ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG4EI16V, MASK_VLUXSEG4EI16V, match_opcode, INSN_DREF },
-{"vsuxseg4ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG4EI16V, MASK_VSUXSEG4EI16V, match_opcode, INSN_DREF },
-{"vluxseg5ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG5EI16V, MASK_VLUXSEG5EI16V, match_opcode, INSN_DREF },
-{"vsuxseg5ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG5EI16V, MASK_VSUXSEG5EI16V, match_opcode, INSN_DREF },
-{"vluxseg6ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG6EI16V, MASK_VLUXSEG6EI16V, match_opcode, INSN_DREF },
-{"vsuxseg6ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG6EI16V, MASK_VSUXSEG6EI16V, match_opcode, INSN_DREF },
-{"vluxseg7ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG7EI16V, MASK_VLUXSEG7EI16V, match_opcode, INSN_DREF },
-{"vsuxseg7ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG7EI16V, MASK_VSUXSEG7EI16V, match_opcode, INSN_DREF },
-{"vluxseg8ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG8EI16V, MASK_VLUXSEG8EI16V, match_opcode, INSN_DREF },
-{"vsuxseg8ei16.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG8EI16V, MASK_VSUXSEG8EI16V, match_opcode, INSN_DREF },
-
-{"vluxseg2ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG2EI32V, MASK_VLUXSEG2EI32V, match_opcode, INSN_DREF },
-{"vsuxseg2ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG2EI32V, MASK_VSUXSEG2EI32V, match_opcode, INSN_DREF },
-{"vluxseg3ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG3EI32V, MASK_VLUXSEG3EI32V, match_opcode, INSN_DREF },
-{"vsuxseg3ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG3EI32V, MASK_VSUXSEG3EI32V, match_opcode, INSN_DREF },
-{"vluxseg4ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG4EI32V, MASK_VLUXSEG4EI32V, match_opcode, INSN_DREF },
-{"vsuxseg4ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG4EI32V, MASK_VSUXSEG4EI32V, match_opcode, INSN_DREF },
-{"vluxseg5ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG5EI32V, MASK_VLUXSEG5EI32V, match_opcode, INSN_DREF },
-{"vsuxseg5ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG5EI32V, MASK_VSUXSEG5EI32V, match_opcode, INSN_DREF },
-{"vluxseg6ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG6EI32V, MASK_VLUXSEG6EI32V, match_opcode, INSN_DREF },
-{"vsuxseg6ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG6EI32V, MASK_VSUXSEG6EI32V, match_opcode, INSN_DREF },
-{"vluxseg7ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG7EI32V, MASK_VLUXSEG7EI32V, match_opcode, INSN_DREF },
-{"vsuxseg7ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG7EI32V, MASK_VSUXSEG7EI32V, match_opcode, INSN_DREF },
-{"vluxseg8ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG8EI32V, MASK_VLUXSEG8EI32V, match_opcode, INSN_DREF },
-{"vsuxseg8ei32.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG8EI32V, MASK_VSUXSEG8EI32V, match_opcode, INSN_DREF },
-
-{"vluxseg2ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG2EI64V, MASK_VLUXSEG2EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsuxseg2ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG2EI64V, MASK_VSUXSEG2EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vluxseg3ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG3EI64V, MASK_VLUXSEG3EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsuxseg3ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG3EI64V, MASK_VSUXSEG3EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vluxseg4ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG4EI64V, MASK_VLUXSEG4EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsuxseg4ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG4EI64V, MASK_VSUXSEG4EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vluxseg5ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG5EI64V, MASK_VLUXSEG5EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsuxseg5ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG5EI64V, MASK_VSUXSEG5EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vluxseg6ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG6EI64V, MASK_VLUXSEG6EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsuxseg6ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG6EI64V, MASK_VSUXSEG6EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vluxseg7ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG7EI64V, MASK_VLUXSEG7EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsuxseg7ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG7EI64V, MASK_VSUXSEG7EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vluxseg8ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VLUXSEG8EI64V, MASK_VLUXSEG8EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vsuxseg8ei64.v",  0, INSN_CLASS_V,  "Vd,0(s),VtVm", MATCH_VSUXSEG8EI64V, MASK_VSUXSEG8EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
-
-{"vlseg2e8ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG2E8FFV, MASK_VLSEG2E8FFV, match_opcode, INSN_DREF },
-{"vlseg3e8ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG3E8FFV, MASK_VLSEG3E8FFV, match_opcode, INSN_DREF },
-{"vlseg4e8ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG4E8FFV, MASK_VLSEG4E8FFV, match_opcode, INSN_DREF },
-{"vlseg5e8ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG5E8FFV, MASK_VLSEG5E8FFV, match_opcode, INSN_DREF },
-{"vlseg6e8ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG6E8FFV, MASK_VLSEG6E8FFV, match_opcode, INSN_DREF },
-{"vlseg7e8ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG7E8FFV, MASK_VLSEG7E8FFV, match_opcode, INSN_DREF },
-{"vlseg8e8ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG8E8FFV, MASK_VLSEG8E8FFV, match_opcode, INSN_DREF },
-
-{"vlseg2e16ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG2E16FFV, MASK_VLSEG2E16FFV, match_opcode, INSN_DREF },
-{"vlseg3e16ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG3E16FFV, MASK_VLSEG3E16FFV, match_opcode, INSN_DREF },
-{"vlseg4e16ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG4E16FFV, MASK_VLSEG4E16FFV, match_opcode, INSN_DREF },
-{"vlseg5e16ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG5E16FFV, MASK_VLSEG5E16FFV, match_opcode, INSN_DREF },
-{"vlseg6e16ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG6E16FFV, MASK_VLSEG6E16FFV, match_opcode, INSN_DREF },
-{"vlseg7e16ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG7E16FFV, MASK_VLSEG7E16FFV, match_opcode, INSN_DREF },
-{"vlseg8e16ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG8E16FFV, MASK_VLSEG8E16FFV, match_opcode, INSN_DREF },
-
-{"vlseg2e32ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG2E32FFV, MASK_VLSEG2E32FFV, match_opcode, INSN_DREF },
-{"vlseg3e32ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG3E32FFV, MASK_VLSEG3E32FFV, match_opcode, INSN_DREF },
-{"vlseg4e32ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG4E32FFV, MASK_VLSEG4E32FFV, match_opcode, INSN_DREF },
-{"vlseg5e32ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG5E32FFV, MASK_VLSEG5E32FFV, match_opcode, INSN_DREF },
-{"vlseg6e32ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG6E32FFV, MASK_VLSEG6E32FFV, match_opcode, INSN_DREF },
-{"vlseg7e32ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG7E32FFV, MASK_VLSEG7E32FFV, match_opcode, INSN_DREF },
-{"vlseg8e32ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG8E32FFV, MASK_VLSEG8E32FFV, match_opcode, INSN_DREF },
-
-{"vlseg2e64ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG2E64FFV, MASK_VLSEG2E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg3e64ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG3E64FFV, MASK_VLSEG3E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg4e64ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG4E64FFV, MASK_VLSEG4E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg5e64ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG5E64FFV, MASK_VLSEG5E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg6e64ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG6E64FFV, MASK_VLSEG6E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg7e64ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG7E64FFV, MASK_VLSEG7E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
-{"vlseg8e64ff.v",  0, INSN_CLASS_V,  "Vd,0(s)Vm", MATCH_VLSEG8E64FFV, MASK_VLSEG8E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg2e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG2E8V, MASK_VLSEG2E8V, match_opcode, INSN_DREF },
+{"vsseg2e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG2E8V, MASK_VSSEG2E8V, match_opcode, INSN_DREF },
+{"vlseg3e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG3E8V, MASK_VLSEG3E8V, match_opcode, INSN_DREF },
+{"vsseg3e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG3E8V, MASK_VSSEG3E8V, match_opcode, INSN_DREF },
+{"vlseg4e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG4E8V, MASK_VLSEG4E8V, match_opcode, INSN_DREF },
+{"vsseg4e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG4E8V, MASK_VSSEG4E8V, match_opcode, INSN_DREF },
+{"vlseg5e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG5E8V, MASK_VLSEG5E8V, match_opcode, INSN_DREF },
+{"vsseg5e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG5E8V, MASK_VSSEG5E8V, match_opcode, INSN_DREF },
+{"vlseg6e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG6E8V, MASK_VLSEG6E8V, match_opcode, INSN_DREF },
+{"vsseg6e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG6E8V, MASK_VSSEG6E8V, match_opcode, INSN_DREF },
+{"vlseg7e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG7E8V, MASK_VLSEG7E8V, match_opcode, INSN_DREF },
+{"vsseg7e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG7E8V, MASK_VSSEG7E8V, match_opcode, INSN_DREF },
+{"vlseg8e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG8E8V, MASK_VLSEG8E8V, match_opcode, INSN_DREF },
+{"vsseg8e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG8E8V, MASK_VSSEG8E8V, match_opcode, INSN_DREF },
+
+{"vlseg2e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG2E16V, MASK_VLSEG2E16V, match_opcode, INSN_DREF },
+{"vsseg2e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG2E16V, MASK_VSSEG2E16V, match_opcode, INSN_DREF },
+{"vlseg3e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG3E16V, MASK_VLSEG3E16V, match_opcode, INSN_DREF },
+{"vsseg3e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG3E16V, MASK_VSSEG3E16V, match_opcode, INSN_DREF },
+{"vlseg4e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG4E16V, MASK_VLSEG4E16V, match_opcode, INSN_DREF },
+{"vsseg4e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG4E16V, MASK_VSSEG4E16V, match_opcode, INSN_DREF },
+{"vlseg5e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG5E16V, MASK_VLSEG5E16V, match_opcode, INSN_DREF },
+{"vsseg5e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG5E16V, MASK_VSSEG5E16V, match_opcode, INSN_DREF },
+{"vlseg6e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG6E16V, MASK_VLSEG6E16V, match_opcode, INSN_DREF },
+{"vsseg6e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG6E16V, MASK_VSSEG6E16V, match_opcode, INSN_DREF },
+{"vlseg7e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG7E16V, MASK_VLSEG7E16V, match_opcode, INSN_DREF },
+{"vsseg7e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG7E16V, MASK_VSSEG7E16V, match_opcode, INSN_DREF },
+{"vlseg8e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG8E16V, MASK_VLSEG8E16V, match_opcode, INSN_DREF },
+{"vsseg8e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG8E16V, MASK_VSSEG8E16V, match_opcode, INSN_DREF },
+
+{"vlseg2e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG2E32V, MASK_VLSEG2E32V, match_opcode, INSN_DREF },
+{"vsseg2e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG2E32V, MASK_VSSEG2E32V, match_opcode, INSN_DREF },
+{"vlseg3e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG3E32V, MASK_VLSEG3E32V, match_opcode, INSN_DREF },
+{"vsseg3e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG3E32V, MASK_VSSEG3E32V, match_opcode, INSN_DREF },
+{"vlseg4e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG4E32V, MASK_VLSEG4E32V, match_opcode, INSN_DREF },
+{"vsseg4e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG4E32V, MASK_VSSEG4E32V, match_opcode, INSN_DREF },
+{"vlseg5e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG5E32V, MASK_VLSEG5E32V, match_opcode, INSN_DREF },
+{"vsseg5e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG5E32V, MASK_VSSEG5E32V, match_opcode, INSN_DREF },
+{"vlseg6e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG6E32V, MASK_VLSEG6E32V, match_opcode, INSN_DREF },
+{"vsseg6e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG6E32V, MASK_VSSEG6E32V, match_opcode, INSN_DREF },
+{"vlseg7e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG7E32V, MASK_VLSEG7E32V, match_opcode, INSN_DREF },
+{"vsseg7e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG7E32V, MASK_VSSEG7E32V, match_opcode, INSN_DREF },
+{"vlseg8e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG8E32V, MASK_VLSEG8E32V, match_opcode, INSN_DREF },
+{"vsseg8e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG8E32V, MASK_VSSEG8E32V, match_opcode, INSN_DREF },
+
+{"vlseg2e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG2E64V, MASK_VLSEG2E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsseg2e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG2E64V, MASK_VSSEG2E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg3e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG3E64V, MASK_VLSEG3E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsseg3e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG3E64V, MASK_VSSEG3E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg4e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG4E64V, MASK_VLSEG4E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsseg4e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG4E64V, MASK_VSSEG4E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg5e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG5E64V, MASK_VLSEG5E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsseg5e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG5E64V, MASK_VSSEG5E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg6e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG6E64V, MASK_VLSEG6E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsseg6e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG6E64V, MASK_VSSEG6E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg7e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG7E64V, MASK_VLSEG7E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsseg7e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG7E64V, MASK_VSSEG7E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg8e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG8E64V, MASK_VLSEG8E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsseg8e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VSSEG8E64V, MASK_VSSEG8E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+
+{"vlsseg2e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG2E8V, MASK_VLSSEG2E8V, match_opcode, INSN_DREF },
+{"vssseg2e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG2E8V, MASK_VSSSEG2E8V, match_opcode, INSN_DREF },
+{"vlsseg3e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG3E8V, MASK_VLSSEG3E8V, match_opcode, INSN_DREF },
+{"vssseg3e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG3E8V, MASK_VSSSEG3E8V, match_opcode, INSN_DREF },
+{"vlsseg4e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG4E8V, MASK_VLSSEG4E8V, match_opcode, INSN_DREF },
+{"vssseg4e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG4E8V, MASK_VSSSEG4E8V, match_opcode, INSN_DREF },
+{"vlsseg5e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG5E8V, MASK_VLSSEG5E8V, match_opcode, INSN_DREF },
+{"vssseg5e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG5E8V, MASK_VSSSEG5E8V, match_opcode, INSN_DREF },
+{"vlsseg6e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG6E8V, MASK_VLSSEG6E8V, match_opcode, INSN_DREF },
+{"vssseg6e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG6E8V, MASK_VSSSEG6E8V, match_opcode, INSN_DREF },
+{"vlsseg7e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG7E8V, MASK_VLSSEG7E8V, match_opcode, INSN_DREF },
+{"vssseg7e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG7E8V, MASK_VSSSEG7E8V, match_opcode, INSN_DREF },
+{"vlsseg8e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG8E8V, MASK_VLSSEG8E8V, match_opcode, INSN_DREF },
+{"vssseg8e8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG8E8V, MASK_VSSSEG8E8V, match_opcode, INSN_DREF },
+
+{"vlsseg2e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG2E16V, MASK_VLSSEG2E16V, match_opcode, INSN_DREF },
+{"vssseg2e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG2E16V, MASK_VSSSEG2E16V, match_opcode, INSN_DREF },
+{"vlsseg3e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG3E16V, MASK_VLSSEG3E16V, match_opcode, INSN_DREF },
+{"vssseg3e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG3E16V, MASK_VSSSEG3E16V, match_opcode, INSN_DREF },
+{"vlsseg4e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG4E16V, MASK_VLSSEG4E16V, match_opcode, INSN_DREF },
+{"vssseg4e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG4E16V, MASK_VSSSEG4E16V, match_opcode, INSN_DREF },
+{"vlsseg5e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG5E16V, MASK_VLSSEG5E16V, match_opcode, INSN_DREF },
+{"vssseg5e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG5E16V, MASK_VSSSEG5E16V, match_opcode, INSN_DREF },
+{"vlsseg6e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG6E16V, MASK_VLSSEG6E16V, match_opcode, INSN_DREF },
+{"vssseg6e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG6E16V, MASK_VSSSEG6E16V, match_opcode, INSN_DREF },
+{"vlsseg7e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG7E16V, MASK_VLSSEG7E16V, match_opcode, INSN_DREF },
+{"vssseg7e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG7E16V, MASK_VSSSEG7E16V, match_opcode, INSN_DREF },
+{"vlsseg8e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG8E16V, MASK_VLSSEG8E16V, match_opcode, INSN_DREF },
+{"vssseg8e16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG8E16V, MASK_VSSSEG8E16V, match_opcode, INSN_DREF },
+
+{"vlsseg2e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG2E32V, MASK_VLSSEG2E32V, match_opcode, INSN_DREF },
+{"vssseg2e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG2E32V, MASK_VSSSEG2E32V, match_opcode, INSN_DREF },
+{"vlsseg3e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG3E32V, MASK_VLSSEG3E32V, match_opcode, INSN_DREF },
+{"vssseg3e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG3E32V, MASK_VSSSEG3E32V, match_opcode, INSN_DREF },
+{"vlsseg4e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG4E32V, MASK_VLSSEG4E32V, match_opcode, INSN_DREF },
+{"vssseg4e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG4E32V, MASK_VSSSEG4E32V, match_opcode, INSN_DREF },
+{"vlsseg5e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG5E32V, MASK_VLSSEG5E32V, match_opcode, INSN_DREF },
+{"vssseg5e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG5E32V, MASK_VSSSEG5E32V, match_opcode, INSN_DREF },
+{"vlsseg6e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG6E32V, MASK_VLSSEG6E32V, match_opcode, INSN_DREF },
+{"vssseg6e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG6E32V, MASK_VSSSEG6E32V, match_opcode, INSN_DREF },
+{"vlsseg7e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG7E32V, MASK_VLSSEG7E32V, match_opcode, INSN_DREF },
+{"vssseg7e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG7E32V, MASK_VSSSEG7E32V, match_opcode, INSN_DREF },
+{"vlsseg8e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG8E32V, MASK_VLSSEG8E32V, match_opcode, INSN_DREF },
+{"vssseg8e32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG8E32V, MASK_VSSSEG8E32V, match_opcode, INSN_DREF },
+
+{"vlsseg2e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG2E64V, MASK_VLSSEG2E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vssseg2e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG2E64V, MASK_VSSSEG2E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlsseg3e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG3E64V, MASK_VLSSEG3E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vssseg3e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG3E64V, MASK_VSSSEG3E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlsseg4e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG4E64V, MASK_VLSSEG4E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vssseg4e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG4E64V, MASK_VSSSEG4E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlsseg5e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG5E64V, MASK_VLSSEG5E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vssseg5e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG5E64V, MASK_VSSSEG5E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlsseg6e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG6E64V, MASK_VLSSEG6E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vssseg6e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG6E64V, MASK_VSSSEG6E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlsseg7e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG7E64V, MASK_VLSSEG7E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vssseg7e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG7E64V, MASK_VSSSEG7E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlsseg8e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VLSSEG8E64V, MASK_VLSSEG8E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vssseg8e64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),tVm", MATCH_VSSSEG8E64V, MASK_VSSSEG8E64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+
+{"vloxseg2ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG2EI8V, MASK_VLOXSEG2EI8V, match_opcode, INSN_DREF },
+{"vsoxseg2ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG2EI8V, MASK_VSOXSEG2EI8V, match_opcode, INSN_DREF },
+{"vloxseg3ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG3EI8V, MASK_VLOXSEG3EI8V, match_opcode, INSN_DREF },
+{"vsoxseg3ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG3EI8V, MASK_VSOXSEG3EI8V, match_opcode, INSN_DREF },
+{"vloxseg4ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG4EI8V, MASK_VLOXSEG4EI8V, match_opcode, INSN_DREF },
+{"vsoxseg4ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG4EI8V, MASK_VSOXSEG4EI8V, match_opcode, INSN_DREF },
+{"vloxseg5ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG5EI8V, MASK_VLOXSEG5EI8V, match_opcode, INSN_DREF },
+{"vsoxseg5ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG5EI8V, MASK_VSOXSEG5EI8V, match_opcode, INSN_DREF },
+{"vloxseg6ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG6EI8V, MASK_VLOXSEG6EI8V, match_opcode, INSN_DREF },
+{"vsoxseg6ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG6EI8V, MASK_VSOXSEG6EI8V, match_opcode, INSN_DREF },
+{"vloxseg7ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG7EI8V, MASK_VLOXSEG7EI8V, match_opcode, INSN_DREF },
+{"vsoxseg7ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG7EI8V, MASK_VSOXSEG7EI8V, match_opcode, INSN_DREF },
+{"vloxseg8ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG8EI8V, MASK_VLOXSEG8EI8V, match_opcode, INSN_DREF },
+{"vsoxseg8ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG8EI8V, MASK_VSOXSEG8EI8V, match_opcode, INSN_DREF },
+
+{"vloxseg2ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG2EI16V, MASK_VLOXSEG2EI16V, match_opcode, INSN_DREF },
+{"vsoxseg2ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG2EI16V, MASK_VSOXSEG2EI16V, match_opcode, INSN_DREF },
+{"vloxseg3ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG3EI16V, MASK_VLOXSEG3EI16V, match_opcode, INSN_DREF },
+{"vsoxseg3ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG3EI16V, MASK_VSOXSEG3EI16V, match_opcode, INSN_DREF },
+{"vloxseg4ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG4EI16V, MASK_VLOXSEG4EI16V, match_opcode, INSN_DREF },
+{"vsoxseg4ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG4EI16V, MASK_VSOXSEG4EI16V, match_opcode, INSN_DREF },
+{"vloxseg5ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG5EI16V, MASK_VLOXSEG5EI16V, match_opcode, INSN_DREF },
+{"vsoxseg5ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG5EI16V, MASK_VSOXSEG5EI16V, match_opcode, INSN_DREF },
+{"vloxseg6ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG6EI16V, MASK_VLOXSEG6EI16V, match_opcode, INSN_DREF },
+{"vsoxseg6ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG6EI16V, MASK_VSOXSEG6EI16V, match_opcode, INSN_DREF },
+{"vloxseg7ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG7EI16V, MASK_VLOXSEG7EI16V, match_opcode, INSN_DREF },
+{"vsoxseg7ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG7EI16V, MASK_VSOXSEG7EI16V, match_opcode, INSN_DREF },
+{"vloxseg8ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG8EI16V, MASK_VLOXSEG8EI16V, match_opcode, INSN_DREF },
+{"vsoxseg8ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG8EI16V, MASK_VSOXSEG8EI16V, match_opcode, INSN_DREF },
+
+{"vloxseg2ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG2EI32V, MASK_VLOXSEG2EI32V, match_opcode, INSN_DREF },
+{"vsoxseg2ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG2EI32V, MASK_VSOXSEG2EI32V, match_opcode, INSN_DREF },
+{"vloxseg3ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG3EI32V, MASK_VLOXSEG3EI32V, match_opcode, INSN_DREF },
+{"vsoxseg3ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG3EI32V, MASK_VSOXSEG3EI32V, match_opcode, INSN_DREF },
+{"vloxseg4ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG4EI32V, MASK_VLOXSEG4EI32V, match_opcode, INSN_DREF },
+{"vsoxseg4ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG4EI32V, MASK_VSOXSEG4EI32V, match_opcode, INSN_DREF },
+{"vloxseg5ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG5EI32V, MASK_VLOXSEG5EI32V, match_opcode, INSN_DREF },
+{"vsoxseg5ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG5EI32V, MASK_VSOXSEG5EI32V, match_opcode, INSN_DREF },
+{"vloxseg6ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG6EI32V, MASK_VLOXSEG6EI32V, match_opcode, INSN_DREF },
+{"vsoxseg6ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG6EI32V, MASK_VSOXSEG6EI32V, match_opcode, INSN_DREF },
+{"vloxseg7ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG7EI32V, MASK_VLOXSEG7EI32V, match_opcode, INSN_DREF },
+{"vsoxseg7ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG7EI32V, MASK_VSOXSEG7EI32V, match_opcode, INSN_DREF },
+{"vloxseg8ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG8EI32V, MASK_VLOXSEG8EI32V, match_opcode, INSN_DREF },
+{"vsoxseg8ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG8EI32V, MASK_VSOXSEG8EI32V, match_opcode, INSN_DREF },
+
+{"vloxseg2ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG2EI64V, MASK_VLOXSEG2EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsoxseg2ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG2EI64V, MASK_VSOXSEG2EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vloxseg3ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG3EI64V, MASK_VLOXSEG3EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsoxseg3ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG3EI64V, MASK_VSOXSEG3EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vloxseg4ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG4EI64V, MASK_VLOXSEG4EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsoxseg4ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG4EI64V, MASK_VSOXSEG4EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vloxseg5ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG5EI64V, MASK_VLOXSEG5EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsoxseg5ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG5EI64V, MASK_VSOXSEG5EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vloxseg6ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG6EI64V, MASK_VLOXSEG6EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsoxseg6ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG6EI64V, MASK_VSOXSEG6EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vloxseg7ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG7EI64V, MASK_VLOXSEG7EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsoxseg7ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG7EI64V, MASK_VSOXSEG7EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vloxseg8ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLOXSEG8EI64V, MASK_VLOXSEG8EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsoxseg8ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSOXSEG8EI64V, MASK_VSOXSEG8EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+
+{"vluxseg2ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG2EI8V, MASK_VLUXSEG2EI8V, match_opcode, INSN_DREF },
+{"vsuxseg2ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG2EI8V, MASK_VSUXSEG2EI8V, match_opcode, INSN_DREF },
+{"vluxseg3ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG3EI8V, MASK_VLUXSEG3EI8V, match_opcode, INSN_DREF },
+{"vsuxseg3ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG3EI8V, MASK_VSUXSEG3EI8V, match_opcode, INSN_DREF },
+{"vluxseg4ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG4EI8V, MASK_VLUXSEG4EI8V, match_opcode, INSN_DREF },
+{"vsuxseg4ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG4EI8V, MASK_VSUXSEG4EI8V, match_opcode, INSN_DREF },
+{"vluxseg5ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG5EI8V, MASK_VLUXSEG5EI8V, match_opcode, INSN_DREF },
+{"vsuxseg5ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG5EI8V, MASK_VSUXSEG5EI8V, match_opcode, INSN_DREF },
+{"vluxseg6ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG6EI8V, MASK_VLUXSEG6EI8V, match_opcode, INSN_DREF },
+{"vsuxseg6ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG6EI8V, MASK_VSUXSEG6EI8V, match_opcode, INSN_DREF },
+{"vluxseg7ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG7EI8V, MASK_VLUXSEG7EI8V, match_opcode, INSN_DREF },
+{"vsuxseg7ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG7EI8V, MASK_VSUXSEG7EI8V, match_opcode, INSN_DREF },
+{"vluxseg8ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG8EI8V, MASK_VLUXSEG8EI8V, match_opcode, INSN_DREF },
+{"vsuxseg8ei8.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG8EI8V, MASK_VSUXSEG8EI8V, match_opcode, INSN_DREF },
+
+{"vluxseg2ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG2EI16V, MASK_VLUXSEG2EI16V, match_opcode, INSN_DREF },
+{"vsuxseg2ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG2EI16V, MASK_VSUXSEG2EI16V, match_opcode, INSN_DREF },
+{"vluxseg3ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG3EI16V, MASK_VLUXSEG3EI16V, match_opcode, INSN_DREF },
+{"vsuxseg3ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG3EI16V, MASK_VSUXSEG3EI16V, match_opcode, INSN_DREF },
+{"vluxseg4ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG4EI16V, MASK_VLUXSEG4EI16V, match_opcode, INSN_DREF },
+{"vsuxseg4ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG4EI16V, MASK_VSUXSEG4EI16V, match_opcode, INSN_DREF },
+{"vluxseg5ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG5EI16V, MASK_VLUXSEG5EI16V, match_opcode, INSN_DREF },
+{"vsuxseg5ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG5EI16V, MASK_VSUXSEG5EI16V, match_opcode, INSN_DREF },
+{"vluxseg6ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG6EI16V, MASK_VLUXSEG6EI16V, match_opcode, INSN_DREF },
+{"vsuxseg6ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG6EI16V, MASK_VSUXSEG6EI16V, match_opcode, INSN_DREF },
+{"vluxseg7ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG7EI16V, MASK_VLUXSEG7EI16V, match_opcode, INSN_DREF },
+{"vsuxseg7ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG7EI16V, MASK_VSUXSEG7EI16V, match_opcode, INSN_DREF },
+{"vluxseg8ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG8EI16V, MASK_VLUXSEG8EI16V, match_opcode, INSN_DREF },
+{"vsuxseg8ei16.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG8EI16V, MASK_VSUXSEG8EI16V, match_opcode, INSN_DREF },
+
+{"vluxseg2ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG2EI32V, MASK_VLUXSEG2EI32V, match_opcode, INSN_DREF },
+{"vsuxseg2ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG2EI32V, MASK_VSUXSEG2EI32V, match_opcode, INSN_DREF },
+{"vluxseg3ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG3EI32V, MASK_VLUXSEG3EI32V, match_opcode, INSN_DREF },
+{"vsuxseg3ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG3EI32V, MASK_VSUXSEG3EI32V, match_opcode, INSN_DREF },
+{"vluxseg4ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG4EI32V, MASK_VLUXSEG4EI32V, match_opcode, INSN_DREF },
+{"vsuxseg4ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG4EI32V, MASK_VSUXSEG4EI32V, match_opcode, INSN_DREF },
+{"vluxseg5ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG5EI32V, MASK_VLUXSEG5EI32V, match_opcode, INSN_DREF },
+{"vsuxseg5ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG5EI32V, MASK_VSUXSEG5EI32V, match_opcode, INSN_DREF },
+{"vluxseg6ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG6EI32V, MASK_VLUXSEG6EI32V, match_opcode, INSN_DREF },
+{"vsuxseg6ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG6EI32V, MASK_VSUXSEG6EI32V, match_opcode, INSN_DREF },
+{"vluxseg7ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG7EI32V, MASK_VLUXSEG7EI32V, match_opcode, INSN_DREF },
+{"vsuxseg7ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG7EI32V, MASK_VSUXSEG7EI32V, match_opcode, INSN_DREF },
+{"vluxseg8ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG8EI32V, MASK_VLUXSEG8EI32V, match_opcode, INSN_DREF },
+{"vsuxseg8ei32.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG8EI32V, MASK_VSUXSEG8EI32V, match_opcode, INSN_DREF },
+
+{"vluxseg2ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG2EI64V, MASK_VLUXSEG2EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsuxseg2ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG2EI64V, MASK_VSUXSEG2EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vluxseg3ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG3EI64V, MASK_VLUXSEG3EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsuxseg3ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG3EI64V, MASK_VSUXSEG3EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vluxseg4ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG4EI64V, MASK_VLUXSEG4EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsuxseg4ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG4EI64V, MASK_VSUXSEG4EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vluxseg5ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG5EI64V, MASK_VLUXSEG5EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsuxseg5ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG5EI64V, MASK_VSUXSEG5EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vluxseg6ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG6EI64V, MASK_VLUXSEG6EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsuxseg6ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG6EI64V, MASK_VSUXSEG6EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vluxseg7ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG7EI64V, MASK_VLUXSEG7EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsuxseg7ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG7EI64V, MASK_VSUXSEG7EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vluxseg8ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VLUXSEG8EI64V, MASK_VLUXSEG8EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vsuxseg8ei64.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s),VtVm", MATCH_VSUXSEG8EI64V, MASK_VSUXSEG8EI64V, match_opcode, INSN_DREF|INSN_V_EEW64 },
+
+{"vlseg2e8ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG2E8FFV, MASK_VLSEG2E8FFV, match_opcode, INSN_DREF },
+{"vlseg3e8ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG3E8FFV, MASK_VLSEG3E8FFV, match_opcode, INSN_DREF },
+{"vlseg4e8ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG4E8FFV, MASK_VLSEG4E8FFV, match_opcode, INSN_DREF },
+{"vlseg5e8ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG5E8FFV, MASK_VLSEG5E8FFV, match_opcode, INSN_DREF },
+{"vlseg6e8ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG6E8FFV, MASK_VLSEG6E8FFV, match_opcode, INSN_DREF },
+{"vlseg7e8ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG7E8FFV, MASK_VLSEG7E8FFV, match_opcode, INSN_DREF },
+{"vlseg8e8ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG8E8FFV, MASK_VLSEG8E8FFV, match_opcode, INSN_DREF },
+
+{"vlseg2e16ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG2E16FFV, MASK_VLSEG2E16FFV, match_opcode, INSN_DREF },
+{"vlseg3e16ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG3E16FFV, MASK_VLSEG3E16FFV, match_opcode, INSN_DREF },
+{"vlseg4e16ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG4E16FFV, MASK_VLSEG4E16FFV, match_opcode, INSN_DREF },
+{"vlseg5e16ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG5E16FFV, MASK_VLSEG5E16FFV, match_opcode, INSN_DREF },
+{"vlseg6e16ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG6E16FFV, MASK_VLSEG6E16FFV, match_opcode, INSN_DREF },
+{"vlseg7e16ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG7E16FFV, MASK_VLSEG7E16FFV, match_opcode, INSN_DREF },
+{"vlseg8e16ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG8E16FFV, MASK_VLSEG8E16FFV, match_opcode, INSN_DREF },
+
+{"vlseg2e32ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG2E32FFV, MASK_VLSEG2E32FFV, match_opcode, INSN_DREF },
+{"vlseg3e32ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG3E32FFV, MASK_VLSEG3E32FFV, match_opcode, INSN_DREF },
+{"vlseg4e32ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG4E32FFV, MASK_VLSEG4E32FFV, match_opcode, INSN_DREF },
+{"vlseg5e32ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG5E32FFV, MASK_VLSEG5E32FFV, match_opcode, INSN_DREF },
+{"vlseg6e32ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG6E32FFV, MASK_VLSEG6E32FFV, match_opcode, INSN_DREF },
+{"vlseg7e32ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG7E32FFV, MASK_VLSEG7E32FFV, match_opcode, INSN_DREF },
+{"vlseg8e32ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG8E32FFV, MASK_VLSEG8E32FFV, match_opcode, INSN_DREF },
+
+{"vlseg2e64ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG2E64FFV, MASK_VLSEG2E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg3e64ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG3E64FFV, MASK_VLSEG3E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg4e64ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG4E64FFV, MASK_VLSEG4E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg5e64ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG5E64FFV, MASK_VLSEG5E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg6e64ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG6E64FFV, MASK_VLSEG6E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg7e64ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG7E64FFV, MASK_VLSEG7E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
+{"vlseg8e64ff.v",  0, INSN_CLASS_ZVLSSEG,  "Vd,0(s)Vm", MATCH_VLSEG8E64FFV, MASK_VLSEG8E64FFV, match_opcode, INSN_DREF|INSN_V_EEW64 },
 
 {"vl1r.v",      0, INSN_CLASS_V,  "Vd,0(s)", MATCH_VL1RE8V, MASK_VL1RE8V, match_opcode, INSN_DREF|INSN_ALIAS },
 {"vl1re8.v",    0, INSN_CLASS_V,  "Vd,0(s)", MATCH_VL1RE8V, MASK_VL1RE8V, match_opcode, INSN_DREF },
@@ -1328,6 +1393,46 @@ const struct riscv_opcode riscv_opcodes[] =
 {"vs4r.v",  0, INSN_CLASS_V,  "Vd,0(s)", MATCH_VS4RV, MASK_VS4RV, match_opcode, INSN_DREF },
 {"vs8r.v",  0, INSN_CLASS_V,  "Vd,0(s)", MATCH_VS8RV, MASK_VS8RV, match_opcode, INSN_DREF },
 
+{"vamoaddei8.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOADDEI8V, MASK_VAMOADDEI8V, match_opcode, INSN_DREF},
+{"vamoswapei8.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOSWAPEI8V, MASK_VAMOSWAPEI8V, match_opcode, INSN_DREF},
+{"vamoxorei8.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOXOREI8V, MASK_VAMOXOREI8V, match_opcode, INSN_DREF},
+{"vamoandei8.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOANDEI8V, MASK_VAMOANDEI8V, match_opcode, INSN_DREF},
+{"vamoorei8.v",    0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOOREI8V, MASK_VAMOOREI8V, match_opcode, INSN_DREF},
+{"vamominei8.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMINEI8V, MASK_VAMOMINEI8V, match_opcode, INSN_DREF},
+{"vamomaxei8.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMAXEI8V, MASK_VAMOMAXEI8V, match_opcode, INSN_DREF},
+{"vamominuei8.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMINUEI8V, MASK_VAMOMINUEI8V, match_opcode, INSN_DREF},
+{"vamomaxuei8.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMAXUEI8V, MASK_VAMOMAXUEI8V, match_opcode, INSN_DREF},
+
+{"vamoaddei16.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOADDEI16V, MASK_VAMOADDEI16V, match_opcode, INSN_DREF},
+{"vamoswapei16.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOSWAPEI16V, MASK_VAMOSWAPEI16V, match_opcode, INSN_DREF},
+{"vamoxorei16.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOXOREI16V, MASK_VAMOXOREI16V, match_opcode, INSN_DREF},
+{"vamoandei16.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOANDEI16V, MASK_VAMOANDEI16V, match_opcode, INSN_DREF},
+{"vamoorei16.v",    0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOOREI16V, MASK_VAMOOREI16V, match_opcode, INSN_DREF},
+{"vamominei16.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMINEI16V, MASK_VAMOMINEI16V, match_opcode, INSN_DREF},
+{"vamomaxei16.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMAXEI16V, MASK_VAMOMAXEI16V, match_opcode, INSN_DREF},
+{"vamominuei16.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMINUEI16V, MASK_VAMOMINUEI16V, match_opcode, INSN_DREF},
+{"vamomaxuei16.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMAXUEI16V, MASK_VAMOMAXUEI16V, match_opcode, INSN_DREF},
+
+{"vamoaddei32.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOADDEI32V, MASK_VAMOADDEI32V, match_opcode, INSN_DREF},
+{"vamoswapei32.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOSWAPEI32V, MASK_VAMOSWAPEI32V, match_opcode, INSN_DREF},
+{"vamoxorei32.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOXOREI32V, MASK_VAMOXOREI32V, match_opcode, INSN_DREF},
+{"vamoandei32.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOANDEI32V, MASK_VAMOANDEI32V, match_opcode, INSN_DREF},
+{"vamoorei32.v",    0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOOREI32V, MASK_VAMOOREI32V, match_opcode, INSN_DREF},
+{"vamominei32.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMINEI32V, MASK_VAMOMINEI32V, match_opcode, INSN_DREF},
+{"vamomaxei32.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMAXEI32V, MASK_VAMOMAXEI32V, match_opcode, INSN_DREF},
+{"vamominuei32.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMINUEI32V, MASK_VAMOMINUEI32V, match_opcode, INSN_DREF},
+{"vamomaxuei32.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMAXUEI32V, MASK_VAMOMAXUEI32V, match_opcode, INSN_DREF},
+
+{"vamoaddei64.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOADDEI64V, MASK_VAMOADDEI64V, match_opcode, INSN_DREF},
+{"vamoswapei64.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOSWAPEI64V, MASK_VAMOSWAPEI64V, match_opcode, INSN_DREF},
+{"vamoxorei64.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOXOREI64V, MASK_VAMOXOREI64V, match_opcode, INSN_DREF},
+{"vamoandei64.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOANDEI64V, MASK_VAMOANDEI64V, match_opcode, INSN_DREF},
+{"vamoorei64.v",    0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOOREI64V, MASK_VAMOOREI64V, match_opcode, INSN_DREF},
+{"vamominei64.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMINEI64V, MASK_VAMOMINEI64V, match_opcode, INSN_DREF},
+{"vamomaxei64.v",   0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMAXEI64V, MASK_VAMOMAXEI64V, match_opcode, INSN_DREF},
+{"vamominuei64.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMINUEI64V, MASK_VAMOMINUEI64V, match_opcode, INSN_DREF},
+{"vamomaxuei64.v",  0, INSN_CLASS_ZVAMO,  "Ve,0(s),Vt,VfVm", MATCH_VAMOMAXUEI64V, MASK_VAMOMAXUEI64V, match_opcode, INSN_DREF},
+
 {"vneg.v",     0, INSN_CLASS_V,  "Vd,VtVm",  MATCH_VRSUBVX, MASK_VRSUBVX | MASK_RS1, match_opcode, INSN_ALIAS },
 
 {"vadd.vv",    0, INSN_CLASS_V,  "Vd,Vt,VsVm", MATCH_VADDVV, MASK_VADDVV, match_opcode, 0 },
@@ -1742,25 +1847,84 @@ const struct riscv_opcode riscv_opcodes[] =
 {"hinval.gvma",     0, INSN_CLASS_SVINVAL, "s,t", MATCH_HINVAL_GVMA, MASK_HINVAL_GVMA, match_opcode, 0 },
 
 /* Hypervisor instructions.  */
-{"hfence.vvma", 0, INSN_CLASS_I, "",       MATCH_HFENCE_VVMA, MASK_HFENCE_VVMA|MASK_RS1|MASK_RS2, match_opcode, INSN_ALIAS },
-{"hfence.vvma", 0, INSN_CLASS_I, "s",      MATCH_HFENCE_VVMA, MASK_HFENCE_VVMA|MASK_RS2, match_opcode, INSN_ALIAS },
-{"hfence.vvma", 0, INSN_CLASS_I, "s,t",    MATCH_HFENCE_VVMA, MASK_HFENCE_VVMA, match_opcode, 0 },
-{"hfence.gvma", 0, INSN_CLASS_I, "",       MATCH_HFENCE_GVMA, MASK_HFENCE_GVMA|MASK_RS1|MASK_RS2, match_opcode, INSN_ALIAS },
-{"hfence.gvma", 0, INSN_CLASS_I, "s",      MATCH_HFENCE_GVMA, MASK_HFENCE_GVMA|MASK_RS2, match_opcode, INSN_ALIAS },
-{"hfence.gvma", 0, INSN_CLASS_I, "s,t",    MATCH_HFENCE_GVMA, MASK_HFENCE_GVMA, match_opcode, 0 },
-{"hlv.b",       0, INSN_CLASS_I, "d,0(s)", MATCH_HLV_B, MASK_HLV_B, match_opcode, INSN_DREF|INSN_1_BYTE },
-{"hlv.bu",      0, INSN_CLASS_I, "d,0(s)", MATCH_HLV_BU, MASK_HLV_BU, match_opcode, INSN_DREF|INSN_1_BYTE },
-{"hlv.h",       0, INSN_CLASS_I, "d,0(s)", MATCH_HLV_H, MASK_HLV_H, match_opcode, INSN_DREF|INSN_2_BYTE },
-{"hlv.hu",      0, INSN_CLASS_I, "d,0(s)", MATCH_HLV_HU, MASK_HLV_HU, match_opcode, INSN_DREF|INSN_2_BYTE },
-{"hlvx.hu",     0, INSN_CLASS_I, "d,0(s)", MATCH_HLVX_HU, MASK_HLVX_HU, match_opcode, INSN_DREF|INSN_2_BYTE },
-{"hlv.w",       0, INSN_CLASS_I, "d,0(s)", MATCH_HLV_W, MASK_HLV_W, match_opcode, INSN_DREF|INSN_4_BYTE },
-{"hlv.wu",     64, INSN_CLASS_I, "d,0(s)", MATCH_HLV_WU, MASK_HLV_WU, match_opcode, INSN_DREF|INSN_4_BYTE },
-{"hlvx.wu",     0, INSN_CLASS_I, "d,0(s)", MATCH_HLVX_WU, MASK_HLVX_WU, match_opcode, INSN_DREF|INSN_4_BYTE },
-{"hlv.d",      64, INSN_CLASS_I, "d,0(s)", MATCH_HLV_D, MASK_HLV_D, match_opcode, INSN_DREF|INSN_8_BYTE },
-{"hsv.b",       0, INSN_CLASS_I, "t,0(s)", MATCH_HSV_B, MASK_HSV_B, match_opcode, INSN_DREF|INSN_1_BYTE },
-{"hsv.h",       0, INSN_CLASS_I, "t,0(s)", MATCH_HSV_H, MASK_HSV_H, match_opcode, INSN_DREF|INSN_2_BYTE },
-{"hsv.w",       0, INSN_CLASS_I, "t,0(s)", MATCH_HSV_W, MASK_HSV_W, match_opcode, INSN_DREF|INSN_4_BYTE },
-{"hsv.d",      64, INSN_CLASS_I, "t,0(s)", MATCH_HSV_D, MASK_HSV_D, match_opcode, INSN_DREF|INSN_8_BYTE },
+{"hfence.vvma", 0, INSN_CLASS_H, "",       MATCH_HFENCE_VVMA, MASK_HFENCE_VVMA|MASK_RS1|MASK_RS2, match_opcode, INSN_ALIAS },
+{"hfence.vvma", 0, INSN_CLASS_H, "s",      MATCH_HFENCE_VVMA, MASK_HFENCE_VVMA|MASK_RS2, match_opcode, INSN_ALIAS },
+{"hfence.vvma", 0, INSN_CLASS_H, "s,t",    MATCH_HFENCE_VVMA, MASK_HFENCE_VVMA, match_opcode, 0 },
+{"hfence.gvma", 0, INSN_CLASS_H, "",       MATCH_HFENCE_GVMA, MASK_HFENCE_GVMA|MASK_RS1|MASK_RS2, match_opcode, INSN_ALIAS },
+{"hfence.gvma", 0, INSN_CLASS_H, "s",      MATCH_HFENCE_GVMA, MASK_HFENCE_GVMA|MASK_RS2, match_opcode, INSN_ALIAS },
+{"hfence.gvma", 0, INSN_CLASS_H, "s,t",    MATCH_HFENCE_GVMA, MASK_HFENCE_GVMA, match_opcode, 0 },
+{"hlv.b",       0, INSN_CLASS_H, "d,0(s)", MATCH_HLV_B, MASK_HLV_B, match_opcode, INSN_DREF|INSN_1_BYTE },
+{"hlv.bu",      0, INSN_CLASS_H, "d,0(s)", MATCH_HLV_BU, MASK_HLV_BU, match_opcode, INSN_DREF|INSN_1_BYTE },
+{"hlv.h",       0, INSN_CLASS_H, "d,0(s)", MATCH_HLV_H, MASK_HLV_H, match_opcode, INSN_DREF|INSN_2_BYTE },
+{"hlv.hu",      0, INSN_CLASS_H, "d,0(s)", MATCH_HLV_HU, MASK_HLV_HU, match_opcode, INSN_DREF|INSN_2_BYTE },
+{"hlvx.hu",     0, INSN_CLASS_H, "d,0(s)", MATCH_HLVX_HU, MASK_HLVX_HU, match_opcode, INSN_DREF|INSN_2_BYTE },
+{"hlv.w",       0, INSN_CLASS_H, "d,0(s)", MATCH_HLV_W, MASK_HLV_W, match_opcode, INSN_DREF|INSN_4_BYTE },
+{"hlv.wu",     64, INSN_CLASS_H, "d,0(s)", MATCH_HLV_WU, MASK_HLV_WU, match_opcode, INSN_DREF|INSN_4_BYTE },
+{"hlvx.wu",     0, INSN_CLASS_H, "d,0(s)", MATCH_HLVX_WU, MASK_HLVX_WU, match_opcode, INSN_DREF|INSN_4_BYTE },
+{"hlv.d",      64, INSN_CLASS_H, "d,0(s)", MATCH_HLV_D, MASK_HLV_D, match_opcode, INSN_DREF|INSN_8_BYTE },
+{"hsv.b",       0, INSN_CLASS_H, "t,0(s)", MATCH_HSV_B, MASK_HSV_B, match_opcode, INSN_DREF|INSN_1_BYTE },
+{"hsv.h",       0, INSN_CLASS_H, "t,0(s)", MATCH_HSV_H, MASK_HSV_H, match_opcode, INSN_DREF|INSN_2_BYTE },
+{"hsv.w",       0, INSN_CLASS_H, "t,0(s)", MATCH_HSV_W, MASK_HSV_W, match_opcode, INSN_DREF|INSN_4_BYTE },
+{"hsv.d",      64, INSN_CLASS_H, "t,0(s)", MATCH_HSV_D, MASK_HSV_D, match_opcode, INSN_DREF|INSN_8_BYTE },
+
+/* SiFive MNRET instruction.  */
+{"mnret",  0, INSN_CLASS_I, "", MATCH_MNRET, MASK_MNRET, match_opcode, 0 },
+
+/* SiFive cache control instruction.  */
+{"cflush.d.l1",   0, INSN_CLASS_I, "s", MATCH_CFLUSH_D_L1, MASK_CFLUSH_D_L1, match_opcode, 0 },
+{"cdiscard.d.l1", 0, INSN_CLASS_I, "s", MATCH_CDISCARD_D_L1, MASK_CDISCARD_D_L1, match_opcode, 0 },
+{"cflush.i.l1",   0, INSN_CLASS_I, "", MATCH_CFLUSH_I_L1, MASK_CFLUSH_I_L1, match_opcode, 0 },
+
+/* SiFive custom int8 matrix-multiply instructions.  */
+{"sf.vqmaccu.4x8x4",  0, INSN_CLASS_XSFVQMACCQOQ, "Vd,Vs,Vt", MATCH_SFVQMACCU4X8X4, MASK_SFVQMACCU4X8X4, match_opcode, 0},
+{"sf.vqmacc.4x8x4",   0, INSN_CLASS_XSFVQMACCQOQ, "Vd,Vs,Vt", MATCH_SFVQMACC4X8X4, MASK_SFVQMACC4X8X4, match_opcode, 0},
+{"sf.vqmaccus.4x8x4", 0, INSN_CLASS_XSFVQMACCQOQ, "Vd,Vs,Vt", MATCH_SFVQMACCUS4X8X4, MASK_SFVQMACCUS4X8X4, match_opcode, 0},
+{"sf.vqmaccsu.4x8x4", 0, INSN_CLASS_XSFVQMACCQOQ, "Vd,Vs,Vt", MATCH_SFVQMACCSU4X8X4, MASK_SFVQMACCSU4X8X4, match_opcode, 0},
+{"sf.vqmaccu.2x8x2",  0, INSN_CLASS_XSFVQMACCDOD, "Vd,Vs,Vt", MATCH_SFVQMACCU2X8X2, MASK_SFVQMACCU2X8X2, match_opcode, 0},
+{"sf.vqmacc.2x8x2",   0, INSN_CLASS_XSFVQMACCDOD, "Vd,Vs,Vt", MATCH_SFVQMACC2X8X2, MASK_SFVQMACC2X8X2, match_opcode, 0},
+{"sf.vqmaccus.2x8x2", 0, INSN_CLASS_XSFVQMACCDOD, "Vd,Vs,Vt", MATCH_SFVQMACCUS2X8X2, MASK_SFVQMACCUS2X8X2, match_opcode, 0},
+{"sf.vqmaccsu.2x8x2", 0, INSN_CLASS_XSFVQMACCDOD, "Vd,Vs,Vt", MATCH_SFVQMACCSU2X8X2, MASK_SFVQMACCSU2X8X2, match_opcode, 0},
+
+/* SiFive custom minimal bfloat16 vector instructions.  */
+{"sf.vfwcvt.f.bf16.v",0, INSN_CLASS_XSFVFHBFMIN, "Vd,VtVm", MATCH_SFVFWCVTFBF16V, MASK_SFVFWCVTFBF16V, match_opcode, 0},
+{"sf.vfncvt.bf16.f.w",0, INSN_CLASS_XSFVFHBFMIN, "Vd,VtVm", MATCH_SFVFNCVTBF16FW, MASK_SFVFNCVTBF16FW, match_opcode, 0},
+
+/* SiFive custom bfloat16 matrix arithmetic vector instructions.  */
+{"sf.vfwmacc.4x4x4",  0, INSN_CLASS_XSFVFWNACCQQQ, "Vd,Vs,Vt", MATCH_SFVFWMACC4X4X4, MASK_SFVFWMACC4X4X4, match_opcode, 0},
+
+/* SiFive custom bfloat16 requantization vector instructions.  */
+{"sf.vfnrclip.xu.f.qf", 0, INSN_CLASS_XSFVFNRCLIPXFQF, "Vd,Vt,S", MATCH_SFVFNRCLIPXUFQF, MASK_SFVFNRCLIPXUFQF, match_opcode, 0},
+{"sf.vfnrclip.x.f.qf",  0, INSN_CLASS_XSFVFNRCLIPXFQF, "Vd,Vt,S", MATCH_SFVFNRCLIPXFQF, MASK_SFVFNRCLIPXFQF, match_opcode, 0},
+
+/* Sifive vector coprocessor interface instruction.  */
+{"sf.vc.x",     0, INSN_CLASS_XSFVCP, "XO2,Xt,Xd,s",  MATCH_SF_VC_X, MASK_SF_VC_X, match_opcode, 0 },
+{"sf.vc.v.x",   0, INSN_CLASS_XSFVCP, "XO2,Xt,Vd,s",  MATCH_SF_VC_V_X, MASK_SF_VC_V_X, match_opcode, 0 },
+{"sf.vc.i",     0, INSN_CLASS_XSFVCP, "XO2,Xt,Xd,Vi", MATCH_SF_VC_I, MASK_SF_VC_I, match_opcode, 0 },
+{"sf.vc.v.i",   0, INSN_CLASS_XSFVCP, "XO2,Xt,Vd,Vi", MATCH_SF_VC_V_I, MASK_SF_VC_V_I, match_opcode, 0 },
+{"sf.vc.vv",    0, INSN_CLASS_XSFVCP, "XO2,Xd,Vt,Vs", MATCH_SF_VC_VV, MASK_SF_VC_VV, match_opcode, 0 },
+{"sf.vc.v.vv",  0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,Vs", MATCH_SF_VC_V_VV, MASK_SF_VC_V_VV, match_opcode, 0 },
+{"sf.vc.xv",    0, INSN_CLASS_XSFVCP, "XO2,Xd,Vt,s",  MATCH_SF_VC_XV, MASK_SF_VC_XV, match_opcode, 0 },
+{"sf.vc.v.xv",  0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,s",  MATCH_SF_VC_V_XV, MASK_SF_VC_V_XV, match_opcode, 0 },
+{"sf.vc.iv",    0, INSN_CLASS_XSFVCP, "XO2,Xd,Vt,Vi", MATCH_SF_VC_IV, MASK_SF_VC_IV, match_opcode, 0 },
+{"sf.vc.v.iv",  0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,Vi", MATCH_SF_VC_V_IV, MASK_SF_VC_V_IV, match_opcode, 0 },
+{"sf.vc.fv",    0, INSN_CLASS_XSFVCP, "XO1,Xd,Vt,S",  MATCH_SF_VC_FV, MASK_SF_VC_FV, match_opcode, 0 },
+{"sf.vc.v.fv",  0, INSN_CLASS_XSFVCP, "XO1,Vd,Vt,S",  MATCH_SF_VC_V_FV, MASK_SF_VC_V_FV, match_opcode, 0 },
+{"sf.vc.vvv",   0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,Vs", MATCH_SF_VC_VVV, MASK_SF_VC_VVV, match_opcode, 0 },
+{"sf.vc.v.vvv", 0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,Vs", MATCH_SF_VC_V_VVV, MASK_SF_VC_V_VVV, match_opcode, 0 },
+{"sf.vc.xvv",   0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,s",  MATCH_SF_VC_XVV, MASK_SF_VC_XVV, match_opcode, 0 },
+{"sf.vc.v.xvv", 0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,s",  MATCH_SF_VC_V_XVV, MASK_SF_VC_V_XVV, match_opcode, 0 },
+{"sf.vc.ivv",   0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,Vi", MATCH_SF_VC_IVV, MASK_SF_VC_IVV, match_opcode, 0 },
+{"sf.vc.v.ivv", 0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,Vi", MATCH_SF_VC_V_IVV, MASK_SF_VC_V_IVV, match_opcode, 0 },
+{"sf.vc.fvv",   0, INSN_CLASS_XSFVCP, "XO1,Vd,Vt,S",  MATCH_SF_VC_FVV, MASK_SF_VC_FVV, match_opcode, 0 },
+{"sf.vc.v.fvv", 0, INSN_CLASS_XSFVCP, "XO1,Vd,Vt,S",  MATCH_SF_VC_V_FVV, MASK_SF_VC_V_FVV, match_opcode, 0 },
+{"sf.vc.vvw",   0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,Vs", MATCH_SF_VC_VVW, MASK_SF_VC_VVW, match_opcode, 0 },
+{"sf.vc.v.vvw", 0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,Vs", MATCH_SF_VC_V_VVW, MASK_SF_VC_V_VVW, match_opcode, 0 },
+{"sf.vc.xvw",   0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,s",  MATCH_SF_VC_XVW, MASK_SF_VC_XVW, match_opcode, 0 },
+{"sf.vc.v.xvw", 0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,s",  MATCH_SF_VC_V_XVW, MASK_SF_VC_V_XVW, match_opcode, 0 },
+{"sf.vc.ivw",   0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,Vi", MATCH_SF_VC_IVW, MASK_SF_VC_IVW, match_opcode, 0 },
+{"sf.vc.v.ivw", 0, INSN_CLASS_XSFVCP, "XO2,Vd,Vt,Vi", MATCH_SF_VC_V_IVW, MASK_SF_VC_V_IVW, match_opcode, 0 },
+{"sf.vc.fvw",   0, INSN_CLASS_XSFVCP, "XO1,Vd,Vt,S",  MATCH_SF_VC_FVW, MASK_SF_VC_FVW, match_opcode, 0 },
+{"sf.vc.v.fvw", 0, INSN_CLASS_XSFVCP, "XO1,Vd,Vt,S",  MATCH_SF_VC_V_FVW, MASK_SF_VC_V_FVW, match_opcode, 0 },
 
 /* Terminate the list.  */
 {0, 0, INSN_CLASS_NONE, 0, 0, 0, 0, 0}
