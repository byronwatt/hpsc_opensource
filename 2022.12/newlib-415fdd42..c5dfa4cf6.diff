diff --git a/libgloss/riscv/Makefile.in b/libgloss/riscv/Makefile.in
index 185b6e6d2..46abdb861 100644
--- a/libgloss/riscv/Makefile.in
+++ b/libgloss/riscv/Makefile.in
@@ -148,7 +148,7 @@ gloss_c_objs = $(patsubst %.c, %.o, $(notdir $(gloss_c_srcs)))
 gloss_c_deps = $(patsubst %.c, %.d, $(notdir $(gloss_c_srcs)))
 
 $(gloss_c_objs) : %.o : %.c
-	$(COMPILE) -c $<
+	$(COMPILE) -c -DUSING_QEMU $<
 
 gloss_objs += $(gloss_c_objs)
 deps += $(gloss_c_deps)
diff --git a/libgloss/riscv/crt0.S b/libgloss/riscv/crt0.S
index 160c07853..b8c162e9e 100644
--- a/libgloss/riscv/crt0.S
+++ b/libgloss/riscv/crt0.S
@@ -22,13 +22,25 @@ _start:
   # Initialize global pointer
 .option push
 .option norelax
+#ifdef __riscv_cmodel_compact
+1:auipc        a0, %pcrel_hi(__global_pointer__)
+  addi a0, a0, %pcrel_lo(1b)
+  ld   gp, 0(a0)
+  add  gp, gp, a0
+#else
 1:auipc gp, %pcrel_hi(__global_pointer$)
   addi  gp, gp, %pcrel_lo(1b)
+#endif
 .option pop
 
   # Clear the bss segment
+#ifdef __riscv_cmodel_compact
+  lla.gprel    a0, _edata
+  lla.gprel    a2, _end
+#else
   la      a0, _edata
   la      a2, _end
+#endif
   sub     a2, a2, a0
   li      a1, 0
   call    memset
@@ -36,12 +48,20 @@ _start:
   # Make reference to atexit weak to avoid unconditionally pulling in
   # support code.  Refer to comments in __atexit.c for more details.
   .weak   atexit
+#ifdef __riscv_cmodel_compact
+  la.got.gprel a0, atexit
+#else
   la      a0, atexit
+#endif
   beqz    a0, .Lweak_atexit
   .weak   __libc_fini_array
 #endif
 
+#ifdef __riscv_cmodel_compact
+  la.got.gprel a0, __libc_fini_array
+#else
   la      a0, __libc_fini_array   # Register global termination functions
+#endif
   call    atexit                  #  to be called upon exit
 #ifdef _LITE_EXIT
 .Lweak_atexit:
@@ -54,3 +74,12 @@ _start:
   call    main
   tail    exit
   .size  _start, .-_start
+
+#ifdef __riscv_cmodel_compact
+  .section .text.__global_pointer__, "aMG",@progbits, 8, __global_pointer__, comdat
+  .align 3
+  .global __global_pointer__
+  .type   __global_pointer__, object
+__global_pointer__:
+  .quad   __global_pointer$ -.
+#endif
diff --git a/libgloss/riscv/machine/syscall.h b/libgloss/riscv/machine/syscall.h
index 88b9fdfda..94d8197fd 100644
--- a/libgloss/riscv/machine/syscall.h
+++ b/libgloss/riscv/machine/syscall.h
@@ -15,12 +15,17 @@
 #define SYS_getcwd 17
 #define SYS_dup 23
 #define SYS_fcntl 25
+#define SYS_unlinkat 35
 #define SYS_faccessat 48
 #define SYS_chdir 49
 #define SYS_openat 56
 #define SYS_close 57
 #define SYS_getdents 61
+#if __riscv_xlen == 32
+#define SYS_llseek 62
+#else
 #define SYS_lseek 62
+#endif
 #define SYS_read 63
 #define SYS_write 64
 #define SYS_writev 66
@@ -44,6 +49,7 @@
 #define SYS_munmap 215
 #define SYS_mremap 216
 #define SYS_mmap 222
+#define SYS_clock_gettime64 403
 #define SYS_open 1024
 #define SYS_link 1025
 #define SYS_unlink 1026
@@ -79,4 +85,11 @@
 #define SEMIHOST_write 0x05
 #define SEMIHOST_writec 0x03
 #define SEMIHOST_write0 0x04
+
+
+#ifdef USING_QEMU
+/* Newlib and linux using differnt value for AT_FDCWD.  */
+#define LINUX_AT_FDCWD           -100
+#endif
+
 #endif
diff --git a/libgloss/riscv/sys_getpid.c b/libgloss/riscv/sys_getpid.c
index 2aa072177..1edd87420 100644
--- a/libgloss/riscv/sys_getpid.c
+++ b/libgloss/riscv/sys_getpid.c
@@ -1,11 +1,15 @@
 #include <machine/syscall.h>
-
-/* Get process id. This is sometimes used to generate strings unlikely
-   to conflict with other processes. Minimal implementation for a
-   system without processes just returns 1.  */
+#include "internal_syscall.h"
 
 int
 _getpid()
 {
+#ifdef USING_QEMU
+  return syscall_errno (SYS_getpid, 0, 0, 0, 0, 0, 0, 0);
+#else
+/* Get process id. This is sometimes used to generate strings unlikely
+   to conflict with other processes. Minimal implementation for a
+   system without processes just returns 1.  */
   return 1;
+#endif
 }
diff --git a/libgloss/riscv/sys_gettimeofday.c b/libgloss/riscv/sys_gettimeofday.c
index daa14e475..36d4d09d9 100644
--- a/libgloss/riscv/sys_gettimeofday.c
+++ b/libgloss/riscv/sys_gettimeofday.c
@@ -1,10 +1,31 @@
 #include <machine/syscall.h>
 #include <sys/time.h>
+#include <stdint.h>
 #include "internal_syscall.h"
 
 /* Get the current time.  Only relatively correct.  */
 int
 _gettimeofday(struct timeval *tp, void *tzp)
 {
+#if __riscv_xlen == 32
+  struct __timespec64
+  {
+    int64_t tv_sec;         /* Seconds */
+# if BYTE_ORDER == BIG_ENDIAN
+    int32_t __padding;             /* Padding */
+    int32_t tv_nsec;         /* Nanoseconds */
+# else
+    int32_t tv_nsec;         /* Nanoseconds */
+    int32_t __padding;             /* Padding */
+# endif
+  };
+  struct __timespec64 ts64;
+  int rv;
+  rv = syscall_errno (SYS_clock_gettime64, 2, 0, (long)&ts64, 0, 0, 0, 0);
+  tp->tv_sec = ts64.tv_sec;
+  tp->tv_usec = ts64.tv_nsec * 1000;
+  return rv;
+#else
   return syscall_errno (SYS_gettimeofday, 1, tp, 0, 0, 0, 0, 0);
+#endif
 }
diff --git a/libgloss/riscv/sys_lseek.c b/libgloss/riscv/sys_lseek.c
index 8eb8b8131..6c2455210 100644
--- a/libgloss/riscv/sys_lseek.c
+++ b/libgloss/riscv/sys_lseek.c
@@ -6,5 +6,16 @@
 off_t
 _lseek(int file, off_t ptr, int dir)
 {
+#if __riscv_xlen == 32
+  /* Emulate lseek by llseek, because RV32 linux only provide llseek.  */
+  long long res;
+  int rv;
+  rv = syscall_errno (SYS_llseek, 5, file, 0, ptr, (long)&res, dir, 0);
+  if (rv >= 0)
+    return res;
+  else
+    return rv;
+#else
   return syscall_errno (SYS_lseek, 3, file, ptr, dir, 0, 0, 0);
+#endif
 }
diff --git a/libgloss/riscv/sys_open.c b/libgloss/riscv/sys_open.c
index eb1a99ba2..e3b6b4edd 100644
--- a/libgloss/riscv/sys_open.c
+++ b/libgloss/riscv/sys_open.c
@@ -1,9 +1,19 @@
 #include <machine/syscall.h>
 #include "internal_syscall.h"
 
+#ifdef USING_QEMU
+#include <fcntl.h>
+
+extern int _openat(int dirfd, const char *name, int flags, int mode);
+#endif
+
 /* Open a file.  */
 int
 _open(const char *name, int flags, int mode)
 {
+#ifdef USING_QEMU
+  return _openat (AT_FDCWD, name, flags, mode);
+#else
   return syscall_errno (SYS_open, 3, name, flags, mode, 0, 0, 0);
+#endif
 }
diff --git a/libgloss/riscv/sys_openat.c b/libgloss/riscv/sys_openat.c
index 652ab2ea7..2f399dc25 100644
--- a/libgloss/riscv/sys_openat.c
+++ b/libgloss/riscv/sys_openat.c
@@ -1,8 +1,44 @@
 #include <machine/syscall.h>
 #include "internal_syscall.h"
 
+#ifdef USING_QEMU
+#include <fcntl.h>
+
+/* And also using differnt value for open's flags.  */
+#define LINUX_O_CREAT 0100
+#define LINUX_O_TRUNC 01000
+#define LINUX_O_APPEND 02000
+
+static int traslate_flags(int flags)
+{
+  /* O_WRONLY and O_RDWR are same as Linux.  */
+  int new_flags = flags & (O_RDWR | O_WRONLY);
+
+  if (flags & O_CREAT)
+    new_flags |= LINUX_O_CREAT;
+
+  if (flags & O_TRUNC)
+    new_flags |= LINUX_O_TRUNC;
+
+  if (flags & O_APPEND)
+    new_flags |= LINUX_O_APPEND;
+
+  return new_flags;
+}
+#endif
+
 /* Open file relative to given directory.  */
 int _openat(int dirfd, const char *name, int flags, int mode)
 {
-  return syscall_errno (SYS_openat, 4, dirfd, name, flags, mode, 0, 0);
+  int traslated_flags_dirfd = dirfd;
+  int traslated_flags = flags;
+
+#ifdef USING_QEMU
+  traslated_flags = traslate_flags (flags);
+  if (dirfd == AT_FDCWD)
+    traslated_flags_dirfd = LINUX_AT_FDCWD;
+#endif
+
+  return syscall_errno (SYS_openat, 4, traslated_flags_dirfd,
+			name, traslated_flags, mode, 0, 0);
 }
diff --git a/libgloss/riscv/sys_stat.c b/libgloss/riscv/sys_stat.c
index 1e03700df..37325b417 100644
--- a/libgloss/riscv/sys_stat.c
+++ b/libgloss/riscv/sys_stat.c
@@ -8,7 +8,14 @@ int
 _stat(const char *file, struct stat *st)
 {
   struct kernel_stat kst;
-  int rv = syscall_errno (SYS_stat, 2, file, &kst, 0, 0, 0, 0);
+  int rv;
+#ifdef USING_QEMU
+  /* RISC-V Linux provide newfstatat/fstatat64, and newfstatat
+     only that require 4 argument.  */
+  rv = syscall_errno (SYS_fstatat, 4, LINUX_AT_FDCWD, file, &kst, 0, 0, 0);
+#else
+  rv = syscall_errno (SYS_stat, 2, file, &kst, 0, 0, 0, 0);
+#endif
   _conv_stat (st, &kst);
   return rv;
 }
diff --git a/libgloss/riscv/sys_unlink.c b/libgloss/riscv/sys_unlink.c
index 1cf6bbe8b..64850757d 100644
--- a/libgloss/riscv/sys_unlink.c
+++ b/libgloss/riscv/sys_unlink.c
@@ -5,5 +5,9 @@
 int
 _unlink(const char *name)
 {
+#ifdef USING_QEMU
+  return syscall_errno (SYS_unlinkat, 3, LINUX_AT_FDCWD, name, 0, 0, 0, 0);
+#else
   return syscall_errno (SYS_unlink, 1, name, 0, 0, 0, 0, 0);
+#endif
 }
diff --git a/newlib/libc/include/math.h b/newlib/libc/include/math.h
index ba1a8a17e..2f9e3ce2a 100644
--- a/newlib/libc/include/math.h
+++ b/newlib/libc/include/math.h
@@ -146,7 +146,7 @@ extern int isnan (double);
   #define __TMP_FLT_EVAL_METHOD
 #endif /* FLT_EVAL_METHOD */
 #if defined FLT_EVAL_METHOD
-  #if FLT_EVAL_METHOD == 0
+  #if (FLT_EVAL_METHOD == 0) || (FLT_EVAL_METHOD == 16)
     typedef float  float_t;
     typedef double double_t;
    #elif FLT_EVAL_METHOD == 1
diff --git a/newlib/libc/include/stdatomic.h b/newlib/libc/include/stdatomic.h
deleted file mode 100644
index d58e795eb..000000000
--- a/newlib/libc/include/stdatomic.h
+++ /dev/null
@@ -1,409 +0,0 @@
-/*-
- * Copyright (c) 2011 Ed Schouten <ed@FreeBSD.org>
- *                    David Chisnall <theraven@FreeBSD.org>
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- * $FreeBSD$
- */
-
-#ifndef _STDATOMIC_H_
-#define	_STDATOMIC_H_
-
-#include <sys/cdefs.h>
-#include <sys/_types.h>
-
-#if __has_extension(c_atomic) || __has_extension(cxx_atomic)
-#define	__CLANG_ATOMICS
-#elif __GNUC_PREREQ__(4, 7)
-#define	__GNUC_ATOMICS
-#elif defined(__GNUC__)
-#define	__SYNC_ATOMICS
-#else
-#error "stdatomic.h does not support your compiler"
-#endif
-
-/*
- * 7.17.1 Atomic lock-free macros.
- */
-
-#ifdef __GCC_ATOMIC_BOOL_LOCK_FREE
-#define	ATOMIC_BOOL_LOCK_FREE		__GCC_ATOMIC_BOOL_LOCK_FREE
-#endif
-#ifdef __GCC_ATOMIC_CHAR_LOCK_FREE
-#define	ATOMIC_CHAR_LOCK_FREE		__GCC_ATOMIC_CHAR_LOCK_FREE
-#endif
-#ifdef __GCC_ATOMIC_CHAR16_T_LOCK_FREE
-#define	ATOMIC_CHAR16_T_LOCK_FREE	__GCC_ATOMIC_CHAR16_T_LOCK_FREE
-#endif
-#ifdef __GCC_ATOMIC_CHAR32_T_LOCK_FREE
-#define	ATOMIC_CHAR32_T_LOCK_FREE	__GCC_ATOMIC_CHAR32_T_LOCK_FREE
-#endif
-#ifdef __GCC_ATOMIC_WCHAR_T_LOCK_FREE
-#define	ATOMIC_WCHAR_T_LOCK_FREE	__GCC_ATOMIC_WCHAR_T_LOCK_FREE
-#endif
-#ifdef __GCC_ATOMIC_SHORT_LOCK_FREE
-#define	ATOMIC_SHORT_LOCK_FREE		__GCC_ATOMIC_SHORT_LOCK_FREE
-#endif
-#ifdef __GCC_ATOMIC_INT_LOCK_FREE
-#define	ATOMIC_INT_LOCK_FREE		__GCC_ATOMIC_INT_LOCK_FREE
-#endif
-#ifdef __GCC_ATOMIC_LONG_LOCK_FREE
-#define	ATOMIC_LONG_LOCK_FREE		__GCC_ATOMIC_LONG_LOCK_FREE
-#endif
-#ifdef __GCC_ATOMIC_LLONG_LOCK_FREE
-#define	ATOMIC_LLONG_LOCK_FREE		__GCC_ATOMIC_LLONG_LOCK_FREE
-#endif
-#ifdef __GCC_ATOMIC_POINTER_LOCK_FREE
-#define	ATOMIC_POINTER_LOCK_FREE	__GCC_ATOMIC_POINTER_LOCK_FREE
-#endif
-
-/*
- * 7.17.2 Initialization.
- */
-
-#if defined(__CLANG_ATOMICS)
-#define	ATOMIC_VAR_INIT(value)		(value)
-#define	atomic_init(obj, value)		__c11_atomic_init(obj, value)
-#else
-#define	ATOMIC_VAR_INIT(value)		{ .__val = (value) }
-#define	atomic_init(obj, value)		((void)((obj)->__val = (value)))
-#endif
-
-/*
- * Clang and recent GCC both provide predefined macros for the memory
- * orderings.  If we are using a compiler that doesn't define them, use the
- * clang values - these will be ignored in the fallback path.
- */
-
-#ifndef __ATOMIC_RELAXED
-#define __ATOMIC_RELAXED		0
-#endif
-#ifndef __ATOMIC_CONSUME
-#define __ATOMIC_CONSUME		1
-#endif
-#ifndef __ATOMIC_ACQUIRE
-#define __ATOMIC_ACQUIRE		2
-#endif
-#ifndef __ATOMIC_RELEASE
-#define __ATOMIC_RELEASE		3
-#endif
-#ifndef __ATOMIC_ACQ_REL
-#define __ATOMIC_ACQ_REL		4
-#endif
-#ifndef __ATOMIC_SEQ_CST
-#define __ATOMIC_SEQ_CST		5
-#endif
-
-/*
- * 7.17.3 Order and consistency.
- *
- * The memory_order_* constants that denote the barrier behaviour of the
- * atomic operations.
- */
-
-typedef enum {
-	memory_order_relaxed = __ATOMIC_RELAXED,
-	memory_order_consume = __ATOMIC_CONSUME,
-	memory_order_acquire = __ATOMIC_ACQUIRE,
-	memory_order_release = __ATOMIC_RELEASE,
-	memory_order_acq_rel = __ATOMIC_ACQ_REL,
-	memory_order_seq_cst = __ATOMIC_SEQ_CST
-} memory_order;
-
-/*
- * 7.17.4 Fences.
- */
-
-static __inline void
-atomic_thread_fence(memory_order __order __unused)
-{
-
-#ifdef __CLANG_ATOMICS
-	__c11_atomic_thread_fence(__order);
-#elif defined(__GNUC_ATOMICS)
-	__atomic_thread_fence(__order);
-#else
-	__sync_synchronize();
-#endif
-}
-
-static __inline void
-atomic_signal_fence(memory_order __order __unused)
-{
-
-#ifdef __CLANG_ATOMICS
-	__c11_atomic_signal_fence(__order);
-#elif defined(__GNUC_ATOMICS)
-	__atomic_signal_fence(__order);
-#else
-	__asm volatile ("" ::: "memory");
-#endif
-}
-
-/*
- * 7.17.5 Lock-free property.
- */
-
-#if defined(_KERNEL)
-/* Atomics in kernelspace are always lock-free. */
-#define	atomic_is_lock_free(obj) \
-	((void)(obj), (_Bool)1)
-#elif defined(__CLANG_ATOMICS) || defined(__GNUC_ATOMICS)
-#define	atomic_is_lock_free(obj) \
-	__atomic_is_lock_free(sizeof(*(obj)), obj)
-#else
-#define	atomic_is_lock_free(obj) \
-	((void)(obj), sizeof((obj)->__val) <= sizeof(void *))
-#endif
-
-/*
- * 7.17.6 Atomic integer types.
- */
-
-typedef _Atomic(_Bool)			atomic_bool;
-typedef _Atomic(char)			atomic_char;
-typedef _Atomic(signed char)		atomic_schar;
-typedef _Atomic(unsigned char)		atomic_uchar;
-typedef _Atomic(short)			atomic_short;
-typedef _Atomic(unsigned short)		atomic_ushort;
-typedef _Atomic(int)			atomic_int;
-typedef _Atomic(unsigned int)		atomic_uint;
-typedef _Atomic(long)			atomic_long;
-typedef _Atomic(unsigned long)		atomic_ulong;
-typedef _Atomic(long long)		atomic_llong;
-typedef _Atomic(unsigned long long)	atomic_ullong;
-#if 0
-typedef _Atomic(__char16_t)		atomic_char16_t;
-typedef _Atomic(__char32_t)		atomic_char32_t;
-#endif
-typedef _Atomic(wchar_t)		atomic_wchar_t;
-typedef _Atomic(int_least8_t)		atomic_int_least8_t;
-typedef _Atomic(uint_least8_t)		atomic_uint_least8_t;
-typedef _Atomic(int_least16_t)		atomic_int_least16_t;
-typedef _Atomic(uint_least16_t)		atomic_uint_least16_t;
-typedef _Atomic(int_least32_t)		atomic_int_least32_t;
-typedef _Atomic(uint_least32_t)		atomic_uint_least32_t;
-typedef _Atomic(int_least64_t)		atomic_int_least64_t;
-typedef _Atomic(uint_least64_t)		atomic_uint_least64_t;
-typedef _Atomic(int_fast8_t)		atomic_int_fast8_t;
-typedef _Atomic(uint_fast8_t)		atomic_uint_fast8_t;
-typedef _Atomic(int_fast16_t)		atomic_int_fast16_t;
-typedef _Atomic(uint_fast16_t)		atomic_uint_fast16_t;
-typedef _Atomic(int_fast32_t)		atomic_int_fast32_t;
-typedef _Atomic(uint_fast32_t)		atomic_uint_fast32_t;
-typedef _Atomic(int_fast64_t)		atomic_int_fast64_t;
-typedef _Atomic(uint_fast64_t)		atomic_uint_fast64_t;
-typedef _Atomic(intptr_t)		atomic_intptr_t;
-typedef _Atomic(uintptr_t)		atomic_uintptr_t;
-typedef _Atomic(size_t)			atomic_size_t;
-typedef _Atomic(ptrdiff_t)		atomic_ptrdiff_t;
-typedef _Atomic(intmax_t)		atomic_intmax_t;
-typedef _Atomic(uintmax_t)		atomic_uintmax_t;
-
-/*
- * 7.17.7 Operations on atomic types.
- */
-
-/*
- * Compiler-specific operations.
- */
-
-#if defined(__CLANG_ATOMICS)
-#define	atomic_compare_exchange_strong_explicit(object, expected,	\
-    desired, success, failure)						\
-	__c11_atomic_compare_exchange_strong(object, expected, desired,	\
-	    success, failure)
-#define	atomic_compare_exchange_weak_explicit(object, expected,		\
-    desired, success, failure)						\
-	__c11_atomic_compare_exchange_weak(object, expected, desired,	\
-	    success, failure)
-#define	atomic_exchange_explicit(object, desired, order)		\
-	__c11_atomic_exchange(object, desired, order)
-#define	atomic_fetch_add_explicit(object, operand, order)		\
-	__c11_atomic_fetch_add(object, operand, order)
-#define	atomic_fetch_and_explicit(object, operand, order)		\
-	__c11_atomic_fetch_and(object, operand, order)
-#define	atomic_fetch_or_explicit(object, operand, order)		\
-	__c11_atomic_fetch_or(object, operand, order)
-#define	atomic_fetch_sub_explicit(object, operand, order)		\
-	__c11_atomic_fetch_sub(object, operand, order)
-#define	atomic_fetch_xor_explicit(object, operand, order)		\
-	__c11_atomic_fetch_xor(object, operand, order)
-#define	atomic_load_explicit(object, order)				\
-	__c11_atomic_load(object, order)
-#define	atomic_store_explicit(object, desired, order)			\
-	__c11_atomic_store(object, desired, order)
-#elif defined(__GNUC_ATOMICS)
-#define	atomic_compare_exchange_strong_explicit(object, expected,	\
-    desired, success, failure)						\
-	__atomic_compare_exchange_n(object, expected,			\
-	    desired, 0, success, failure)
-#define	atomic_compare_exchange_weak_explicit(object, expected,		\
-    desired, success, failure)						\
-	__atomic_compare_exchange_n(object, expected,			\
-	    desired, 1, success, failure)
-#define	atomic_exchange_explicit(object, desired, order)		\
-	__atomic_exchange_n(object, desired, order)
-#define	atomic_fetch_add_explicit(object, operand, order)		\
-	__atomic_fetch_add(object, operand, order)
-#define	atomic_fetch_and_explicit(object, operand, order)		\
-	__atomic_fetch_and(object, operand, order)
-#define	atomic_fetch_or_explicit(object, operand, order)		\
-	__atomic_fetch_or(object, operand, order)
-#define	atomic_fetch_sub_explicit(object, operand, order)		\
-	__atomic_fetch_sub(object, operand, order)
-#define	atomic_fetch_xor_explicit(object, operand, order)		\
-	__atomic_fetch_xor(object, operand, order)
-#define	atomic_load_explicit(object, order)				\
-	__atomic_load_n(object, order)
-#define	atomic_store_explicit(object, desired, order)			\
-	__atomic_store_n(object, desired, order)
-#else
-#define	__atomic_apply_stride(object, operand) \
-	(((__typeof__((object)->__val))0) + (operand))
-#define	atomic_compare_exchange_strong_explicit(object, expected,	\
-    desired, success, failure)	__extension__ ({			\
-	__typeof__(expected) __ep = (expected);				\
-	__typeof__(*__ep) __e = *__ep;					\
-	(void)(success); (void)(failure);				\
-	(_Bool)((*__ep = __sync_val_compare_and_swap(&(object)->__val,	\
-	    __e, desired)) == __e);					\
-})
-#define	atomic_compare_exchange_weak_explicit(object, expected,		\
-    desired, success, failure)						\
-	atomic_compare_exchange_strong_explicit(object, expected,	\
-		desired, success, failure)
-#if __has_builtin(__sync_swap)
-/* Clang provides a full-barrier atomic exchange - use it if available. */
-#define	atomic_exchange_explicit(object, desired, order)		\
-	((void)(order), __sync_swap(&(object)->__val, desired))
-#else
-/*
- * __sync_lock_test_and_set() is only an acquire barrier in theory (although in
- * practice it is usually a full barrier) so we need an explicit barrier before
- * it.
- */
-#define	atomic_exchange_explicit(object, desired, order)		\
-__extension__ ({							\
-	__typeof__(object) __o = (object);				\
-	__typeof__(desired) __d = (desired);				\
-	(void)(order);							\
-	__sync_synchronize();						\
-	__sync_lock_test_and_set(&(__o)->__val, __d);			\
-})
-#endif
-#define	atomic_fetch_add_explicit(object, operand, order)		\
-	((void)(order), __sync_fetch_and_add(&(object)->__val,		\
-	    __atomic_apply_stride(object, operand)))
-#define	atomic_fetch_and_explicit(object, operand, order)		\
-	((void)(order), __sync_fetch_and_and(&(object)->__val, operand))
-#define	atomic_fetch_or_explicit(object, operand, order)		\
-	((void)(order), __sync_fetch_and_or(&(object)->__val, operand))
-#define	atomic_fetch_sub_explicit(object, operand, order)		\
-	((void)(order), __sync_fetch_and_sub(&(object)->__val,		\
-	    __atomic_apply_stride(object, operand)))
-#define	atomic_fetch_xor_explicit(object, operand, order)		\
-	((void)(order), __sync_fetch_and_xor(&(object)->__val, operand))
-#define	atomic_load_explicit(object, order)				\
-	((void)(order), __sync_fetch_and_add(&(object)->__val, 0))
-#define	atomic_store_explicit(object, desired, order)			\
-	((void)atomic_exchange_explicit(object, desired, order))
-#endif
-
-/*
- * Convenience functions.
- *
- * Don't provide these in kernel space. In kernel space, we should be
- * disciplined enough to always provide explicit barriers.
- */
-
-#ifndef _KERNEL
-#define	atomic_compare_exchange_strong(object, expected, desired)	\
-	atomic_compare_exchange_strong_explicit(object, expected,	\
-	    desired, memory_order_seq_cst, memory_order_seq_cst)
-#define	atomic_compare_exchange_weak(object, expected, desired)		\
-	atomic_compare_exchange_weak_explicit(object, expected,		\
-	    desired, memory_order_seq_cst, memory_order_seq_cst)
-#define	atomic_exchange(object, desired)				\
-	atomic_exchange_explicit(object, desired, memory_order_seq_cst)
-#define	atomic_fetch_add(object, operand)				\
-	atomic_fetch_add_explicit(object, operand, memory_order_seq_cst)
-#define	atomic_fetch_and(object, operand)				\
-	atomic_fetch_and_explicit(object, operand, memory_order_seq_cst)
-#define	atomic_fetch_or(object, operand)				\
-	atomic_fetch_or_explicit(object, operand, memory_order_seq_cst)
-#define	atomic_fetch_sub(object, operand)				\
-	atomic_fetch_sub_explicit(object, operand, memory_order_seq_cst)
-#define	atomic_fetch_xor(object, operand)				\
-	atomic_fetch_xor_explicit(object, operand, memory_order_seq_cst)
-#define	atomic_load(object)						\
-	atomic_load_explicit(object, memory_order_seq_cst)
-#define	atomic_store(object, desired)					\
-	atomic_store_explicit(object, desired, memory_order_seq_cst)
-#endif /* !_KERNEL */
-
-/*
- * 7.17.8 Atomic flag type and operations.
- *
- * XXX: Assume atomic_bool can be used as an atomic_flag. Is there some
- * kind of compiler built-in type we could use?
- */
-
-typedef struct {
-	atomic_bool	__flag;
-} atomic_flag;
-#define	ATOMIC_FLAG_INIT		{ ATOMIC_VAR_INIT(0) }
-
-static __inline _Bool
-atomic_flag_test_and_set_explicit(volatile atomic_flag *__object,
-    memory_order __order)
-{
-	return (atomic_exchange_explicit(&__object->__flag, 1, __order));
-}
-
-static __inline void
-atomic_flag_clear_explicit(volatile atomic_flag *__object, memory_order __order)
-{
-
-	atomic_store_explicit(&__object->__flag, 0, __order);
-}
-
-#ifndef _KERNEL
-static __inline _Bool
-atomic_flag_test_and_set(volatile atomic_flag *__object)
-{
-
-	return (atomic_flag_test_and_set_explicit(__object,
-	    memory_order_seq_cst));
-}
-
-static __inline void
-atomic_flag_clear(volatile atomic_flag *__object)
-{
-
-	atomic_flag_clear_explicit(__object, memory_order_seq_cst);
-}
-#endif /* !_KERNEL */
-
-#endif /* !_STDATOMIC_H_ */
diff --git a/newlib/libc/machine/riscv/Makefile.am b/newlib/libc/machine/riscv/Makefile.am
index 017b4be2e..b399547dc 100644
--- a/newlib/libc/machine/riscv/Makefile.am
+++ b/newlib/libc/machine/riscv/Makefile.am
@@ -15,3 +15,7 @@ lib_a_CFLAGS=$(AM_CFLAGS)
 
 ACLOCAL_AMFLAGS = -I ../../.. -I ../../../..
 CONFIG_STATUS_DEPENDENCIES = $(newlib_basedir)/configure.host
+
+STRCMP_DEP=strcmp-zbb.S
+
+$(lpfx)strcmp.o: $(STRCMP_DEP)
diff --git a/newlib/libc/machine/riscv/Makefile.in b/newlib/libc/machine/riscv/Makefile.in
index e6dee8763..f02e5b9e6 100644
--- a/newlib/libc/machine/riscv/Makefile.in
+++ b/newlib/libc/machine/riscv/Makefile.in
@@ -207,6 +207,7 @@ lib_a_CCASFLAGS = $(AM_CCASFLAGS)
 lib_a_CFLAGS = $(AM_CFLAGS)
 ACLOCAL_AMFLAGS = -I ../../.. -I ../../../..
 CONFIG_STATUS_DEPENDENCIES = $(newlib_basedir)/configure.host
+STRCMP_DEP = strcmp-zbb.S
 all: all-am
 
 .SUFFIXES:
@@ -508,6 +509,8 @@ uninstall-am:
 	uninstall-am
 
 
+$(lpfx)strcmp.o: $(STRCMP_DEP)
+
 # Tell versions [3.59,3.63) of GNU make to not export all variables.
 # Otherwise a system limit (for SysV at least) may be exceeded.
 .NOEXPORT:
diff --git a/newlib/libc/machine/riscv/memcpy-asm.S b/newlib/libc/machine/riscv/memcpy-asm.S
index 5571e4704..ec5303270 100644
--- a/newlib/libc/machine/riscv/memcpy-asm.S
+++ b/newlib/libc/machine/riscv/memcpy-asm.S
@@ -9,7 +9,7 @@
    http://www.opensource.org/licenses.
 */
 
-#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
+#if defined(PREFER_SIZE_OVER_SPEED) && defined(__OPTIMIZE_SIZE__)
 .text
 .global memcpy
 .type	memcpy, @function
diff --git a/newlib/libc/machine/riscv/memcpy.c b/newlib/libc/machine/riscv/memcpy.c
index 4098f3ab1..400135174 100644
--- a/newlib/libc/machine/riscv/memcpy.c
+++ b/newlib/libc/machine/riscv/memcpy.c
@@ -9,7 +9,7 @@
    http://www.opensource.org/licenses.
 */
 
-#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
+#if defined(PREFER_SIZE_OVER_SPEED) && defined(__OPTIMIZE_SIZE__)
 //memcpy defined in memcpy-asm.S
 #else
 
diff --git a/newlib/libc/machine/riscv/memmove-stub.c b/newlib/libc/machine/riscv/memmove-stub.c
index d882e46c1..beddce3d8 100644
--- a/newlib/libc/machine/riscv/memmove-stub.c
+++ b/newlib/libc/machine/riscv/memmove-stub.c
@@ -9,6 +9,8 @@
    http://www.opensource.org/licenses.
 */
 
-#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
+#if defined(PREFER_SIZE_OVER_SPEED) && defined(__OPTIMIZE_SIZE__)
+/* implemented in memmove.S */
+#else
 #include "../../string/memmove.c"
 #endif
diff --git a/newlib/libc/machine/riscv/memmove.S b/newlib/libc/machine/riscv/memmove.S
index 66d9cd494..440232e39 100644
--- a/newlib/libc/machine/riscv/memmove.S
+++ b/newlib/libc/machine/riscv/memmove.S
@@ -9,7 +9,7 @@
    http://www.opensource.org/licenses.
 */
 
-#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
+#if defined(PREFER_SIZE_OVER_SPEED) && defined(__OPTIMIZE_SIZE__)
 .text
 .global memmove
 .type	memmove, @function
diff --git a/newlib/libc/machine/riscv/memset.S b/newlib/libc/machine/riscv/memset.S
index a717ae7fb..3177a21dd 100644
--- a/newlib/libc/machine/riscv/memset.S
+++ b/newlib/libc/machine/riscv/memset.S
@@ -13,7 +13,7 @@
 .global memset
 .type	memset, @function
 memset:
-#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
+#if defined(PREFER_SIZE_OVER_SPEED) && defined(__OPTIMIZE_SIZE__)
   mv t1, a0
   beqz a2, 2f
 
diff --git a/newlib/libc/machine/riscv/strcmp-zbb.S b/newlib/libc/machine/riscv/strcmp-zbb.S
new file mode 100644
index 000000000..3552cf143
--- /dev/null
+++ b/newlib/libc/machine/riscv/strcmp-zbb.S
@@ -0,0 +1,122 @@
+/* Copyright (c) 2020  SiFive Inc. All rights reserved.
+
+   This copyrighted material is made available to anyone wishing to use,
+   modify, copy, or redistribute it subject to the terms and conditions
+   of the FreeBSD License.   This program is distributed in the hope that
+   it will be useful, but WITHOUT ANY WARRANTY expressed or implied,
+   including the implied warranties of MERCHANTABILITY or FITNESS FOR
+   A PARTICULAR PURPOSE.  A copy of this license is available at
+   http://www.opensource.org/licenses.
+*/
+
+#include <sys/asm.h>
+
+#if BYTE_ORDER != LITTLE_ENDIAN
+# error
+#endif
+
+#ifndef __riscv_zbb
+#error "Must compile with zbb"
+#endif
+
+#if __riscv_xlen == 64
+  #define N 3
+#else
+  #define N 5
+#endif
+
+.text
+.globl strcmp
+.type  strcmp, @function
+.align 2
+strcmp:
+  or    a4, a0, a1
+  li    t2, -1
+  and   a4, a4, SZREG-1
+  beqz  a4, .Lenter
+  j .Lmisaligned
+
+  .macro check_one_word i n
+    REG_L a2, \i*SZREG(a0)
+    REG_L a3, \i*SZREG(a1)
+
+    orc.b t0, a2
+
+    bne   t0, t2, .Lnull\i
+    .if \i+1-\n
+      bne   a2, a3, .Lmismatch
+    .else
+      beq   a2, a3, .Lloop
+      # fall through to .Lmismatch
+    .endif
+  .endm
+
+  .macro foundnull i n
+    .ifne \i
+      .Lnull\i:
+      add   a0, a0, \i*SZREG
+      add   a1, a1, \i*SZREG
+      .ifeq \i-1
+        .Lnull0:
+      .endif
+      bne   a2, a3, .Lmisaligned
+      li    a0, 0
+      ret
+    .endif
+  .endm
+
+.Lloop:
+  add   a0, a0, N*SZREG
+  add   a1, a1, N*SZREG
+
+.Lenter:
+  # examine full words at a time, favoring strings of a couple dozen chars
+#if __riscv_xlen == 32
+  check_one_word 0 N
+  check_one_word 1 N
+  check_one_word 2 N
+  check_one_word 3 N
+  check_one_word 4 N
+#else
+  check_one_word 0 N
+  check_one_word 1 N
+  check_one_word 2 N
+#endif
+  # backwards branch to .Lloop contained above
+
+.Lmismatch:
+  rev8 a4, a2
+  rev8 a5, a3
+  bgeu a4, a5, 1f
+  li a0, -1
+  ret
+1:
+  li a0, 1
+  ret
+
+.Lmisaligned:
+  # misaligned
+  lbu   a2, 0(a0)
+  lbu   a3, 0(a1)
+  add   a0, a0, 1
+  add   a1, a1, 1
+  bne   a2, a3, 1f
+  bnez  a2, .Lmisaligned
+
+1:
+  sub   a0, a2, a3
+  ret
+
+  # cases in which a null byte was detected
+#if __riscv_xlen == 32
+  foundnull 0 5
+  foundnull 1 5
+  foundnull 2 5
+  foundnull 3 5
+  foundnull 4 5
+#else
+  foundnull 0 3
+  foundnull 1 3
+  foundnull 2 3
+#endif
+.size	strcmp, .-strcmp
diff --git a/newlib/libc/machine/riscv/strcmp.S b/newlib/libc/machine/riscv/strcmp.S
index eaf6d4b3c..3119384ab 100644
--- a/newlib/libc/machine/riscv/strcmp.S
+++ b/newlib/libc/machine/riscv/strcmp.S
@@ -15,11 +15,14 @@
 # error
 #endif
 
+#if defined(__riscv_zbb) && !(defined(PREFER_SIZE_OVER_SPEED) && defined(__OPTIMIZE_SIZE__))
+#include "strcmp-zbb.S"
+#else
 .text
 .globl strcmp
 .type  strcmp, @function
 strcmp:
-#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
+#if defined(PREFER_SIZE_OVER_SPEED) && defined(__OPTIMIZE_SIZE__)
 1:
   lbu   a2, 0(a0)
   lbu   a3, 0(a1)
@@ -41,8 +44,13 @@ strcmp:
 
 #if SZREG == 4
   li a5, 0x7f7f7f7f
+#else
+#ifdef __riscv_cmodel_compact
+  la.got.gprel a5, mask
+  ld a5, 0(a5)
 #else
   ld a5, mask
+#endif
 #endif
 
   .macro check_one_word i n
@@ -162,3 +170,4 @@ mask:
 .dword 0x7f7f7f7f7f7f7f7f
 #endif
 #endif
+#endif
diff --git a/newlib/libm/common/s_scalbn.c b/newlib/libm/common/s_scalbn.c
index e9dbb16ac..72da0e4a1 100644
--- a/newlib/libm/common/s_scalbn.c
+++ b/newlib/libm/common/s_scalbn.c
@@ -93,15 +93,14 @@ tiny   = 1.0e-300;
             if (n< -50000) return tiny*x; 	/*underflow*/
 	    }
         if (k==0x7ff) return x+x;		/* NaN or Inf */
+        if (n > 50000) 	/* in case integer overflow in n+k */
+	    return huge*copysign(huge,x);	/*overflow*/
         k = k+n; 
         if (k >  0x7fe) return huge*copysign(huge,x); /* overflow  */
         if (k > 0) 				/* normal result */
 	    {SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20)); return x;}
-        if (k <= -54) {
-            if (n > 50000) 	/* in case integer overflow in n+k */
-		return huge*copysign(huge,x);	/*overflow*/
-	    else return tiny*copysign(tiny,x); 	/*underflow*/
-      }
+        if (k <= -54)
+	    return tiny*copysign(tiny,x); 	/*underflow*/
         k += 54;				/* subnormal result */
 	SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20));
         return x*twom54;
diff --git a/newlib/libm/common/sf_scalbn.c b/newlib/libm/common/sf_scalbn.c
index 700060010..747a421ef 100644
--- a/newlib/libm/common/sf_scalbn.c
+++ b/newlib/libm/common/sf_scalbn.c
@@ -56,15 +56,14 @@ tiny   = 1.0e-30;
 	    k = ((ix&0x7f800000)>>23) - 25; 
             if (n< -50000) return tiny*x; 	/*underflow*/
         }
+        if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
+	    return huge*copysignf(huge,x);	/*overflow*/
         k = k+n; 
         if (k > FLT_LARGEST_EXP) return huge*copysignf(huge,x); /* overflow  */
         if (k > 0) 				/* normal result */
 	    {SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23)); return x;}
-        if (k < FLT_SMALLEST_EXP) {
-            if (n > OVERFLOW_INT) 	/* in case integer overflow in n+k */
-		return huge*copysignf(huge,x);	/*overflow*/
-	    else return tiny*copysignf(tiny,x);	/*underflow*/
-        }
+        if (k < FLT_SMALLEST_EXP)
+	    return tiny*copysignf(tiny,x);	/*underflow*/
         k += 25;				/* subnormal result */
 	SET_FLOAT_WORD(x,(ix&0x807fffff)|(k<<23));
         return x*twom25;
